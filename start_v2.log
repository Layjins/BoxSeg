nohup: ignoring input
Command Line Args: Namespace(config_file='projects/BoxSeg/configs/voc/boxseg_r50_1x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=['SOLVER.IMS_PER_BATCH', '16', 'OUTPUT_DIR', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_1x'], resume=False)
aaaaa : 4
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:41700 [0] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:41700 [0] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:41700 [0] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:41700 [0] NCCL INFO Using network IB
NCCL version 2.10.3+cuda10.2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:41702 [2] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:41702 [2] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:41701 [1] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:41701 [1] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:41702 [2] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:41702 [2] NCCL INFO Using network IB
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:41701 [1] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:41701 [1] NCCL INFO Using network IB
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:41703 [3] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:41703 [3] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:41703 [3] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:41703 [3] NCCL INFO Using network IB
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO Trees [0] -1/-1/-1->3->1 [1] 1/-1/-1->3->-1 [2] -1/-1/-1->3->1 [3] 1/-1/-1->3->-1 [4] -1/-1/-1->3->1 [5] 1/-1/-1->3->-1 [6] -1/-1/-1->3->1 [7] 1/-1/-1->3->-1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 00/08 :    0   1   3   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO Trees [0] 0/-1/-1->2->-1 [1] -1/-1/-1->2->0 [2] 0/-1/-1->2->-1 [3] -1/-1/-1->2->0 [4] 0/-1/-1->2->-1 [5] -1/-1/-1->2->0 [6] 0/-1/-1->2->-1 [7] -1/-1/-1->2->0
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Trees [0] 3/-1/-1->1->0 [1] 0/-1/-1->1->3 [2] 3/-1/-1->1->0 [3] 0/-1/-1->1->3 [4] 3/-1/-1->1->0 [5] 0/-1/-1->1->3 [6] 3/-1/-1->1->0 [7] 0/-1/-1->1->3
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO Setting affinity for GPU 3 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 01/08 :    0   2   3   1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO Setting affinity for GPU 2 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Setting affinity for GPU 1 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 02/08 :    0   2   1   3
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 03/08 :    0   3   1   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 04/08 :    0   1   3   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 05/08 :    0   2   3   1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 06/08 :    0   2   1   3
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 07/08 :    0   3   1   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Trees [0] 1/-1/-1->0->2 [1] 2/-1/-1->0->1 [2] 1/-1/-1->0->2 [3] 2/-1/-1->0->1 [4] 1/-1/-1->0->2 [5] 2/-1/-1->0->1 [6] 1/-1/-1->0->2 [7] 2/-1/-1->0->1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Setting affinity for GPU 0 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO Channel 02 : 3[b2000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO Channel 06 : 3[b2000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 00 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Channel 03 : 1[89000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO Channel 01 : 2[b1000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 04 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Channel 07 : 1[89000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO Channel 05 : 2[b1000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 01 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Channel 00 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO Channel 01 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO Channel 00 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 02 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Channel 02 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO Channel 03 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO Channel 03 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 05 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Channel 04 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO Channel 05 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO Channel 04 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 06 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Channel 06 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO Channel 07 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO Channel 07 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Channel 01 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 03 : 0[88000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO Channel 00 : 3[b2000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO Channel 02 : 2[b1000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Channel 05 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 07 : 0[88000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO Channel 04 : 3[b2000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO Channel 06 : 2[b1000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 01 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 02 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 03 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 05 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 06 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO Channel 00 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO Channel 01 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 07 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO Channel 02 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO Channel 02 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO Channel 04 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO Channel 05 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO Channel 06 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO Channel 06 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 00 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Channel 01 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 03 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Channel 03 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 04 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Channel 05 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Channel 07 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Channel 07 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Channel 00 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Channel 02 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Channel 03 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Channel 04 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Channel 06 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Channel 07 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41702:42252 [2] NCCL INFO comm 0x7f2d3c000fa0 rank 2 nranks 4 cudaDev 2 busId b1000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:42250 [0] NCCL INFO comm 0x7fbbc4000fa0 rank 0 nranks 4 cudaDev 0 busId 88000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41701:42254 [1] NCCL INFO comm 0x7f4994000fa0 rank 1 nranks 4 cudaDev 1 busId 89000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41703:42256 [3] NCCL INFO comm 0x7f1d10000fa0 rank 3 nranks 4 cudaDev 3 busId b2000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:41700:41700 [0] NCCL INFO Launch mode Parallel
Config 'projects/BoxSeg/configs/voc/boxseg_r50_1x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
Config 'projects/BoxSeg/configs/voc/boxseg_r50_1x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
Config 'projects/BoxSeg/configs/voc/boxseg_r50_1x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
Config 'projects/BoxSeg/configs/voc/boxseg_r50_1x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
[32m[06/24 17:07:43 detectron2]: [0mRank of current process: 0. World size: 4
[32m[06/24 17:07:45 detectron2]: [0mEnvironment info:
-------------------------------  -----------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.12 (default, Nov  1 2021, 17:15:04) [GCC 7.3.0]
numpy                            1.23.4
detectron2                       0.6 @/workspace/detectron2/detectron2
Compiler                         GCC 7.3
CUDA compiler                    CUDA 10.2
detectron2 arch flags            7.0
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          1.10.0+cu102 @/usr/local/python/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1,2,3                      Tesla V100-SXM2-32GB (arch=7.0)
Driver version                   470.182.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.11.0+cu102 @/usr/local/python/lib/python3.8/site-packages/torchvision
torchvision arch flags           3.5, 5.0, 6.0, 7.0, 7.5
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.7.0
-------------------------------  -----------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[32m[06/24 17:07:45 detectron2]: [0mCommand line arguments: Namespace(config_file='projects/BoxSeg/configs/voc/boxseg_r50_1x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=4, num_machines=1, opts=['SOLVER.IMS_PER_BATCH', '16', 'OUTPUT_DIR', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_1x'], resume=False)
[32m[06/24 17:07:45 detectron2]: [0mContents of args.config_file=projects/BoxSeg/configs/voc/boxseg_r50_1x.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m../Voc-BoxSeg.yaml[39m[38;5;186m"[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m/path/workspace/pretrained_models/detectron2/R-50.pkl[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m

[38;5;15m  [39m[38;5;197mPROTO_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m  [39m[38;5;197mWITH_PROTOTYPE_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m  [39m[38;5;197mUSE_VFL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m

[38;5;15m  [39m[38;5;197mCOPYPASTE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m  [39m[38;5;197mCOPYPASTE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186minstance[39m[38;5;186m"[39m

[38;5;15m  [39m[38;5;197mBOX_TEACHER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_BINARY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m    [39m[38;5;197mTEACHER_WITH_NMS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mDYNAMIC_MASK_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m

[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/boxseg_r50_1x[39m[38;5;186m"[39m

[32m[06/24 17:07:45 detectron2]: [0mRunning with full config:
[38;5;197mCUDNN_BENCHMARK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mASPECT_RATIO_GROUPING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mFILTER_EMPTY_ANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m  [39m[38;5;197mREPEAT_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mSAMPLER_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrainingSampler[39m
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2000[39m
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mvoc_2007_test[39m
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mvoc_2007_trainval[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mvoc_2012_trainval[39m
[38;5;197mGLOBAL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mHACK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG_EXTRA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mAUG_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mstrong[39m
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCROP_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mrelative_range[39m
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBGR[39m
[38;5;15m  [39m[38;5;197mHFLIP_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mIS_ROTATE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mMASK_FORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mpolygon[39m
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1333[39m
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1333[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m480[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m544[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m576[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m608[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m640[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m672[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m704[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m736[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m768[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mchoice[39m
[38;5;15m  [39m[38;5;197mRANDOM_FLIP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mhorizontal[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mANCHOR_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANGLES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-90[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m90[39m
[38;5;15m    [39m[38;5;197mASPECT_RATIOS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDefaultAnchorGenerator[39m
[38;5;15m    [39m[38;5;197mOFFSET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mSIZES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANTI_ALIAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFREEZE_AT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mbuild_fcos_resnet_fpn_backbone[39m
[38;5;15m  [39m[38;5;197mBASIS_MODULE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANN_SET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mcoco[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;197mLOSS_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mProtoNet[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSyncBN[39m
[38;5;15m    [39m[38;5;197mNUM_BASES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m  [39m[38;5;197mBATEXT[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCANONICAL_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mCUSTOM_DICT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mEVAL_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;197mNUM_CHARS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m25[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mPOOLER_SCALES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.125[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.0625[39m
[38;5;15m    [39m[38;5;197mRECOGNITION_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mctc[39m
[38;5;15m    [39m[38;5;197mRECOGNIZER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mattn[39m
[38;5;15m    [39m[38;5;197mSAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mUSE_AET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_COORDCONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mVOC_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m  [39m[38;5;197mBLENDMASK[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mATTN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mBOTTOM_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m56[39m
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mPOOLER_SCALES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m    [39m[38;5;197mTOP_INTERP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mbilinear[39m
[38;5;15m    [39m[38;5;197mVISUALIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mBOXINST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOTTOM_PIXELS_REMOVED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mPAIRWISE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mCOLOR_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m      [39m[38;5;197mDILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m      [39m[38;5;197mSIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m      [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10000[39m
[38;5;15m  [39m[38;5;197mBOX_TEACHER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mAVG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mDYNAMIC_MASK_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFIX_REDUCTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mIOU_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_BINARY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mMASK_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.999[39m
[38;5;15m    [39m[38;5;197mRESIZE_IMAGES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mRETURN_FLOAT_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mSCORE_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mTEACHER_EVAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mTEACHER_MASK_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mTEACHER_WITH_NMS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_AUG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_TEACHER_INFERENCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10000[39m
[38;5;15m    [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mlinear[39m
[38;5;15m    [39m[38;5;197mWITH_AVG_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mWITH_WARMUP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mBiFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_REPEATS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m160[39m
[38;5;15m  [39m[38;5;197mCONDINST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOTTOM_PIXELS_REMOVED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mMASK_BRANCH[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mCHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m      [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBN[39m
[38;5;15m      [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m      [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m      [39m[38;5;197mSEMANTIC_LOSS_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mMASK_HEAD[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mCHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m      [39m[38;5;197mDISABLE_REL_COORDS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m      [39m[38;5;197mNUM_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m      [39m[38;5;197mUSE_FP16[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mMASK_OUT_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mMAX_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mTOPK_PROPOSALS_PER_IM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m  [39m[38;5;197mCOPYPASTE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mCOPYPASTE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141minstance[39m
[38;5;15m  [39m[38;5;197mDEVICE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mcuda[39m
[38;5;15m  [39m[38;5;197mDLA[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_BODY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDLA34[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m  [39m[38;5;197mFCOS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOX_QUALITY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mctrness[39m
[38;5;15m    [39m[38;5;197mCENTER_SAMPLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mFPN_STRIDES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mLOC_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mgiou[39m
[38;5;15m    [39m[38;5;197mLOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mLOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mLOSS_NORMALIZER_CLS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfg[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT_CLS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNMS_TH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_BOX_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CLS_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_SHARE_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOS_RADIUS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.5[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSIZES_OF_INTEREST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mTHRESH_WITH_CTR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mTOP_LEVELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mUSE_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_RELU[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mUSE_SCALE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mYIELD_BOX_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mYIELD_PROPOSAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mFCPOSE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mATTN_LEN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2737[39m
[38;5;15m    [39m[38;5;197mBASIS_MODULE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mBN_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSyncBN[39m
[38;5;15m      [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m      [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m      [39m[38;5;197mNUM_BASES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m      [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m17[39m
[38;5;15m    [39m[38;5;197mDISTANCE_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12.0[39m
[38;5;15m    [39m[38;5;197mDYNAMIC_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mGT_HEATMAP_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mHEAD_HEATMAP_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mHEATMAP_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.8[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT_DIRECTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m9.0[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT_KEYPOINT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.5[39m
[38;5;15m    [39m[38;5;197mMAX_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m70[39m
[38;5;15m    [39m[38;5;197mPROPOSALS_PER_INST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m70[39m
[38;5;15m    [39m[38;5;197mSIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m  [39m[38;5;197mFCPOSE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFUSE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msum[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m  [39m[38;5;197mKEYPOINT_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mLOAD_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mMEInst[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mAGNOSTIC[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mCENTER_SAMPLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mDIM_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m60[39m
[38;5;15m    [39m[38;5;197mFLAG_PARAMETERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFPN_STRIDES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mGCN_KERNEL_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m9[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mLAST_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mLOC_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mgiou[39m
[38;5;15m    [39m[38;5;197mLOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mLOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mLOSS_ON_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mMASK_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmse[39m
[38;5;15m    [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMASK_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m28[39m
[38;5;15m    [39m[38;5;197mNMS_TH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_BOX_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CLS_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_MASK_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_SHARE_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPATH_COMPONENTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mdatasets/coco/components/coco_2017_train_class_agnosticTrue_whitenTrue_sigmoidTrue_60.npz[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOS_RADIUS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.5[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSIGMOID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mSIZES_OF_INTEREST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mTHRESH_WITH_CTR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mTOP_LEVELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mTYPE_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDCNv1[39m
[38;5;15m    [39m[38;5;197mUSE_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_GCN_IN_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_RELU[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mUSE_SCALE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWHITEN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBoxSeg[39m
[38;5;15m  [39m[38;5;197mMOBILENET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mPANOPTIC_FPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMBINE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m      [39m[38;5;197mINSTANCES_CONFIDENCE_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;197mOVERLAP_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;197mSTUFF_AREA_LIMIT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4096[39m
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m103.53[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m116.28[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m123.675[39m
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mPROPOSAL_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMIN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFCOS[39m
[38;5;15m  [39m[38;5;197mPROTO_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEFORM_INTERVAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEFORM_NUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mRES2_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m  [39m[38;5;197mRETINANET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m&id002[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_LOSS_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mTOPK_CANDIDATES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;197mROI_BOX_CASCADE_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m&id001[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m20.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m20.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m15.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m15.0[39m
[38;5;15m    [39m[38;5;197mIOUS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m  [39m[38;5;197mROI_BOX_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id001[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_BBOX_REG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mFC_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1024[39m
[38;5;15m    [39m[38;5;197mFED_LOSS_FREQ_WEIGHT_POWER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mFED_LOSS_NUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNUM_FC[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mTRAIN_ON_PRED_BOXES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_FED_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_SIGMOID_CE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mRes5ROIHeads[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m20[39m
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mPROPOSAL_APPEND_GT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m  [39m[38;5;197mROI_KEYPOINT_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mMIN_KEYPOINTS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mKRCNNConvDeconvUpsampleHead[39m
[38;5;15m    [39m[38;5;197mNORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mNUM_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m17[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mMaskRCNNConvUpsampleHead[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m  [39m[38;5;197mRPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id002[39m
[38;5;15m    [39m[38;5;197mBOUNDARY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mHEAD_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mStandardRPNHead[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12000[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m255[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSemSegFPNHead[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m54[39m
[38;5;15m  [39m[38;5;197mSOLOV2[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFPN_INSTANCE_STRIDES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mFPN_SCALE_RANGES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m48[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m192[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m384[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m192[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m768[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m384[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m    [39m[38;5;197mINSTANCE_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mINSTANCE_IN_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mINSTANCE_IN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;197mLOSS[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mDICE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3.0[39m
[38;5;15m      [39m[38;5;197mFOCAL_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m      [39m[38;5;197mFOCAL_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m      [39m[38;5;197mFOCAL_USE_SIGMOID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m      [39m[38;5;197mFOCAL_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mMASK_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mMASK_IN_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mMASK_IN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;197mMASK_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMAX_PER_IMG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mNMS_KERNEL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mgaussian[39m
[38;5;15m    [39m[38;5;197mNMS_PRE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m500[39m
[38;5;15m    [39m[38;5;197mNMS_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mNMS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmatrix[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_GRIDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m40[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m36[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m24[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12[39m
[38;5;15m    [39m[38;5;197mNUM_INSTANCE_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_KERNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNUM_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSCORE_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mSIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m    [39m[38;5;197mTYPE_DCN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDCN[39m
[38;5;15m    [39m[38;5;197mUPDATE_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mUSE_COORD_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mUSE_DCN_IN_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mSWIN_TRANSFORMER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mAPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEPTHS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mDROP_PATH_RATE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m    [39m[38;5;197mEMBED_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m    [39m[38;5;197mMLP_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m24[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m    [39m[38;5;197mWINDOW_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m7[39m
[38;5;15m  [39m[38;5;197mTOP_MODULE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mconv[39m
[38;5;15m  [39m[38;5;197mUSE_VFL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mVOVNET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBACKBONE_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mCONV_BODY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mV-39-eSE[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m/path/workspace/pretrained_models/detectron2/R-50.pkl[39m
[38;5;15m  [39m[38;5;197mWITH_PROTOTYPE_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_1x[39m
[38;5;197mSEED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAMP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mBACKBONE_MULTIPLIER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m  [39m[38;5;197mBASE_LR_END[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5000[39m
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mvalue[39m
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mNORM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m  [39m[38;5;197mGAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mWarmupMultiStepLR[39m
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m18000[39m
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m  [39m[38;5;197mNESTEROV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mNUM_DECAYS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m  [39m[38;5;197mOPTIMIZER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSGD[39m
[38;5;15m  [39m[38;5;197mREFERENCE_WORLD_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m  [39m[38;5;197mRESCALE_INTERVAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12000[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16000[39m
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.001[39m
[38;5;15m  [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m  [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mlinear[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0001[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mnull[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFLIP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMAX_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4000[39m
[38;5;15m    [39m[38;5;197mMIN_SIZES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m400[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m500[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m600[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m700[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m900[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1100[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m  [39m[38;5;197mDETECTIONS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10000[39m
[38;5;15m  [39m[38;5;197mEXPECTED_RESULTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mKEYPOINT_OKS_SIGMAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mPRECISE_BN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mNUM_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m200[39m
[38;5;197mVERSION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;197mVIS_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m

[32m[06/24 17:07:45 detectron2]: [0mFull config saved to /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_1x/config.yaml
[32m[06/24 17:07:45 d2.utils.env]: [0mUsing a generated random seed 46037696
[32m[06/24 17:07:47 d2.engine.defaults]: [0mModel:
BoxSeg(
  (teacher): CondInst(
    (backbone): FPN(
      (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (top_block): LastLevelP6P7(
        (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (bottom_up): ResNet(
        (stem): BasicStem(
          (conv1): Conv2d(
            3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
        )
        (res2): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv1): Conv2d(
              64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
        )
        (res3): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv1): Conv2d(
              256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
        )
        (res4): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
            (conv1): Conv2d(
              512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (4): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (5): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
        )
        (res5): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
            (conv1): Conv2d(
              1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
        )
      )
    )
    (proposal_generator): FCOS(
      (fcos_head): FCOSHead(
        (cls_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (bbox_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (share_tower): Sequential()
        (cls_logits): Conv2d(256, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (bbox_pred): Conv2d(256, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (ctrness): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (scales): ModuleList(
          (0): Scale()
          (1): Scale()
          (2): Scale()
          (3): Scale()
          (4): Scale()
        )
      )
      (fcos_outputs): FCOSOutputs(
        (loc_loss_func): IOULoss()
      )
    )
    (mask_head): DynamicMaskHead(
      (MSELoss): MSELoss()
    )
    (mask_branch): MaskBranch(
      (refine): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (tower): Sequential(
        (0): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (3): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (4): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (controller): Conv2d(256, 233, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (student): CondInst(
    (backbone): FPN(
      (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (top_block): LastLevelP6P7(
        (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (bottom_up): ResNet(
        (stem): BasicStem(
          (conv1): Conv2d(
            3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
        )
        (res2): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv1): Conv2d(
              64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
        )
        (res3): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv1): Conv2d(
              256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
        )
        (res4): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
            (conv1): Conv2d(
              512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (4): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (5): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
        )
        (res5): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
            (conv1): Conv2d(
              1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
        )
      )
    )
    (proposal_generator): FCOS(
      (fcos_head): FCOSHead(
        (cls_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (bbox_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (share_tower): Sequential()
        (cls_logits): Conv2d(256, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (bbox_pred): Conv2d(256, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (ctrness): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (scales): ModuleList(
          (0): Scale()
          (1): Scale()
          (2): Scale()
          (3): Scale()
          (4): Scale()
        )
      )
      (fcos_outputs): FCOSOutputs(
        (loc_loss_func): IOULoss()
      )
    )
    (mask_head): DynamicMaskHead(
      (MSELoss): MSELoss()
    )
    (mask_branch): MaskBranch(
      (refine): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (tower): Sequential(
        (0): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (3): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (4): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (controller): Conv2d(256, 233, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[32m[06/24 17:07:47 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[06/24 17:07:47] adet.data.detection_utils INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[32m[06/24 17:07:49 d2.data.build]: [0mRemoved 0 images with no usable annotations. 16551 images left.
[32m[06/24 17:07:50 d2.data.build]: [0mDistribution of instances among all 20 categories:
[36m|  category   | #instances   |  category   | #instances   |  category  | #instances   |
|:-----------:|:-------------|:-----------:|:-------------|:----------:|:-------------|
|  aeroplane  | 1285         |   bicycle   | 1208         |    bird    | 1820         |
|    boat     | 1397         |   bottle    | 2116         |    bus     | 909          |
|     car     | 4008         |     cat     | 1616         |   chair    | 4338         |
|     cow     | 1058         | diningtable | 1057         |    dog     | 2079         |
|    horse    | 1156         |  motorbike  | 1141         |   person   | 15576        |
| pottedplant | 1724         |    sheep    | 1347         |    sofa    | 1211         |
|    train    | 984          |  tvmonitor  | 1193         |            |              |
|    total    | 47223        |             |              |            |              |[0m
[32m[06/24 17:07:50 d2.data.build]: [0mUsing training sampler TrainingSampler
[32m[06/24 17:07:50 d2.data.common]: [0mSerializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[32m[06/24 17:07:50 d2.data.common]: [0mSerializing 16551 elements to byte tensors and concatenating them all ...
[32m[06/24 17:07:50 d2.data.common]: [0mSerialized dataset takes 7.57 MiB
[32m[06/24 17:07:50 d2.checkpoint.detection_checkpoint]: [0m[DetectionCheckpointer] Loading from /path/workspace/pretrained_models/detectron2/R-50.pkl ...
[32m[06/24 17:07:50 fvcore.common.checkpoint]: [0m[Checkpointer] Loading from /path/workspace/pretrained_models/detectron2/R-50.pkl ...
[32m[06/24 17:07:50 d2.checkpoint.c2_model_loading]: [0mRenaming Caffe2 weights ......
[32m[06/24 17:07:50 d2.checkpoint.c2_model_loading]: [0mFollowing weights matched with submodule student.backbone.bottom_up:
| Names in Model    | Names in Checkpoint      | Shapes                                          |
|:------------------|:-------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*           | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                  | (64, 3, 7, 7)                                   |
[5m[31mWARNING[0m [32m[06/24 17:07:50 fvcore.common.checkpoint]: [0mSome model parameters or buffers are not found in the checkpoint:
[34m_iter[0m
[34mstudent.backbone.fpn_lateral3.{bias, weight}[0m
[34mstudent.backbone.fpn_lateral4.{bias, weight}[0m
[34mstudent.backbone.fpn_lateral5.{bias, weight}[0m
[34mstudent.backbone.fpn_output3.{bias, weight}[0m
[34mstudent.backbone.fpn_output4.{bias, weight}[0m
[34mstudent.backbone.fpn_output5.{bias, weight}[0m
[34mstudent.backbone.top_block.p6.{bias, weight}[0m
[34mstudent.backbone.top_block.p7.{bias, weight}[0m
[34mstudent.controller.{bias, weight}[0m
[34mstudent.mask_branch.refine.0.0.weight[0m
[34mstudent.mask_branch.refine.0.1.{bias, running_mean, running_var, weight}[0m
[34mstudent.mask_branch.refine.1.0.weight[0m
[34mstudent.mask_branch.refine.1.1.{bias, running_mean, running_var, weight}[0m
[34mstudent.mask_branch.refine.2.0.weight[0m
[34mstudent.mask_branch.refine.2.1.{bias, running_mean, running_var, weight}[0m
[34mstudent.mask_branch.tower.0.0.weight[0m
[34mstudent.mask_branch.tower.0.1.{bias, running_mean, running_var, weight}[0m
[34mstudent.mask_branch.tower.1.0.weight[0m
[34mstudent.mask_branch.tower.1.1.{bias, running_mean, running_var, weight}[0m
[34mstudent.mask_branch.tower.2.0.weight[0m
[34mstudent.mask_branch.tower.2.1.{bias, running_mean, running_var, weight}[0m
[34mstudent.mask_branch.tower.3.0.weight[0m
[34mstudent.mask_branch.tower.3.1.{bias, running_mean, running_var, weight}[0m
[34mstudent.mask_branch.tower.4.{bias, weight}[0m
[34mstudent.mask_head.{_iter, prototypes, sizes_of_interest}[0m
[34mstudent.proposal_generator.fcos_head.bbox_pred.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.bbox_tower.0.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.bbox_tower.1.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.bbox_tower.10.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.bbox_tower.3.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.bbox_tower.4.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.bbox_tower.6.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.bbox_tower.7.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.bbox_tower.9.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.cls_logits.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.cls_tower.0.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.cls_tower.1.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.cls_tower.10.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.cls_tower.3.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.cls_tower.4.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.cls_tower.6.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.cls_tower.7.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.cls_tower.9.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.ctrness.{bias, weight}[0m
[34mstudent.proposal_generator.fcos_head.scales.0.scale[0m
[34mstudent.proposal_generator.fcos_head.scales.1.scale[0m
[34mstudent.proposal_generator.fcos_head.scales.2.scale[0m
[34mstudent.proposal_generator.fcos_head.scales.3.scale[0m
[34mstudent.proposal_generator.fcos_head.scales.4.scale[0m
[34mteacher.backbone.bottom_up.res2.0.conv1.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res2.0.conv1.weight[0m
[34mteacher.backbone.bottom_up.res2.0.conv2.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res2.0.conv2.weight[0m
[34mteacher.backbone.bottom_up.res2.0.conv3.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res2.0.conv3.weight[0m
[34mteacher.backbone.bottom_up.res2.0.shortcut.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res2.0.shortcut.weight[0m
[34mteacher.backbone.bottom_up.res2.1.conv1.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res2.1.conv1.weight[0m
[34mteacher.backbone.bottom_up.res2.1.conv2.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res2.1.conv2.weight[0m
[34mteacher.backbone.bottom_up.res2.1.conv3.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res2.1.conv3.weight[0m
[34mteacher.backbone.bottom_up.res2.2.conv1.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res2.2.conv1.weight[0m
[34mteacher.backbone.bottom_up.res2.2.conv2.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res2.2.conv2.weight[0m
[34mteacher.backbone.bottom_up.res2.2.conv3.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res2.2.conv3.weight[0m
[34mteacher.backbone.bottom_up.res3.0.conv1.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res3.0.conv1.weight[0m
[34mteacher.backbone.bottom_up.res3.0.conv2.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res3.0.conv2.weight[0m
[34mteacher.backbone.bottom_up.res3.0.conv3.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res3.0.conv3.weight[0m
[34mteacher.backbone.bottom_up.res3.0.shortcut.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res3.0.shortcut.weight[0m
[34mteacher.backbone.bottom_up.res3.1.conv1.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res3.1.conv1.weight[0m
[34mteacher.backbone.bottom_up.res3.1.conv2.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res3.1.conv2.weight[0m
[34mteacher.backbone.bottom_up.res3.1.conv3.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res3.1.conv3.weight[0m
[34mteacher.backbone.bottom_up.res3.2.conv1.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res3.2.conv1.weight[0m
[34mteacher.backbone.bottom_up.res3.2.conv2.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res3.2.conv2.weight[0m
[34mteacher.backbone.bottom_up.res3.2.conv3.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res3.2.conv3.weight[0m
[34mteacher.backbone.bottom_up.res3.3.conv1.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res3.3.conv1.weight[0m
[34mteacher.backbone.bottom_up.res3.3.conv2.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res3.3.conv2.weight[0m
[34mteacher.backbone.bottom_up.res3.3.conv3.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res3.3.conv3.weight[0m
[34mteacher.backbone.bottom_up.res4.0.conv1.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.0.conv1.weight[0m
[34mteacher.backbone.bottom_up.res4.0.conv2.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.0.conv2.weight[0m
[34mteacher.backbone.bottom_up.res4.0.conv3.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.0.conv3.weight[0m
[34mteacher.backbone.bottom_up.res4.0.shortcut.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.0.shortcut.weight[0m
[34mteacher.backbone.bottom_up.res4.1.conv1.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.1.conv1.weight[0m
[34mteacher.backbone.bottom_up.res4.1.conv2.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.1.conv2.weight[0m
[34mteacher.backbone.bottom_up.res4.1.conv3.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.1.conv3.weight[0m
[34mteacher.backbone.bottom_up.res4.2.conv1.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.2.conv1.weight[0m
[34mteacher.backbone.bottom_up.res4.2.conv2.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.2.conv2.weight[0m
[34mteacher.backbone.bottom_up.res4.2.conv3.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.2.conv3.weight[0m
[34mteacher.backbone.bottom_up.res4.3.conv1.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.3.conv1.weight[0m
[34mteacher.backbone.bottom_up.res4.3.conv2.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.3.conv2.weight[0m
[34mteacher.backbone.bottom_up.res4.3.conv3.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.3.conv3.weight[0m
[34mteacher.backbone.bottom_up.res4.4.conv1.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.4.conv1.weight[0m
[34mteacher.backbone.bottom_up.res4.4.conv2.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.4.conv2.weight[0m
[34mteacher.backbone.bottom_up.res4.4.conv3.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.4.conv3.weight[0m
[34mteacher.backbone.bottom_up.res4.5.conv1.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.5.conv1.weight[0m
[34mteacher.backbone.bottom_up.res4.5.conv2.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.5.conv2.weight[0m
[34mteacher.backbone.bottom_up.res4.5.conv3.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res4.5.conv3.weight[0m
[34mteacher.backbone.bottom_up.res5.0.conv1.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res5.0.conv1.weight[0m
[34mteacher.backbone.bottom_up.res5.0.conv2.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res5.0.conv2.weight[0m
[34mteacher.backbone.bottom_up.res5.0.conv3.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res5.0.conv3.weight[0m
[34mteacher.backbone.bottom_up.res5.0.shortcut.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res5.0.shortcut.weight[0m
[34mteacher.backbone.bottom_up.res5.1.conv1.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res5.1.conv1.weight[0m
[34mteacher.backbone.bottom_up.res5.1.conv2.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res5.1.conv2.weight[0m
[34mteacher.backbone.bottom_up.res5.1.conv3.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res5.1.conv3.weight[0m
[34mteacher.backbone.bottom_up.res5.2.conv1.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res5.2.conv1.weight[0m
[34mteacher.backbone.bottom_up.res5.2.conv2.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res5.2.conv2.weight[0m
[34mteacher.backbone.bottom_up.res5.2.conv3.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.res5.2.conv3.weight[0m
[34mteacher.backbone.bottom_up.stem.conv1.norm.{bias, weight}[0m
[34mteacher.backbone.bottom_up.stem.conv1.weight[0m
[34mteacher.backbone.fpn_lateral3.{bias, weight}[0m
[34mteacher.backbone.fpn_lateral4.{bias, weight}[0m
[34mteacher.backbone.fpn_lateral5.{bias, weight}[0m
[34mteacher.backbone.fpn_output3.{bias, weight}[0m
[34mteacher.backbone.fpn_output4.{bias, weight}[0m
[34mteacher.backbone.fpn_output5.{bias, weight}[0m
[34mteacher.backbone.top_block.p6.{bias, weight}[0m
[34mteacher.backbone.top_block.p7.{bias, weight}[0m
[34mteacher.controller.{bias, weight}[0m
[34mteacher.mask_branch.refine.0.0.weight[0m
[34mteacher.mask_branch.refine.0.1.{bias, running_mean, running_var, weight}[0m
[34mteacher.mask_branch.refine.1.0.weight[0m
[34mteacher.mask_branch.refine.1.1.{bias, running_mean, running_var, weight}[0m
[34mteacher.mask_branch.refine.2.0.weight[0m
[34mteacher.mask_branch.refine.2.1.{bias, running_mean, running_var, weight}[0m
[34mteacher.mask_branch.tower.0.0.weight[0m
[34mteacher.mask_branch.tower.0.1.{bias, running_mean, running_var, weight}[0m
[34mteacher.mask_branch.tower.1.0.weight[0m
[34mteacher.mask_branch.tower.1.1.{bias, running_mean, running_var, weight}[0m
[34mteacher.mask_branch.tower.2.0.weight[0m
[34mteacher.mask_branch.tower.2.1.{bias, running_mean, running_var, weight}[0m
[34mteacher.mask_branch.tower.3.0.weight[0m
[34mteacher.mask_branch.tower.3.1.{bias, running_mean, running_var, weight}[0m
[34mteacher.mask_branch.tower.4.{bias, weight}[0m
[34mteacher.mask_head.{_iter, prototypes, sizes_of_interest}[0m
[34mteacher.proposal_generator.fcos_head.bbox_pred.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.bbox_tower.0.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.bbox_tower.1.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.bbox_tower.10.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.bbox_tower.3.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.bbox_tower.4.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.bbox_tower.6.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.bbox_tower.7.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.bbox_tower.9.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.cls_logits.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.cls_tower.0.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.cls_tower.1.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.cls_tower.10.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.cls_tower.3.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.cls_tower.4.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.cls_tower.6.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.cls_tower.7.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.cls_tower.9.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.ctrness.{bias, weight}[0m
[34mteacher.proposal_generator.fcos_head.scales.0.scale[0m
[34mteacher.proposal_generator.fcos_head.scales.1.scale[0m
[34mteacher.proposal_generator.fcos_head.scales.2.scale[0m
[34mteacher.proposal_generator.fcos_head.scales.3.scale[0m
[34mteacher.proposal_generator.fcos_head.scales.4.scale[0m
[5m[31mWARNING[0m [32m[06/24 17:07:50 fvcore.common.checkpoint]: [0mThe checkpoint state_dict contains keys that are not used by the model:
  [35mfc1000.{bias, weight}[0m
  [35mstem.conv1.bias[0m
[06/24 17:07:50] adet.trainer INFO: Starting training from iteration 0
[32m[06/24 17:08:10 d2.utils.events]: [0m eta: 3:48:59  iter: 19  total_loss: 2.554  loss_fcos_loc: 0.9669  loss_fcos_ctr: 0.7038  loss_fcos_vfcls: 0.03215  loss_prj: 0.8519  loss_pairwise: 0.0004912  loss_mask: 0  loss_mask_affinity: 0    time: 0.7661  last_time: 0.7856  data_time: 0.2139  last_data_time: 0.0134   lr: 0.0019081  max_mem: 7410M
[32m[06/24 17:08:25 d2.utils.events]: [0m eta: 3:48:09  iter: 39  total_loss: 2.493  loss_fcos_loc: 0.5741  loss_fcos_ctr: 0.6717  loss_fcos_vfcls: 0.9001  loss_prj: 0.3412  loss_pairwise: 0.0007028  loss_mask: 0  loss_mask_affinity: 0    time: 0.7630  last_time: 0.7525  data_time: 0.0166  last_data_time: 0.0158   lr: 0.0039061  max_mem: 8408M
[32m[06/24 17:08:40 d2.utils.events]: [0m eta: 3:48:20  iter: 59  total_loss: 2.412  loss_fcos_loc: 0.5209  loss_fcos_ctr: 0.6701  loss_fcos_vfcls: 0.9591  loss_prj: 0.2914  loss_pairwise: 0.001351  loss_mask: 0  loss_mask_affinity: 0    time: 0.7644  last_time: 0.7719  data_time: 0.0147  last_data_time: 0.0140   lr: 0.0059041  max_mem: 8408M
[32m[06/24 17:08:56 d2.utils.events]: [0m eta: 3:48:05  iter: 79  total_loss: 2.306  loss_fcos_loc: 0.5173  loss_fcos_ctr: 0.6632  loss_fcos_vfcls: 0.8361  loss_prj: 0.2789  loss_pairwise: 0.001881  loss_mask: 0.0004809  loss_mask_affinity: 8.246e-05    time: 0.7654  last_time: 0.6714  data_time: 0.0142  last_data_time: 0.0158   lr: 0.0079021  max_mem: 8408M
[32m[06/24 17:09:11 d2.utils.events]: [0m eta: 3:47:23  iter: 99  total_loss: 2.338  loss_fcos_loc: 0.5168  loss_fcos_ctr: 0.6775  loss_fcos_vfcls: 0.8418  loss_prj: 0.2765  loss_pairwise: 0.002554  loss_mask: 0.0007482  loss_mask_affinity: 0.0001163    time: 0.7619  last_time: 0.8363  data_time: 0.0182  last_data_time: 0.0119   lr: 0.0099001  max_mem: 8408M
[32m[06/24 17:09:26 d2.utils.events]: [0m eta: 3:47:15  iter: 119  total_loss: 2.232  loss_fcos_loc: 0.5075  loss_fcos_ctr: 0.6957  loss_fcos_vfcls: 0.7793  loss_prj: 0.2504  loss_pairwise: 0.002596  loss_mask: 0.001166  loss_mask_affinity: 0.0001636    time: 0.7627  last_time: 0.6834  data_time: 0.0168  last_data_time: 0.0173   lr: 0.01  max_mem: 8408M
[32m[06/24 17:09:42 d2.utils.events]: [0m eta: 3:47:23  iter: 139  total_loss: 2.188  loss_fcos_loc: 0.4788  loss_fcos_ctr: 0.6567  loss_fcos_vfcls: 0.7995  loss_prj: 0.2453  loss_pairwise: 0.002888  loss_mask: 0.001332  loss_mask_affinity: 0.0001835    time: 0.7648  last_time: 0.7129  data_time: 0.0159  last_data_time: 0.0228   lr: 0.01  max_mem: 8408M
[32m[06/24 17:09:57 d2.utils.events]: [0m eta: 3:47:58  iter: 159  total_loss: 2.136  loss_fcos_loc: 0.4479  loss_fcos_ctr: 0.6509  loss_fcos_vfcls: 0.8335  loss_prj: 0.2111  loss_pairwise: 0.003191  loss_mask: 0.001526  loss_mask_affinity: 0.0002361    time: 0.7663  last_time: 0.7168  data_time: 0.0167  last_data_time: 0.0089   lr: 0.01  max_mem: 8408M
[32m[06/24 17:10:13 d2.utils.events]: [0m eta: 3:47:48  iter: 179  total_loss: 2.169  loss_fcos_loc: 0.4357  loss_fcos_ctr: 0.6646  loss_fcos_vfcls: 0.8749  loss_prj: 0.1907  loss_pairwise: 0.003168  loss_mask: 0.001614  loss_mask_affinity: 0.0002347    time: 0.7673  last_time: 0.7977  data_time: 0.0167  last_data_time: 0.0160   lr: 0.01  max_mem: 8565M
[32m[06/24 17:10:28 d2.utils.events]: [0m eta: 3:47:54  iter: 199  total_loss: 2.13  loss_fcos_loc: 0.4229  loss_fcos_ctr: 0.6511  loss_fcos_vfcls: 0.8556  loss_prj: 0.1812  loss_pairwise: 0.003981  loss_mask: 0.001765  loss_mask_affinity: 0.0003189    time: 0.7670  last_time: 0.6970  data_time: 0.0178  last_data_time: 0.0159   lr: 0.01  max_mem: 8565M
[32m[06/24 17:10:43 d2.utils.events]: [0m eta: 3:47:46  iter: 219  total_loss: 2.181  loss_fcos_loc: 0.3891  loss_fcos_ctr: 0.6495  loss_fcos_vfcls: 0.9437  loss_prj: 0.1779  loss_pairwise: 0.004386  loss_mask: 0.001811  loss_mask_affinity: 0.0003399    time: 0.7680  last_time: 0.8526  data_time: 0.0156  last_data_time: 0.0201   lr: 0.01  max_mem: 9283M
[32m[06/24 17:10:59 d2.utils.events]: [0m eta: 3:47:23  iter: 239  total_loss: 2.147  loss_fcos_loc: 0.3951  loss_fcos_ctr: 0.6441  loss_fcos_vfcls: 0.9063  loss_prj: 0.1852  loss_pairwise: 0.004455  loss_mask: 0.001741  loss_mask_affinity: 0.0003344    time: 0.7671  last_time: 0.8055  data_time: 0.0156  last_data_time: 0.0129   lr: 0.01  max_mem: 9283M
[32m[06/24 17:11:15 d2.utils.events]: [0m eta: 3:47:15  iter: 259  total_loss: 2.11  loss_fcos_loc: 0.3946  loss_fcos_ctr: 0.6462  loss_fcos_vfcls: 0.8673  loss_prj: 0.183  loss_pairwise: 0.004468  loss_mask: 0.001904  loss_mask_affinity: 0.0003681    time: 0.7695  last_time: 0.8394  data_time: 0.0160  last_data_time: 0.0139   lr: 0.01  max_mem: 9283M
[32m[06/24 17:11:30 d2.utils.events]: [0m eta: 3:46:39  iter: 279  total_loss: 2.106  loss_fcos_loc: 0.3717  loss_fcos_ctr: 0.6363  loss_fcos_vfcls: 0.9251  loss_prj: 0.1581  loss_pairwise: 0.005279  loss_mask: 0.00195  loss_mask_affinity: 0.0003988    time: 0.7685  last_time: 0.7338  data_time: 0.0156  last_data_time: 0.0173   lr: 0.01  max_mem: 9283M
[32m[06/24 17:11:45 d2.utils.events]: [0m eta: 3:46:24  iter: 299  total_loss: 2.063  loss_fcos_loc: 0.3622  loss_fcos_ctr: 0.6448  loss_fcos_vfcls: 0.8846  loss_prj: 0.1559  loss_pairwise: 0.005104  loss_mask: 0.001905  loss_mask_affinity: 0.0004409    time: 0.7690  last_time: 0.9487  data_time: 0.0181  last_data_time: 0.0207   lr: 0.01  max_mem: 9283M
[32m[06/24 17:12:01 d2.utils.events]: [0m eta: 3:46:42  iter: 319  total_loss: 2.1  loss_fcos_loc: 0.3606  loss_fcos_ctr: 0.6378  loss_fcos_vfcls: 0.9433  loss_prj: 0.1564  loss_pairwise: 0.00529  loss_mask: 0.002143  loss_mask_affinity: 0.0004521    time: 0.7701  last_time: 0.7749  data_time: 0.0164  last_data_time: 0.0092   lr: 0.01  max_mem: 9283M
[32m[06/24 17:12:17 d2.utils.events]: [0m eta: 3:46:27  iter: 339  total_loss: 2.143  loss_fcos_loc: 0.3619  loss_fcos_ctr: 0.6501  loss_fcos_vfcls: 0.9748  loss_prj: 0.1551  loss_pairwise: 0.005611  loss_mask: 0.002309  loss_mask_affinity: 0.0004686    time: 0.7706  last_time: 0.7156  data_time: 0.0145  last_data_time: 0.0097   lr: 0.01  max_mem: 9283M
[32m[06/24 17:12:32 d2.utils.events]: [0m eta: 3:46:38  iter: 359  total_loss: 2.086  loss_fcos_loc: 0.3501  loss_fcos_ctr: 0.6451  loss_fcos_vfcls: 0.9352  loss_prj: 0.1586  loss_pairwise: 0.006395  loss_mask: 0.002224  loss_mask_affinity: 0.0005113    time: 0.7717  last_time: 0.7789  data_time: 0.0167  last_data_time: 0.0133   lr: 0.01  max_mem: 9283M
[32m[06/24 17:12:48 d2.utils.events]: [0m eta: 3:46:38  iter: 379  total_loss: 2.053  loss_fcos_loc: 0.3403  loss_fcos_ctr: 0.6364  loss_fcos_vfcls: 0.9225  loss_prj: 0.1465  loss_pairwise: 0.005902  loss_mask: 0.00223  loss_mask_affinity: 0.0005256    time: 0.7728  last_time: 0.7726  data_time: 0.0160  last_data_time: 0.0083   lr: 0.01  max_mem: 9283M
[32m[06/24 17:13:05 d2.utils.events]: [0m eta: 3:46:25  iter: 399  total_loss: 2.031  loss_fcos_loc: 0.3493  loss_fcos_ctr: 0.6366  loss_fcos_vfcls: 0.8699  loss_prj: 0.1433  loss_pairwise: 0.006029  loss_mask: 0.002419  loss_mask_affinity: 0.0005649    time: 0.7755  last_time: 0.8220  data_time: 0.0139  last_data_time: 0.0146   lr: 0.01  max_mem: 9283M
[32m[06/24 17:13:21 d2.utils.events]: [0m eta: 3:46:19  iter: 419  total_loss: 2.061  loss_fcos_loc: 0.344  loss_fcos_ctr: 0.6374  loss_fcos_vfcls: 0.8992  loss_prj: 0.1494  loss_pairwise: 0.006183  loss_mask: 0.002533  loss_mask_affinity: 0.000541    time: 0.7762  last_time: 0.7990  data_time: 0.0176  last_data_time: 0.0099   lr: 0.01  max_mem: 9283M
[32m[06/24 17:13:36 d2.utils.events]: [0m eta: 3:46:04  iter: 439  total_loss: 1.999  loss_fcos_loc: 0.3289  loss_fcos_ctr: 0.6347  loss_fcos_vfcls: 0.9023  loss_prj: 0.1359  loss_pairwise: 0.006435  loss_mask: 0.00246  loss_mask_affinity: 0.0005597    time: 0.7759  last_time: 0.8302  data_time: 0.0155  last_data_time: 0.0151   lr: 0.01  max_mem: 9283M
[32m[06/24 17:13:52 d2.utils.events]: [0m eta: 3:45:54  iter: 459  total_loss: 2.019  loss_fcos_loc: 0.3227  loss_fcos_ctr: 0.6346  loss_fcos_vfcls: 0.9047  loss_prj: 0.1361  loss_pairwise: 0.006171  loss_mask: 0.002594  loss_mask_affinity: 0.0005862    time: 0.7767  last_time: 0.8083  data_time: 0.0166  last_data_time: 0.0390   lr: 0.01  max_mem: 9283M
[32m[06/24 17:14:07 d2.utils.events]: [0m eta: 3:45:39  iter: 479  total_loss: 2.006  loss_fcos_loc: 0.3618  loss_fcos_ctr: 0.6372  loss_fcos_vfcls: 0.8667  loss_prj: 0.1501  loss_pairwise: 0.006701  loss_mask: 0.002851  loss_mask_affinity: 0.0006647    time: 0.7764  last_time: 0.6838  data_time: 0.0170  last_data_time: 0.0091   lr: 0.01  max_mem: 9283M
[32m[06/24 17:14:23 d2.utils.events]: [0m eta: 3:45:30  iter: 499  total_loss: 2.035  loss_fcos_loc: 0.3309  loss_fcos_ctr: 0.6388  loss_fcos_vfcls: 0.9222  loss_prj: 0.1388  loss_pairwise: 0.006587  loss_mask: 0.002779  loss_mask_affinity: 0.0006353    time: 0.7760  last_time: 0.7742  data_time: 0.0154  last_data_time: 0.0087   lr: 0.01  max_mem: 9283M
[32m[06/24 17:14:38 d2.utils.events]: [0m eta: 3:45:14  iter: 519  total_loss: 2.041  loss_fcos_loc: 0.3414  loss_fcos_ctr: 0.635  loss_fcos_vfcls: 0.9252  loss_prj: 0.1369  loss_pairwise: 0.007011  loss_mask: 0.002985  loss_mask_affinity: 0.0006441    time: 0.7764  last_time: 0.8312  data_time: 0.0187  last_data_time: 0.0232   lr: 0.01  max_mem: 9283M
[32m[06/24 17:14:54 d2.utils.events]: [0m eta: 3:45:05  iter: 539  total_loss: 2.016  loss_fcos_loc: 0.3281  loss_fcos_ctr: 0.6347  loss_fcos_vfcls: 0.9133  loss_prj: 0.1421  loss_pairwise: 0.007195  loss_mask: 0.003101  loss_mask_affinity: 0.0006892    time: 0.7768  last_time: 0.7488  data_time: 0.0149  last_data_time: 0.0165   lr: 0.01  max_mem: 9283M
[32m[06/24 17:15:10 d2.utils.events]: [0m eta: 3:45:00  iter: 559  total_loss: 1.985  loss_fcos_loc: 0.328  loss_fcos_ctr: 0.6343  loss_fcos_vfcls: 0.8398  loss_prj: 0.1492  loss_pairwise: 0.007501  loss_mask: 0.003199  loss_mask_affinity: 0.0007147    time: 0.7772  last_time: 0.7209  data_time: 0.0180  last_data_time: 0.0323   lr: 0.01  max_mem: 9283M
[32m[06/24 17:15:26 d2.utils.events]: [0m eta: 3:44:45  iter: 579  total_loss: 2.01  loss_fcos_loc: 0.318  loss_fcos_ctr: 0.6312  loss_fcos_vfcls: 0.9239  loss_prj: 0.1352  loss_pairwise: 0.007427  loss_mask: 0.003278  loss_mask_affinity: 0.000726    time: 0.7774  last_time: 0.7692  data_time: 0.0152  last_data_time: 0.0118   lr: 0.01  max_mem: 9283M
[32m[06/24 17:15:41 d2.utils.events]: [0m eta: 3:44:29  iter: 599  total_loss: 2.028  loss_fcos_loc: 0.3316  loss_fcos_ctr: 0.6332  loss_fcos_vfcls: 0.9135  loss_prj: 0.1414  loss_pairwise: 0.007541  loss_mask: 0.003466  loss_mask_affinity: 0.0007785    time: 0.7777  last_time: 0.8373  data_time: 0.0182  last_data_time: 0.0128   lr: 0.01  max_mem: 9283M
[32m[06/24 17:15:57 d2.utils.events]: [0m eta: 3:44:21  iter: 619  total_loss: 1.988  loss_fcos_loc: 0.319  loss_fcos_ctr: 0.6301  loss_fcos_vfcls: 0.8698  loss_prj: 0.1312  loss_pairwise: 0.007523  loss_mask: 0.003267  loss_mask_affinity: 0.0007533    time: 0.7783  last_time: 0.7543  data_time: 0.0157  last_data_time: 0.0126   lr: 0.01  max_mem: 9788M
[32m[06/24 17:16:14 d2.utils.events]: [0m eta: 3:44:12  iter: 639  total_loss: 1.982  loss_fcos_loc: 0.3248  loss_fcos_ctr: 0.6299  loss_fcos_vfcls: 0.8814  loss_prj: 0.1415  loss_pairwise: 0.008107  loss_mask: 0.003677  loss_mask_affinity: 0.0007857    time: 0.7790  last_time: 0.8589  data_time: 0.0175  last_data_time: 0.0153   lr: 0.01  max_mem: 9788M
[32m[06/24 17:16:29 d2.utils.events]: [0m eta: 3:43:56  iter: 659  total_loss: 2  loss_fcos_loc: 0.2992  loss_fcos_ctr: 0.6239  loss_fcos_vfcls: 0.9183  loss_prj: 0.1312  loss_pairwise: 0.008345  loss_mask: 0.003636  loss_mask_affinity: 0.0007668    time: 0.7789  last_time: 0.7401  data_time: 0.0179  last_data_time: 0.0218   lr: 0.01  max_mem: 9788M
[32m[06/24 17:16:45 d2.utils.events]: [0m eta: 3:43:50  iter: 679  total_loss: 1.969  loss_fcos_loc: 0.316  loss_fcos_ctr: 0.6298  loss_fcos_vfcls: 0.864  loss_prj: 0.1384  loss_pairwise: 0.008113  loss_mask: 0.003802  loss_mask_affinity: 0.0008482    time: 0.7793  last_time: 0.7799  data_time: 0.0146  last_data_time: 0.0131   lr: 0.01  max_mem: 9788M
[32m[06/24 17:17:01 d2.utils.events]: [0m eta: 3:43:35  iter: 699  total_loss: 1.951  loss_fcos_loc: 0.3047  loss_fcos_ctr: 0.63  loss_fcos_vfcls: 0.8756  loss_prj: 0.1328  loss_pairwise: 0.008222  loss_mask: 0.003705  loss_mask_affinity: 0.0008157    time: 0.7792  last_time: 0.8331  data_time: 0.0167  last_data_time: 0.0160   lr: 0.01  max_mem: 9788M
[32m[06/24 17:17:16 d2.utils.events]: [0m eta: 3:43:21  iter: 719  total_loss: 1.985  loss_fcos_loc: 0.3095  loss_fcos_ctr: 0.6275  loss_fcos_vfcls: 0.914  loss_prj: 0.1345  loss_pairwise: 0.008236  loss_mask: 0.003861  loss_mask_affinity: 0.0008741    time: 0.7794  last_time: 0.7052  data_time: 0.0156  last_data_time: 0.0104   lr: 0.01  max_mem: 9788M
[32m[06/24 17:17:32 d2.utils.events]: [0m eta: 3:43:06  iter: 739  total_loss: 1.994  loss_fcos_loc: 0.3063  loss_fcos_ctr: 0.6329  loss_fcos_vfcls: 0.8993  loss_prj: 0.1323  loss_pairwise: 0.008868  loss_mask: 0.004421  loss_mask_affinity: 0.0009085    time: 0.7793  last_time: 0.8860  data_time: 0.0219  last_data_time: 0.0122   lr: 0.01  max_mem: 9788M
[32m[06/24 17:17:47 d2.utils.events]: [0m eta: 3:42:50  iter: 759  total_loss: 1.935  loss_fcos_loc: 0.3  loss_fcos_ctr: 0.6269  loss_fcos_vfcls: 0.8651  loss_prj: 0.1253  loss_pairwise: 0.008795  loss_mask: 0.003958  loss_mask_affinity: 0.0009019    time: 0.7792  last_time: 0.7165  data_time: 0.0177  last_data_time: 0.0169   lr: 0.01  max_mem: 9788M
[32m[06/24 17:18:04 d2.utils.events]: [0m eta: 3:42:39  iter: 779  total_loss: 1.95  loss_fcos_loc: 0.2996  loss_fcos_ctr: 0.6315  loss_fcos_vfcls: 0.9076  loss_prj: 0.1262  loss_pairwise: 0.008764  loss_mask: 0.004476  loss_mask_affinity: 0.0008607    time: 0.7800  last_time: 0.7110  data_time: 0.0169  last_data_time: 0.0251   lr: 0.01  max_mem: 9788M
[32m[06/24 17:18:19 d2.utils.events]: [0m eta: 3:42:30  iter: 799  total_loss: 1.958  loss_fcos_loc: 0.3088  loss_fcos_ctr: 0.629  loss_fcos_vfcls: 0.8859  loss_prj: 0.1255  loss_pairwise: 0.008872  loss_mask: 0.004493  loss_mask_affinity: 0.0009162    time: 0.7800  last_time: 0.7869  data_time: 0.0173  last_data_time: 0.0161   lr: 0.01  max_mem: 9788M
[32m[06/24 17:18:35 d2.utils.events]: [0m eta: 3:42:18  iter: 819  total_loss: 1.975  loss_fcos_loc: 0.3083  loss_fcos_ctr: 0.6322  loss_fcos_vfcls: 0.8803  loss_prj: 0.1321  loss_pairwise: 0.008868  loss_mask: 0.004587  loss_mask_affinity: 0.0009545    time: 0.7803  last_time: 0.7512  data_time: 0.0174  last_data_time: 0.0137   lr: 0.01  max_mem: 9788M
[32m[06/24 17:18:51 d2.utils.events]: [0m eta: 3:42:03  iter: 839  total_loss: 1.995  loss_fcos_loc: 0.3037  loss_fcos_ctr: 0.6274  loss_fcos_vfcls: 0.9241  loss_prj: 0.1294  loss_pairwise: 0.009433  loss_mask: 0.005142  loss_mask_affinity: 0.0009454    time: 0.7806  last_time: 0.8653  data_time: 0.0165  last_data_time: 0.0155   lr: 0.01  max_mem: 9788M
[32m[06/24 17:19:07 d2.utils.events]: [0m eta: 3:42:02  iter: 859  total_loss: 1.99  loss_fcos_loc: 0.3074  loss_fcos_ctr: 0.6342  loss_fcos_vfcls: 0.8994  loss_prj: 0.133  loss_pairwise: 0.008558  loss_mask: 0.00457  loss_mask_affinity: 0.0009706    time: 0.7809  last_time: 0.8569  data_time: 0.0171  last_data_time: 0.0355   lr: 0.01  max_mem: 9788M
[32m[06/24 17:19:23 d2.utils.events]: [0m eta: 3:41:46  iter: 879  total_loss: 1.954  loss_fcos_loc: 0.2945  loss_fcos_ctr: 0.6287  loss_fcos_vfcls: 0.8791  loss_prj: 0.124  loss_pairwise: 0.009273  loss_mask: 0.00481  loss_mask_affinity: 0.0009958    time: 0.7809  last_time: 0.8427  data_time: 0.0163  last_data_time: 0.0083   lr: 0.01  max_mem: 9788M
[32m[06/24 17:19:38 d2.utils.events]: [0m eta: 3:41:33  iter: 899  total_loss: 1.949  loss_fcos_loc: 0.3035  loss_fcos_ctr: 0.6314  loss_fcos_vfcls: 0.8611  loss_prj: 0.1312  loss_pairwise: 0.009607  loss_mask: 0.004945  loss_mask_affinity: 0.001063    time: 0.7811  last_time: 0.7626  data_time: 0.0177  last_data_time: 0.0246   lr: 0.01  max_mem: 9788M
[32m[06/24 17:19:54 d2.utils.events]: [0m eta: 3:41:13  iter: 919  total_loss: 1.903  loss_fcos_loc: 0.286  loss_fcos_ctr: 0.6289  loss_fcos_vfcls: 0.8482  loss_prj: 0.12  loss_pairwise: 0.0096  loss_mask: 0.004956  loss_mask_affinity: 0.0009803    time: 0.7809  last_time: 0.9367  data_time: 0.0178  last_data_time: 0.0146   lr: 0.01  max_mem: 9788M
[32m[06/24 17:20:10 d2.utils.events]: [0m eta: 3:41:14  iter: 939  total_loss: 1.915  loss_fcos_loc: 0.2983  loss_fcos_ctr: 0.6287  loss_fcos_vfcls: 0.8589  loss_prj: 0.1199  loss_pairwise: 0.009287  loss_mask: 0.005066  loss_mask_affinity: 0.001037    time: 0.7816  last_time: 0.7390  data_time: 0.0162  last_data_time: 0.0160   lr: 0.01  max_mem: 9788M
[32m[06/24 17:20:27 d2.utils.events]: [0m eta: 3:41:08  iter: 959  total_loss: 1.911  loss_fcos_loc: 0.3052  loss_fcos_ctr: 0.6332  loss_fcos_vfcls: 0.8266  loss_prj: 0.1348  loss_pairwise: 0.009911  loss_mask: 0.005319  loss_mask_affinity: 0.001078    time: 0.7824  last_time: 0.7137  data_time: 0.0165  last_data_time: 0.0150   lr: 0.01  max_mem: 9788M
[32m[06/24 17:20:42 d2.utils.events]: [0m eta: 3:40:52  iter: 979  total_loss: 1.95  loss_fcos_loc: 0.2888  loss_fcos_ctr: 0.6254  loss_fcos_vfcls: 0.8783  loss_prj: 0.1241  loss_pairwise: 0.01016  loss_mask: 0.005714  loss_mask_affinity: 0.001069    time: 0.7824  last_time: 0.8838  data_time: 0.0161  last_data_time: 0.0251   lr: 0.01  max_mem: 9788M
[32m[06/24 17:20:58 d2.utils.events]: [0m eta: 3:40:37  iter: 999  total_loss: 1.918  loss_fcos_loc: 0.2898  loss_fcos_ctr: 0.628  loss_fcos_vfcls: 0.8614  loss_prj: 0.1164  loss_pairwise: 0.01016  loss_mask: 0.005691  loss_mask_affinity: 0.001124    time: 0.7823  last_time: 0.7022  data_time: 0.0153  last_data_time: 0.0171   lr: 0.01  max_mem: 9788M
[32m[06/24 17:21:14 d2.utils.events]: [0m eta: 3:40:26  iter: 1019  total_loss: 1.948  loss_fcos_loc: 0.2952  loss_fcos_ctr: 0.6312  loss_fcos_vfcls: 0.8517  loss_prj: 0.1382  loss_pairwise: 0.008929  loss_mask: 0.005894  loss_mask_affinity: 0.001091    time: 0.7826  last_time: 0.8352  data_time: 0.0160  last_data_time: 0.0155   lr: 0.01  max_mem: 9788M
[32m[06/24 17:21:30 d2.utils.events]: [0m eta: 3:40:33  iter: 1039  total_loss: 1.923  loss_fcos_loc: 0.2911  loss_fcos_ctr: 0.6286  loss_fcos_vfcls: 0.8565  loss_prj: 0.1256  loss_pairwise: 0.01045  loss_mask: 0.005953  loss_mask_affinity: 0.001147    time: 0.7827  last_time: 0.8309  data_time: 0.0161  last_data_time: 0.0194   lr: 0.01  max_mem: 9788M
[32m[06/24 17:21:45 d2.utils.events]: [0m eta: 3:40:20  iter: 1059  total_loss: 1.887  loss_fcos_loc: 0.2807  loss_fcos_ctr: 0.6258  loss_fcos_vfcls: 0.8461  loss_prj: 0.1235  loss_pairwise: 0.01007  loss_mask: 0.005723  loss_mask_affinity: 0.001192    time: 0.7823  last_time: 0.7078  data_time: 0.0142  last_data_time: 0.0262   lr: 0.01  max_mem: 9788M
[32m[06/24 17:22:01 d2.utils.events]: [0m eta: 3:40:12  iter: 1079  total_loss: 1.911  loss_fcos_loc: 0.2877  loss_fcos_ctr: 0.6271  loss_fcos_vfcls: 0.8224  loss_prj: 0.1254  loss_pairwise: 0.0107  loss_mask: 0.006268  loss_mask_affinity: 0.0012    time: 0.7824  last_time: 0.7954  data_time: 0.0157  last_data_time: 0.0133   lr: 0.01  max_mem: 9788M
[32m[06/24 17:22:16 d2.utils.events]: [0m eta: 3:40:08  iter: 1099  total_loss: 1.9  loss_fcos_loc: 0.2945  loss_fcos_ctr: 0.6292  loss_fcos_vfcls: 0.8256  loss_prj: 0.1252  loss_pairwise: 0.01077  loss_mask: 0.006119  loss_mask_affinity: 0.001215    time: 0.7825  last_time: 0.7970  data_time: 0.0156  last_data_time: 0.0130   lr: 0.01  max_mem: 9788M
[32m[06/24 17:22:32 d2.utils.events]: [0m eta: 3:39:52  iter: 1119  total_loss: 1.863  loss_fcos_loc: 0.2976  loss_fcos_ctr: 0.6282  loss_fcos_vfcls: 0.8042  loss_prj: 0.119  loss_pairwise: 0.01004  loss_mask: 0.006294  loss_mask_affinity: 0.001218    time: 0.7822  last_time: 0.7197  data_time: 0.0164  last_data_time: 0.0290   lr: 0.01  max_mem: 9788M
[32m[06/24 17:22:48 d2.utils.events]: [0m eta: 3:39:41  iter: 1139  total_loss: 1.883  loss_fcos_loc: 0.2992  loss_fcos_ctr: 0.6268  loss_fcos_vfcls: 0.8435  loss_prj: 0.1181  loss_pairwise: 0.01139  loss_mask: 0.006434  loss_mask_affinity: 0.001251    time: 0.7826  last_time: 0.7999  data_time: 0.0157  last_data_time: 0.0096   lr: 0.01  max_mem: 9788M
[32m[06/24 17:23:04 d2.utils.events]: [0m eta: 3:39:35  iter: 1159  total_loss: 1.894  loss_fcos_loc: 0.2902  loss_fcos_ctr: 0.6264  loss_fcos_vfcls: 0.839  loss_prj: 0.116  loss_pairwise: 0.01049  loss_mask: 0.005959  loss_mask_affinity: 0.001216    time: 0.7829  last_time: 0.7976  data_time: 0.0159  last_data_time: 0.0127   lr: 0.01  max_mem: 9788M
[32m[06/24 17:23:20 d2.utils.events]: [0m eta: 3:39:24  iter: 1179  total_loss: 1.862  loss_fcos_loc: 0.2802  loss_fcos_ctr: 0.6289  loss_fcos_vfcls: 0.8218  loss_prj: 0.1186  loss_pairwise: 0.01085  loss_mask: 0.006321  loss_mask_affinity: 0.00126    time: 0.7830  last_time: 0.7503  data_time: 0.0166  last_data_time: 0.0233   lr: 0.01  max_mem: 9788M
[32m[06/24 17:23:36 d2.utils.events]: [0m eta: 3:39:14  iter: 1199  total_loss: 1.899  loss_fcos_loc: 0.2848  loss_fcos_ctr: 0.6275  loss_fcos_vfcls: 0.8578  loss_prj: 0.1185  loss_pairwise: 0.01074  loss_mask: 0.006564  loss_mask_affinity: 0.001246    time: 0.7833  last_time: 0.7331  data_time: 0.0175  last_data_time: 0.0135   lr: 0.01  max_mem: 9788M
[32m[06/24 17:23:52 d2.utils.events]: [0m eta: 3:39:13  iter: 1219  total_loss: 1.881  loss_fcos_loc: 0.2842  loss_fcos_ctr: 0.6257  loss_fcos_vfcls: 0.8358  loss_prj: 0.1177  loss_pairwise: 0.01087  loss_mask: 0.006241  loss_mask_affinity: 0.001303    time: 0.7835  last_time: 0.8071  data_time: 0.0164  last_data_time: 0.0161   lr: 0.01  max_mem: 9788M
[32m[06/24 17:24:08 d2.utils.events]: [0m eta: 3:39:05  iter: 1239  total_loss: 1.877  loss_fcos_loc: 0.2816  loss_fcos_ctr: 0.624  loss_fcos_vfcls: 0.8277  loss_prj: 0.1181  loss_pairwise: 0.01095  loss_mask: 0.006479  loss_mask_affinity: 0.001387    time: 0.7834  last_time: 0.8060  data_time: 0.0169  last_data_time: 0.0268   lr: 0.01  max_mem: 9788M
[32m[06/24 17:24:24 d2.utils.events]: [0m eta: 3:38:56  iter: 1259  total_loss: 1.865  loss_fcos_loc: 0.2697  loss_fcos_ctr: 0.6215  loss_fcos_vfcls: 0.8563  loss_prj: 0.1113  loss_pairwise: 0.0107  loss_mask: 0.006801  loss_mask_affinity: 0.001374    time: 0.7836  last_time: 0.8447  data_time: 0.0165  last_data_time: 0.0114   lr: 0.01  max_mem: 9788M
[32m[06/24 17:24:39 d2.utils.events]: [0m eta: 3:38:50  iter: 1279  total_loss: 1.872  loss_fcos_loc: 0.2673  loss_fcos_ctr: 0.6213  loss_fcos_vfcls: 0.8563  loss_prj: 0.109  loss_pairwise: 0.0119  loss_mask: 0.006738  loss_mask_affinity: 0.001367    time: 0.7837  last_time: 0.8358  data_time: 0.0140  last_data_time: 0.0138   lr: 0.01  max_mem: 9788M
[32m[06/24 17:24:55 d2.utils.events]: [0m eta: 3:38:45  iter: 1299  total_loss: 1.926  loss_fcos_loc: 0.2818  loss_fcos_ctr: 0.6261  loss_fcos_vfcls: 0.8603  loss_prj: 0.1196  loss_pairwise: 0.01213  loss_mask: 0.007568  loss_mask_affinity: 0.001417    time: 0.7838  last_time: 0.7723  data_time: 0.0144  last_data_time: 0.0137   lr: 0.01  max_mem: 9788M
[32m[06/24 17:25:11 d2.utils.events]: [0m eta: 3:38:34  iter: 1319  total_loss: 1.862  loss_fcos_loc: 0.2784  loss_fcos_ctr: 0.6267  loss_fcos_vfcls: 0.806  loss_prj: 0.1113  loss_pairwise: 0.01172  loss_mask: 0.00751  loss_mask_affinity: 0.001434    time: 0.7839  last_time: 0.7373  data_time: 0.0182  last_data_time: 0.0128   lr: 0.01  max_mem: 9788M
[32m[06/24 17:25:27 d2.utils.events]: [0m eta: 3:38:27  iter: 1339  total_loss: 1.864  loss_fcos_loc: 0.289  loss_fcos_ctr: 0.6272  loss_fcos_vfcls: 0.7988  loss_prj: 0.1282  loss_pairwise: 0.01152  loss_mask: 0.007411  loss_mask_affinity: 0.001465    time: 0.7840  last_time: 0.8041  data_time: 0.0158  last_data_time: 0.0237   lr: 0.01  max_mem: 9788M
[32m[06/24 17:25:43 d2.utils.events]: [0m eta: 3:38:22  iter: 1359  total_loss: 1.874  loss_fcos_loc: 0.2736  loss_fcos_ctr: 0.6252  loss_fcos_vfcls: 0.825  loss_prj: 0.1165  loss_pairwise: 0.01176  loss_mask: 0.007526  loss_mask_affinity: 0.00132    time: 0.7842  last_time: 0.9024  data_time: 0.0164  last_data_time: 0.0169   lr: 0.01  max_mem: 9788M
[32m[06/24 17:25:59 d2.utils.events]: [0m eta: 3:37:56  iter: 1379  total_loss: 1.909  loss_fcos_loc: 0.2859  loss_fcos_ctr: 0.6274  loss_fcos_vfcls: 0.8397  loss_prj: 0.1209  loss_pairwise: 0.01215  loss_mask: 0.008342  loss_mask_affinity: 0.001472    time: 0.7842  last_time: 0.7797  data_time: 0.0178  last_data_time: 0.0166   lr: 0.01  max_mem: 9788M
[32m[06/24 17:26:14 d2.utils.events]: [0m eta: 3:37:34  iter: 1399  total_loss: 1.858  loss_fcos_loc: 0.2634  loss_fcos_ctr: 0.6226  loss_fcos_vfcls: 0.8441  loss_prj: 0.116  loss_pairwise: 0.01173  loss_mask: 0.007563  loss_mask_affinity: 0.001447    time: 0.7840  last_time: 0.7561  data_time: 0.0152  last_data_time: 0.0111   lr: 0.01  max_mem: 9788M
[32m[06/24 17:26:30 d2.utils.events]: [0m eta: 3:37:18  iter: 1419  total_loss: 1.894  loss_fcos_loc: 0.2742  loss_fcos_ctr: 0.6258  loss_fcos_vfcls: 0.8629  loss_prj: 0.1131  loss_pairwise: 0.01216  loss_mask: 0.008043  loss_mask_affinity: 0.001536    time: 0.7840  last_time: 0.7874  data_time: 0.0158  last_data_time: 0.0162   lr: 0.01  max_mem: 9788M
[32m[06/24 17:26:46 d2.utils.events]: [0m eta: 3:36:51  iter: 1439  total_loss: 1.913  loss_fcos_loc: 0.2698  loss_fcos_ctr: 0.6246  loss_fcos_vfcls: 0.8789  loss_prj: 0.1212  loss_pairwise: 0.0122  loss_mask: 0.008156  loss_mask_affinity: 0.001426    time: 0.7840  last_time: 0.7857  data_time: 0.0150  last_data_time: 0.0192   lr: 0.01  max_mem: 9788M
[32m[06/24 17:27:02 d2.utils.events]: [0m eta: 3:36:49  iter: 1459  total_loss: 1.871  loss_fcos_loc: 0.2819  loss_fcos_ctr: 0.6272  loss_fcos_vfcls: 0.8218  loss_prj: 0.1213  loss_pairwise: 0.01309  loss_mask: 0.008791  loss_mask_affinity: 0.001625    time: 0.7843  last_time: 0.8133  data_time: 0.0180  last_data_time: 0.0157   lr: 0.01  max_mem: 9788M
[32m[06/24 17:27:18 d2.utils.events]: [0m eta: 3:36:34  iter: 1479  total_loss: 1.886  loss_fcos_loc: 0.2816  loss_fcos_ctr: 0.6257  loss_fcos_vfcls: 0.835  loss_prj: 0.1277  loss_pairwise: 0.01219  loss_mask: 0.008289  loss_mask_affinity: 0.001553    time: 0.7843  last_time: 0.8414  data_time: 0.0184  last_data_time: 0.0131   lr: 0.01  max_mem: 9788M
[32m[06/24 17:27:34 d2.utils.events]: [0m eta: 3:36:33  iter: 1499  total_loss: 1.868  loss_fcos_loc: 0.2817  loss_fcos_ctr: 0.6275  loss_fcos_vfcls: 0.7906  loss_prj: 0.1199  loss_pairwise: 0.01232  loss_mask: 0.00845  loss_mask_affinity: 0.001629    time: 0.7846  last_time: 0.7576  data_time: 0.0183  last_data_time: 0.0076   lr: 0.01  max_mem: 9915M
[32m[06/24 17:27:50 d2.utils.events]: [0m eta: 3:36:33  iter: 1519  total_loss: 1.867  loss_fcos_loc: 0.2834  loss_fcos_ctr: 0.6237  loss_fcos_vfcls: 0.8257  loss_prj: 0.1177  loss_pairwise: 0.01247  loss_mask: 0.008783  loss_mask_affinity: 0.001594    time: 0.7850  last_time: 0.7611  data_time: 0.0166  last_data_time: 0.0152   lr: 0.01  max_mem: 9915M
[32m[06/24 17:28:06 d2.utils.events]: [0m eta: 3:36:15  iter: 1539  total_loss: 1.853  loss_fcos_loc: 0.2682  loss_fcos_ctr: 0.6266  loss_fcos_vfcls: 0.8235  loss_prj: 0.1126  loss_pairwise: 0.01262  loss_mask: 0.008815  loss_mask_affinity: 0.001626    time: 0.7851  last_time: 0.7848  data_time: 0.0160  last_data_time: 0.0132   lr: 0.01  max_mem: 9915M
[32m[06/24 17:28:22 d2.utils.events]: [0m eta: 3:35:59  iter: 1559  total_loss: 1.861  loss_fcos_loc: 0.2776  loss_fcos_ctr: 0.6245  loss_fcos_vfcls: 0.8238  loss_prj: 0.1196  loss_pairwise: 0.01194  loss_mask: 0.009071  loss_mask_affinity: 0.001494    time: 0.7852  last_time: 0.7773  data_time: 0.0168  last_data_time: 0.0094   lr: 0.01  max_mem: 9915M
[32m[06/24 17:28:38 d2.utils.events]: [0m eta: 3:35:53  iter: 1579  total_loss: 1.866  loss_fcos_loc: 0.2719  loss_fcos_ctr: 0.6222  loss_fcos_vfcls: 0.8307  loss_prj: 0.1108  loss_pairwise: 0.01226  loss_mask: 0.009637  loss_mask_affinity: 0.001636    time: 0.7856  last_time: 0.8521  data_time: 0.0166  last_data_time: 0.0088   lr: 0.01  max_mem: 9915M
[32m[06/24 17:28:54 d2.utils.events]: [0m eta: 3:35:46  iter: 1599  total_loss: 1.853  loss_fcos_loc: 0.2684  loss_fcos_ctr: 0.6199  loss_fcos_vfcls: 0.834  loss_prj: 0.115  loss_pairwise: 0.01284  loss_mask: 0.009679  loss_mask_affinity: 0.001641    time: 0.7859  last_time: 0.8010  data_time: 0.0186  last_data_time: 0.0125   lr: 0.01  max_mem: 9915M
[32m[06/24 17:29:10 d2.utils.events]: [0m eta: 3:35:27  iter: 1619  total_loss: 1.876  loss_fcos_loc: 0.2724  loss_fcos_ctr: 0.6216  loss_fcos_vfcls: 0.8317  loss_prj: 0.1203  loss_pairwise: 0.01275  loss_mask: 0.009887  loss_mask_affinity: 0.001638    time: 0.7860  last_time: 0.7294  data_time: 0.0159  last_data_time: 0.0096   lr: 0.01  max_mem: 9915M
[32m[06/24 17:29:26 d2.utils.events]: [0m eta: 3:35:08  iter: 1639  total_loss: 1.884  loss_fcos_loc: 0.2744  loss_fcos_ctr: 0.6222  loss_fcos_vfcls: 0.8341  loss_prj: 0.1242  loss_pairwise: 0.0132  loss_mask: 0.009267  loss_mask_affinity: 0.001751    time: 0.7861  last_time: 0.7740  data_time: 0.0159  last_data_time: 0.0080   lr: 0.01  max_mem: 9915M
[32m[06/24 17:29:42 d2.utils.events]: [0m eta: 3:34:59  iter: 1659  total_loss: 1.884  loss_fcos_loc: 0.2706  loss_fcos_ctr: 0.6242  loss_fcos_vfcls: 0.8494  loss_prj: 0.1106  loss_pairwise: 0.01322  loss_mask: 0.009066  loss_mask_affinity: 0.001773    time: 0.7864  last_time: 0.7030  data_time: 0.0166  last_data_time: 0.0134   lr: 0.01  max_mem: 9915M
[32m[06/24 17:29:58 d2.utils.events]: [0m eta: 3:34:36  iter: 1679  total_loss: 1.821  loss_fcos_loc: 0.2725  loss_fcos_ctr: 0.6211  loss_fcos_vfcls: 0.7744  loss_prj: 0.1131  loss_pairwise: 0.01358  loss_mask: 0.01  loss_mask_affinity: 0.001659    time: 0.7863  last_time: 0.7842  data_time: 0.0174  last_data_time: 0.0294   lr: 0.01  max_mem: 9915M
[32m[06/24 17:30:14 d2.utils.events]: [0m eta: 3:34:24  iter: 1699  total_loss: 1.854  loss_fcos_loc: 0.2696  loss_fcos_ctr: 0.624  loss_fcos_vfcls: 0.8152  loss_prj: 0.1159  loss_pairwise: 0.01258  loss_mask: 0.009844  loss_mask_affinity: 0.001719    time: 0.7864  last_time: 0.9148  data_time: 0.0151  last_data_time: 0.0157   lr: 0.01  max_mem: 9915M
[32m[06/24 17:30:30 d2.utils.events]: [0m eta: 3:34:30  iter: 1719  total_loss: 1.847  loss_fcos_loc: 0.261  loss_fcos_ctr: 0.6213  loss_fcos_vfcls: 0.8216  loss_prj: 0.1119  loss_pairwise: 0.01311  loss_mask: 0.00967  loss_mask_affinity: 0.001729    time: 0.7869  last_time: 0.8828  data_time: 0.0168  last_data_time: 0.0115   lr: 0.01  max_mem: 9915M
[32m[06/24 17:30:47 d2.utils.events]: [0m eta: 3:34:27  iter: 1739  total_loss: 1.895  loss_fcos_loc: 0.2772  loss_fcos_ctr: 0.6228  loss_fcos_vfcls: 0.8464  loss_prj: 0.1181  loss_pairwise: 0.0128  loss_mask: 0.01037  loss_mask_affinity: 0.001685    time: 0.7874  last_time: 0.7385  data_time: 0.0155  last_data_time: 0.0122   lr: 0.01  max_mem: 9915M
[32m[06/24 17:31:03 d2.utils.events]: [0m eta: 3:34:13  iter: 1759  total_loss: 1.853  loss_fcos_loc: 0.2659  loss_fcos_ctr: 0.6229  loss_fcos_vfcls: 0.8185  loss_prj: 0.1106  loss_pairwise: 0.01333  loss_mask: 0.01045  loss_mask_affinity: 0.00179    time: 0.7875  last_time: 0.7595  data_time: 0.0177  last_data_time: 0.0185   lr: 0.01  max_mem: 9915M
[32m[06/24 17:31:19 d2.utils.events]: [0m eta: 3:33:54  iter: 1779  total_loss: 1.84  loss_fcos_loc: 0.2657  loss_fcos_ctr: 0.6243  loss_fcos_vfcls: 0.7796  loss_prj: 0.1122  loss_pairwise: 0.01375  loss_mask: 0.009478  loss_mask_affinity: 0.001755    time: 0.7875  last_time: 0.7545  data_time: 0.0143  last_data_time: 0.0104   lr: 0.01  max_mem: 9915M
[32m[06/24 17:31:35 d2.utils.events]: [0m eta: 3:33:44  iter: 1799  total_loss: 1.85  loss_fcos_loc: 0.2649  loss_fcos_ctr: 0.6198  loss_fcos_vfcls: 0.8248  loss_prj: 0.1152  loss_pairwise: 0.01364  loss_mask: 0.01035  loss_mask_affinity: 0.001703    time: 0.7876  last_time: 0.8017  data_time: 0.0161  last_data_time: 0.0113   lr: 0.01  max_mem: 9915M
[32m[06/24 17:31:51 d2.utils.events]: [0m eta: 3:33:37  iter: 1819  total_loss: 1.85  loss_fcos_loc: 0.2797  loss_fcos_ctr: 0.6261  loss_fcos_vfcls: 0.8009  loss_prj: 0.1196  loss_pairwise: 0.01393  loss_mask: 0.0107  loss_mask_affinity: 0.001846    time: 0.7877  last_time: 0.8148  data_time: 0.0166  last_data_time: 0.0231   lr: 0.01  max_mem: 9915M
[32m[06/24 17:32:08 d2.utils.events]: [0m eta: 3:33:32  iter: 1839  total_loss: 1.849  loss_fcos_loc: 0.2679  loss_fcos_ctr: 0.6244  loss_fcos_vfcls: 0.8146  loss_prj: 0.1145  loss_pairwise: 0.01361  loss_mask: 0.01065  loss_mask_affinity: 0.001908    time: 0.7880  last_time: 0.8268  data_time: 0.0157  last_data_time: 0.0163   lr: 0.01  max_mem: 9915M
[32m[06/24 17:32:24 d2.utils.events]: [0m eta: 3:33:18  iter: 1859  total_loss: 1.836  loss_fcos_loc: 0.276  loss_fcos_ctr: 0.6282  loss_fcos_vfcls: 0.8135  loss_prj: 0.1246  loss_pairwise: 0.01433  loss_mask: 0.01088  loss_mask_affinity: 0.002016    time: 0.7882  last_time: 0.7728  data_time: 0.0194  last_data_time: 0.0372   lr: 0.01  max_mem: 9915M
[32m[06/24 17:32:40 d2.utils.events]: [0m eta: 3:33:12  iter: 1879  total_loss: 1.851  loss_fcos_loc: 0.268  loss_fcos_ctr: 0.6245  loss_fcos_vfcls: 0.8239  loss_prj: 0.1199  loss_pairwise: 0.01283  loss_mask: 0.01108  loss_mask_affinity: 0.001763    time: 0.7885  last_time: 0.8144  data_time: 0.0154  last_data_time: 0.0145   lr: 0.01  max_mem: 9915M
[32m[06/24 17:32:56 d2.utils.events]: [0m eta: 3:33:01  iter: 1899  total_loss: 1.863  loss_fcos_loc: 0.2645  loss_fcos_ctr: 0.6227  loss_fcos_vfcls: 0.85  loss_prj: 0.1082  loss_pairwise: 0.01356  loss_mask: 0.01075  loss_mask_affinity: 0.001821    time: 0.7887  last_time: 0.8512  data_time: 0.0208  last_data_time: 0.0252   lr: 0.01  max_mem: 9915M
[32m[06/24 17:33:13 d2.utils.events]: [0m eta: 3:33:07  iter: 1919  total_loss: 1.826  loss_fcos_loc: 0.2702  loss_fcos_ctr: 0.624  loss_fcos_vfcls: 0.8103  loss_prj: 0.1169  loss_pairwise: 0.01467  loss_mask: 0.01091  loss_mask_affinity: 0.001951    time: 0.7890  last_time: 0.7653  data_time: 0.0173  last_data_time: 0.0154   lr: 0.01  max_mem: 9915M
[32m[06/24 17:33:28 d2.utils.events]: [0m eta: 3:32:32  iter: 1939  total_loss: 1.869  loss_fcos_loc: 0.2579  loss_fcos_ctr: 0.6272  loss_fcos_vfcls: 0.8259  loss_prj: 0.1135  loss_pairwise: 0.01374  loss_mask: 0.0114  loss_mask_affinity: 0.001858    time: 0.7889  last_time: 0.7624  data_time: 0.0155  last_data_time: 0.0128   lr: 0.01  max_mem: 9915M
[32m[06/24 17:33:45 d2.utils.events]: [0m eta: 3:32:16  iter: 1959  total_loss: 1.846  loss_fcos_loc: 0.2665  loss_fcos_ctr: 0.6236  loss_fcos_vfcls: 0.8051  loss_prj: 0.1099  loss_pairwise: 0.0144  loss_mask: 0.01071  loss_mask_affinity: 0.002022    time: 0.7891  last_time: 0.8191  data_time: 0.0158  last_data_time: 0.0150   lr: 0.01  max_mem: 9915M
[32m[06/24 17:34:00 d2.utils.events]: [0m eta: 3:32:00  iter: 1979  total_loss: 1.836  loss_fcos_loc: 0.2619  loss_fcos_ctr: 0.6261  loss_fcos_vfcls: 0.8217  loss_prj: 0.1115  loss_pairwise: 0.01422  loss_mask: 0.01154  loss_mask_affinity: 0.001993    time: 0.7891  last_time: 0.7517  data_time: 0.0167  last_data_time: 0.0102   lr: 0.01  max_mem: 9915M
[32m[06/24 17:34:17 d2.utils.events]: [0m eta: 3:32:06  iter: 1999  total_loss: 1.849  loss_fcos_loc: 0.2728  loss_fcos_ctr: 0.6246  loss_fcos_vfcls: 0.7946  loss_prj: 0.1164  loss_pairwise: 0.01431  loss_mask: 0.01181  loss_mask_affinity: 0.001961    time: 0.7897  last_time: 0.7839  data_time: 0.0151  last_data_time: 0.0164   lr: 0.01  max_mem: 9915M
[32m[06/24 17:34:34 d2.utils.events]: [0m eta: 3:31:49  iter: 2019  total_loss: 1.856  loss_fcos_loc: 0.271  loss_fcos_ctr: 0.625  loss_fcos_vfcls: 0.8158  loss_prj: 0.1202  loss_pairwise: 0.01422  loss_mask: 0.01177  loss_mask_affinity: 0.002011    time: 0.7898  last_time: 0.7001  data_time: 0.0148  last_data_time: 0.0145   lr: 0.01  max_mem: 9915M
[32m[06/24 17:34:50 d2.utils.events]: [0m eta: 3:31:37  iter: 2039  total_loss: 1.824  loss_fcos_loc: 0.271  loss_fcos_ctr: 0.6235  loss_fcos_vfcls: 0.7803  loss_prj: 0.1163  loss_pairwise: 0.01563  loss_mask: 0.01194  loss_mask_affinity: 0.002031    time: 0.7901  last_time: 0.7632  data_time: 0.0185  last_data_time: 0.0167   lr: 0.01  max_mem: 9915M
[32m[06/24 17:35:06 d2.utils.events]: [0m eta: 3:31:28  iter: 2059  total_loss: 1.823  loss_fcos_loc: 0.2664  loss_fcos_ctr: 0.6241  loss_fcos_vfcls: 0.7843  loss_prj: 0.1125  loss_pairwise: 0.01547  loss_mask: 0.01248  loss_mask_affinity: 0.002053    time: 0.7901  last_time: 0.7086  data_time: 0.0155  last_data_time: 0.0145   lr: 0.01  max_mem: 9915M
[32m[06/24 17:35:22 d2.utils.events]: [0m eta: 3:31:20  iter: 2079  total_loss: 1.858  loss_fcos_loc: 0.2538  loss_fcos_ctr: 0.624  loss_fcos_vfcls: 0.8452  loss_prj: 0.111  loss_pairwise: 0.01426  loss_mask: 0.01246  loss_mask_affinity: 0.002008    time: 0.7903  last_time: 0.7723  data_time: 0.0151  last_data_time: 0.0115   lr: 0.01  max_mem: 9915M
[32m[06/24 17:35:39 d2.utils.events]: [0m eta: 3:31:14  iter: 2099  total_loss: 1.804  loss_fcos_loc: 0.26  loss_fcos_ctr: 0.6251  loss_fcos_vfcls: 0.786  loss_prj: 0.1144  loss_pairwise: 0.01501  loss_mask: 0.01225  loss_mask_affinity: 0.002166    time: 0.7907  last_time: 0.8443  data_time: 0.0157  last_data_time: 0.0124   lr: 0.01  max_mem: 10040M
[32m[06/24 17:35:55 d2.utils.events]: [0m eta: 3:31:04  iter: 2119  total_loss: 1.794  loss_fcos_loc: 0.2528  loss_fcos_ctr: 0.6214  loss_fcos_vfcls: 0.7786  loss_prj: 0.1044  loss_pairwise: 0.01501  loss_mask: 0.0115  loss_mask_affinity: 0.00199    time: 0.7909  last_time: 0.8974  data_time: 0.0182  last_data_time: 0.0325   lr: 0.01  max_mem: 10040M
[32m[06/24 17:36:11 d2.utils.events]: [0m eta: 3:30:55  iter: 2139  total_loss: 1.787  loss_fcos_loc: 0.2543  loss_fcos_ctr: 0.621  loss_fcos_vfcls: 0.7613  loss_prj: 0.1062  loss_pairwise: 0.01624  loss_mask: 0.01169  loss_mask_affinity: 0.002083    time: 0.7912  last_time: 0.8177  data_time: 0.0178  last_data_time: 0.0249   lr: 0.01  max_mem: 10040M
[32m[06/24 17:36:28 d2.utils.events]: [0m eta: 3:30:54  iter: 2159  total_loss: 1.801  loss_fcos_loc: 0.2655  loss_fcos_ctr: 0.6229  loss_fcos_vfcls: 0.7689  loss_prj: 0.1157  loss_pairwise: 0.01508  loss_mask: 0.01163  loss_mask_affinity: 0.00211    time: 0.7916  last_time: 0.8056  data_time: 0.0161  last_data_time: 0.0146   lr: 0.01  max_mem: 10040M
[32m[06/24 17:36:44 d2.utils.events]: [0m eta: 3:30:40  iter: 2179  total_loss: 1.821  loss_fcos_loc: 0.2522  loss_fcos_ctr: 0.6192  loss_fcos_vfcls: 0.7899  loss_prj: 0.1105  loss_pairwise: 0.01585  loss_mask: 0.01294  loss_mask_affinity: 0.002088    time: 0.7918  last_time: 0.7554  data_time: 0.0167  last_data_time: 0.0146   lr: 0.01  max_mem: 10040M
[32m[06/24 17:37:00 d2.utils.events]: [0m eta: 3:30:24  iter: 2199  total_loss: 1.826  loss_fcos_loc: 0.2575  loss_fcos_ctr: 0.62  loss_fcos_vfcls: 0.8075  loss_prj: 0.1071  loss_pairwise: 0.01449  loss_mask: 0.01251  loss_mask_affinity: 0.002106    time: 0.7919  last_time: 0.8737  data_time: 0.0170  last_data_time: 0.0133   lr: 0.01  max_mem: 10040M
[32m[06/24 17:37:17 d2.utils.events]: [0m eta: 3:30:11  iter: 2219  total_loss: 1.82  loss_fcos_loc: 0.2526  loss_fcos_ctr: 0.6213  loss_fcos_vfcls: 0.8047  loss_prj: 0.1  loss_pairwise: 0.01491  loss_mask: 0.01251  loss_mask_affinity: 0.002184    time: 0.7921  last_time: 0.8246  data_time: 0.0186  last_data_time: 0.0153   lr: 0.01  max_mem: 10040M
[32m[06/24 17:37:33 d2.utils.events]: [0m eta: 3:30:07  iter: 2239  total_loss: 1.834  loss_fcos_loc: 0.2627  loss_fcos_ctr: 0.623  loss_fcos_vfcls: 0.786  loss_prj: 0.1167  loss_pairwise: 0.0158  loss_mask: 0.01264  loss_mask_affinity: 0.0022    time: 0.7924  last_time: 0.7768  data_time: 0.0164  last_data_time: 0.0131   lr: 0.01  max_mem: 10040M
[32m[06/24 17:37:49 d2.utils.events]: [0m eta: 3:29:40  iter: 2259  total_loss: 1.854  loss_fcos_loc: 0.262  loss_fcos_ctr: 0.618  loss_fcos_vfcls: 0.8174  loss_prj: 0.1133  loss_pairwise: 0.01503  loss_mask: 0.01478  loss_mask_affinity: 0.00219    time: 0.7925  last_time: 0.8283  data_time: 0.0155  last_data_time: 0.0128   lr: 0.01  max_mem: 10040M
[32m[06/24 17:38:05 d2.utils.events]: [0m eta: 3:29:37  iter: 2279  total_loss: 1.802  loss_fcos_loc: 0.2587  loss_fcos_ctr: 0.6233  loss_fcos_vfcls: 0.7905  loss_prj: 0.1099  loss_pairwise: 0.01549  loss_mask: 0.01415  loss_mask_affinity: 0.002141    time: 0.7926  last_time: 0.8311  data_time: 0.0160  last_data_time: 0.0130   lr: 0.01  max_mem: 10040M
[32m[06/24 17:38:22 d2.utils.events]: [0m eta: 3:29:36  iter: 2299  total_loss: 1.825  loss_fcos_loc: 0.2571  loss_fcos_ctr: 0.6214  loss_fcos_vfcls: 0.8278  loss_prj: 0.1062  loss_pairwise: 0.01616  loss_mask: 0.01426  loss_mask_affinity: 0.002226    time: 0.7927  last_time: 0.7288  data_time: 0.0199  last_data_time: 0.0124   lr: 0.01  max_mem: 10040M
[32m[06/24 17:38:38 d2.utils.events]: [0m eta: 3:29:38  iter: 2319  total_loss: 1.805  loss_fcos_loc: 0.2465  loss_fcos_ctr: 0.6213  loss_fcos_vfcls: 0.8108  loss_prj: 0.1054  loss_pairwise: 0.01511  loss_mask: 0.01337  loss_mask_affinity: 0.002159    time: 0.7930  last_time: 0.7404  data_time: 0.0152  last_data_time: 0.0184   lr: 0.01  max_mem: 10040M
[32m[06/24 17:38:55 d2.utils.events]: [0m eta: 3:29:32  iter: 2339  total_loss: 1.845  loss_fcos_loc: 0.2617  loss_fcos_ctr: 0.6217  loss_fcos_vfcls: 0.7961  loss_prj: 0.1157  loss_pairwise: 0.01494  loss_mask: 0.01446  loss_mask_affinity: 0.002201    time: 0.7933  last_time: 0.7657  data_time: 0.0176  last_data_time: 0.0164   lr: 0.01  max_mem: 10040M
[32m[06/24 17:39:12 d2.utils.events]: [0m eta: 3:29:27  iter: 2359  total_loss: 1.846  loss_fcos_loc: 0.2629  loss_fcos_ctr: 0.6287  loss_fcos_vfcls: 0.8037  loss_prj: 0.1106  loss_pairwise: 0.01577  loss_mask: 0.01324  loss_mask_affinity: 0.002404    time: 0.7938  last_time: 0.7794  data_time: 0.0170  last_data_time: 0.0195   lr: 0.01  max_mem: 10040M
[32m[06/24 17:39:28 d2.utils.events]: [0m eta: 3:29:23  iter: 2379  total_loss: 1.821  loss_fcos_loc: 0.2681  loss_fcos_ctr: 0.6248  loss_fcos_vfcls: 0.7761  loss_prj: 0.1116  loss_pairwise: 0.01625  loss_mask: 0.01406  loss_mask_affinity: 0.002288    time: 0.7942  last_time: 0.7418  data_time: 0.0166  last_data_time: 0.0147   lr: 0.01  max_mem: 10040M
[32m[06/24 17:39:44 d2.utils.events]: [0m eta: 3:29:10  iter: 2399  total_loss: 1.834  loss_fcos_loc: 0.2547  loss_fcos_ctr: 0.6255  loss_fcos_vfcls: 0.7804  loss_prj: 0.1085  loss_pairwise: 0.01619  loss_mask: 0.01323  loss_mask_affinity: 0.002349    time: 0.7942  last_time: 0.7741  data_time: 0.0164  last_data_time: 0.0354   lr: 0.01  max_mem: 10040M
[32m[06/24 17:40:01 d2.utils.events]: [0m eta: 3:28:58  iter: 2419  total_loss: 1.819  loss_fcos_loc: 0.2596  loss_fcos_ctr: 0.6226  loss_fcos_vfcls: 0.7998  loss_prj: 0.1135  loss_pairwise: 0.01526  loss_mask: 0.01481  loss_mask_affinity: 0.002262    time: 0.7943  last_time: 0.7569  data_time: 0.0161  last_data_time: 0.0144   lr: 0.01  max_mem: 10040M
[32m[06/24 17:40:17 d2.utils.events]: [0m eta: 3:28:51  iter: 2439  total_loss: 1.831  loss_fcos_loc: 0.2804  loss_fcos_ctr: 0.6255  loss_fcos_vfcls: 0.7637  loss_prj: 0.1184  loss_pairwise: 0.01683  loss_mask: 0.01445  loss_mask_affinity: 0.002547    time: 0.7947  last_time: 0.9490  data_time: 0.0162  last_data_time: 0.0178   lr: 0.01  max_mem: 10040M
[32m[06/24 17:40:33 d2.utils.events]: [0m eta: 3:28:33  iter: 2459  total_loss: 1.835  loss_fcos_loc: 0.2505  loss_fcos_ctr: 0.6175  loss_fcos_vfcls: 0.8202  loss_prj: 0.1088  loss_pairwise: 0.01633  loss_mask: 0.0139  loss_mask_affinity: 0.002373    time: 0.7948  last_time: 0.7841  data_time: 0.0143  last_data_time: 0.0158   lr: 0.01  max_mem: 10040M
[32m[06/24 17:40:50 d2.utils.events]: [0m eta: 3:28:20  iter: 2479  total_loss: 1.804  loss_fcos_loc: 0.2448  loss_fcos_ctr: 0.6213  loss_fcos_vfcls: 0.7954  loss_prj: 0.1026  loss_pairwise: 0.01522  loss_mask: 0.01491  loss_mask_affinity: 0.002302    time: 0.7949  last_time: 0.7962  data_time: 0.0170  last_data_time: 0.0161   lr: 0.01  max_mem: 10040M
[32m[06/24 17:41:06 d2.utils.events]: [0m eta: 3:28:07  iter: 2499  total_loss: 1.846  loss_fcos_loc: 0.2596  loss_fcos_ctr: 0.6244  loss_fcos_vfcls: 0.7994  loss_prj: 0.1159  loss_pairwise: 0.01577  loss_mask: 0.01456  loss_mask_affinity: 0.002448    time: 0.7951  last_time: 0.8471  data_time: 0.0175  last_data_time: 0.0412   lr: 0.01  max_mem: 10040M
[32m[06/24 17:41:22 d2.utils.events]: [0m eta: 3:27:48  iter: 2519  total_loss: 1.825  loss_fcos_loc: 0.2441  loss_fcos_ctr: 0.6178  loss_fcos_vfcls: 0.808  loss_prj: 0.1065  loss_pairwise: 0.01674  loss_mask: 0.01468  loss_mask_affinity: 0.002289    time: 0.7950  last_time: 0.8447  data_time: 0.0188  last_data_time: 0.0137   lr: 0.01  max_mem: 10040M
[32m[06/24 17:41:38 d2.utils.events]: [0m eta: 3:27:36  iter: 2539  total_loss: 1.801  loss_fcos_loc: 0.2579  loss_fcos_ctr: 0.6217  loss_fcos_vfcls: 0.7613  loss_prj: 0.1171  loss_pairwise: 0.01794  loss_mask: 0.01422  loss_mask_affinity: 0.002531    time: 0.7952  last_time: 0.8624  data_time: 0.0152  last_data_time: 0.0153   lr: 0.01  max_mem: 10040M
[32m[06/24 17:41:55 d2.utils.events]: [0m eta: 3:27:33  iter: 2559  total_loss: 1.824  loss_fcos_loc: 0.2475  loss_fcos_ctr: 0.6186  loss_fcos_vfcls: 0.8002  loss_prj: 0.1072  loss_pairwise: 0.01565  loss_mask: 0.01429  loss_mask_affinity: 0.002386    time: 0.7954  last_time: 0.9099  data_time: 0.0147  last_data_time: 0.0173   lr: 0.01  max_mem: 10040M
[32m[06/24 17:42:11 d2.utils.events]: [0m eta: 3:27:05  iter: 2579  total_loss: 1.822  loss_fcos_loc: 0.2526  loss_fcos_ctr: 0.6244  loss_fcos_vfcls: 0.8019  loss_prj: 0.1095  loss_pairwise: 0.01697  loss_mask: 0.01536  loss_mask_affinity: 0.002575    time: 0.7954  last_time: 0.7935  data_time: 0.0178  last_data_time: 0.0265   lr: 0.01  max_mem: 10040M
[32m[06/24 17:42:27 d2.utils.events]: [0m eta: 3:26:49  iter: 2599  total_loss: 1.804  loss_fcos_loc: 0.2436  loss_fcos_ctr: 0.6236  loss_fcos_vfcls: 0.7886  loss_prj: 0.102  loss_pairwise: 0.0172  loss_mask: 0.01357  loss_mask_affinity: 0.002453    time: 0.7957  last_time: 0.7552  data_time: 0.0175  last_data_time: 0.0086   lr: 0.01  max_mem: 10040M
[32m[06/24 17:42:44 d2.utils.events]: [0m eta: 3:26:47  iter: 2619  total_loss: 1.778  loss_fcos_loc: 0.2508  loss_fcos_ctr: 0.6234  loss_fcos_vfcls: 0.7629  loss_prj: 0.1086  loss_pairwise: 0.01754  loss_mask: 0.01517  loss_mask_affinity: 0.002543    time: 0.7959  last_time: 0.8703  data_time: 0.0148  last_data_time: 0.0096   lr: 0.01  max_mem: 10040M
[32m[06/24 17:43:00 d2.utils.events]: [0m eta: 3:26:46  iter: 2639  total_loss: 1.802  loss_fcos_loc: 0.2444  loss_fcos_ctr: 0.619  loss_fcos_vfcls: 0.759  loss_prj: 0.1092  loss_pairwise: 0.01688  loss_mask: 0.01462  loss_mask_affinity: 0.002513    time: 0.7960  last_time: 0.8159  data_time: 0.0154  last_data_time: 0.0093   lr: 0.01  max_mem: 10040M
[32m[06/24 17:43:16 d2.utils.events]: [0m eta: 3:26:39  iter: 2659  total_loss: 1.794  loss_fcos_loc: 0.2432  loss_fcos_ctr: 0.6194  loss_fcos_vfcls: 0.7761  loss_prj: 0.1014  loss_pairwise: 0.01757  loss_mask: 0.01444  loss_mask_affinity: 0.002495    time: 0.7962  last_time: 0.8168  data_time: 0.0173  last_data_time: 0.0317   lr: 0.01  max_mem: 10040M
[32m[06/24 17:43:33 d2.utils.events]: [0m eta: 3:26:33  iter: 2679  total_loss: 1.805  loss_fcos_loc: 0.2494  loss_fcos_ctr: 0.6204  loss_fcos_vfcls: 0.7865  loss_prj: 0.105  loss_pairwise: 0.01736  loss_mask: 0.01452  loss_mask_affinity: 0.002511    time: 0.7964  last_time: 0.8193  data_time: 0.0146  last_data_time: 0.0223   lr: 0.01  max_mem: 10040M
[32m[06/24 17:43:49 d2.utils.events]: [0m eta: 3:26:13  iter: 2699  total_loss: 1.764  loss_fcos_loc: 0.2351  loss_fcos_ctr: 0.6192  loss_fcos_vfcls: 0.7865  loss_prj: 0.09294  loss_pairwise: 0.01697  loss_mask: 0.0135  loss_mask_affinity: 0.002429    time: 0.7963  last_time: 0.7358  data_time: 0.0161  last_data_time: 0.0118   lr: 0.01  max_mem: 10040M
[32m[06/24 17:44:05 d2.utils.events]: [0m eta: 3:25:59  iter: 2719  total_loss: 1.809  loss_fcos_loc: 0.2426  loss_fcos_ctr: 0.6176  loss_fcos_vfcls: 0.8058  loss_prj: 0.1058  loss_pairwise: 0.01803  loss_mask: 0.01623  loss_mask_affinity: 0.002518    time: 0.7965  last_time: 0.8792  data_time: 0.0143  last_data_time: 0.0162   lr: 0.01  max_mem: 10040M
[32m[06/24 17:44:21 d2.utils.events]: [0m eta: 3:25:39  iter: 2739  total_loss: 1.792  loss_fcos_loc: 0.2393  loss_fcos_ctr: 0.618  loss_fcos_vfcls: 0.7892  loss_prj: 0.1029  loss_pairwise: 0.01655  loss_mask: 0.01621  loss_mask_affinity: 0.002554    time: 0.7966  last_time: 0.9102  data_time: 0.0155  last_data_time: 0.0203   lr: 0.01  max_mem: 10040M
[32m[06/24 17:44:37 d2.utils.events]: [0m eta: 3:25:21  iter: 2759  total_loss: 1.788  loss_fcos_loc: 0.244  loss_fcos_ctr: 0.6209  loss_fcos_vfcls: 0.8029  loss_prj: 0.1034  loss_pairwise: 0.01649  loss_mask: 0.01476  loss_mask_affinity: 0.002618    time: 0.7965  last_time: 0.8974  data_time: 0.0170  last_data_time: 0.0184   lr: 0.01  max_mem: 10040M
[32m[06/24 17:44:54 d2.utils.events]: [0m eta: 3:25:08  iter: 2779  total_loss: 1.802  loss_fcos_loc: 0.2577  loss_fcos_ctr: 0.6223  loss_fcos_vfcls: 0.7637  loss_prj: 0.1054  loss_pairwise: 0.01694  loss_mask: 0.01577  loss_mask_affinity: 0.002529    time: 0.7967  last_time: 0.8622  data_time: 0.0177  last_data_time: 0.0265   lr: 0.01  max_mem: 10040M
[32m[06/24 17:45:11 d2.utils.events]: [0m eta: 3:24:56  iter: 2799  total_loss: 1.817  loss_fcos_loc: 0.2639  loss_fcos_ctr: 0.6211  loss_fcos_vfcls: 0.7688  loss_prj: 0.1169  loss_pairwise: 0.01848  loss_mask: 0.01622  loss_mask_affinity: 0.002731    time: 0.7971  last_time: 0.7876  data_time: 0.0154  last_data_time: 0.0163   lr: 0.01  max_mem: 10040M
[32m[06/24 17:45:27 d2.utils.events]: [0m eta: 3:24:41  iter: 2819  total_loss: 1.794  loss_fcos_loc: 0.2481  loss_fcos_ctr: 0.6192  loss_fcos_vfcls: 0.7933  loss_prj: 0.1009  loss_pairwise: 0.01729  loss_mask: 0.01533  loss_mask_affinity: 0.002552    time: 0.7972  last_time: 0.8130  data_time: 0.0158  last_data_time: 0.0133   lr: 0.01  max_mem: 10040M
[32m[06/24 17:45:43 d2.utils.events]: [0m eta: 3:24:22  iter: 2839  total_loss: 1.802  loss_fcos_loc: 0.2564  loss_fcos_ctr: 0.6206  loss_fcos_vfcls: 0.7971  loss_prj: 0.109  loss_pairwise: 0.01673  loss_mask: 0.01623  loss_mask_affinity: 0.002696    time: 0.7974  last_time: 0.8372  data_time: 0.0173  last_data_time: 0.0185   lr: 0.01  max_mem: 10040M
[32m[06/24 17:46:00 d2.utils.events]: [0m eta: 3:24:09  iter: 2859  total_loss: 1.789  loss_fcos_loc: 0.2507  loss_fcos_ctr: 0.6207  loss_fcos_vfcls: 0.7577  loss_prj: 0.1094  loss_pairwise: 0.01679  loss_mask: 0.01716  loss_mask_affinity: 0.002761    time: 0.7976  last_time: 0.7886  data_time: 0.0145  last_data_time: 0.0102   lr: 0.01  max_mem: 10040M
[32m[06/24 17:46:16 d2.utils.events]: [0m eta: 3:23:53  iter: 2879  total_loss: 1.801  loss_fcos_loc: 0.2471  loss_fcos_ctr: 0.6221  loss_fcos_vfcls: 0.7977  loss_prj: 0.1071  loss_pairwise: 0.01687  loss_mask: 0.01563  loss_mask_affinity: 0.002606    time: 0.7977  last_time: 0.7052  data_time: 0.0176  last_data_time: 0.0175   lr: 0.01  max_mem: 10040M
[32m[06/24 17:46:33 d2.utils.events]: [0m eta: 3:23:43  iter: 2899  total_loss: 1.804  loss_fcos_loc: 0.2565  loss_fcos_ctr: 0.6246  loss_fcos_vfcls: 0.7844  loss_prj: 0.11  loss_pairwise: 0.01773  loss_mask: 0.01683  loss_mask_affinity: 0.002781    time: 0.7978  last_time: 0.8993  data_time: 0.0194  last_data_time: 0.0116   lr: 0.01  max_mem: 10040M
[32m[06/24 17:46:49 d2.utils.events]: [0m eta: 3:23:24  iter: 2919  total_loss: 1.814  loss_fcos_loc: 0.2481  loss_fcos_ctr: 0.6189  loss_fcos_vfcls: 0.7972  loss_prj: 0.1068  loss_pairwise: 0.019  loss_mask: 0.0178  loss_mask_affinity: 0.002668    time: 0.7978  last_time: 0.7598  data_time: 0.0186  last_data_time: 0.0159   lr: 0.01  max_mem: 10040M
[32m[06/24 17:47:05 d2.utils.events]: [0m eta: 3:23:40  iter: 2939  total_loss: 1.786  loss_fcos_loc: 0.2495  loss_fcos_ctr: 0.6222  loss_fcos_vfcls: 0.7572  loss_prj: 0.1088  loss_pairwise: 0.01792  loss_mask: 0.01609  loss_mask_affinity: 0.002809    time: 0.7980  last_time: 0.8674  data_time: 0.0138  last_data_time: 0.0108   lr: 0.01  max_mem: 10040M
[32m[06/24 17:47:21 d2.utils.events]: [0m eta: 3:22:58  iter: 2959  total_loss: 1.77  loss_fcos_loc: 0.241  loss_fcos_ctr: 0.6201  loss_fcos_vfcls: 0.7573  loss_prj: 0.104  loss_pairwise: 0.01884  loss_mask: 0.01709  loss_mask_affinity: 0.002759    time: 0.7981  last_time: 0.7496  data_time: 0.0160  last_data_time: 0.0101   lr: 0.01  max_mem: 10040M
[32m[06/24 17:47:37 d2.utils.events]: [0m eta: 3:22:43  iter: 2979  total_loss: 1.769  loss_fcos_loc: 0.2457  loss_fcos_ctr: 0.6207  loss_fcos_vfcls: 0.7648  loss_prj: 0.1023  loss_pairwise: 0.01783  loss_mask: 0.01604  loss_mask_affinity: 0.002699    time: 0.7981  last_time: 0.8105  data_time: 0.0160  last_data_time: 0.0178   lr: 0.01  max_mem: 10040M
[32m[06/24 17:47:53 d2.utils.events]: [0m eta: 3:22:25  iter: 2999  total_loss: 1.754  loss_fcos_loc: 0.2338  loss_fcos_ctr: 0.6191  loss_fcos_vfcls: 0.7723  loss_prj: 0.1004  loss_pairwise: 0.01816  loss_mask: 0.01608  loss_mask_affinity: 0.002711    time: 0.7981  last_time: 0.8703  data_time: 0.0163  last_data_time: 0.0168   lr: 0.01  max_mem: 10040M
[32m[06/24 17:48:09 d2.utils.events]: [0m eta: 3:22:10  iter: 3019  total_loss: 1.791  loss_fcos_loc: 0.2437  loss_fcos_ctr: 0.6187  loss_fcos_vfcls: 0.7838  loss_prj: 0.1013  loss_pairwise: 0.01868  loss_mask: 0.01574  loss_mask_affinity: 0.002875    time: 0.7982  last_time: 0.7710  data_time: 0.0180  last_data_time: 0.0094   lr: 0.01  max_mem: 10040M
[32m[06/24 17:48:26 d2.utils.events]: [0m eta: 3:21:44  iter: 3039  total_loss: 1.8  loss_fcos_loc: 0.2563  loss_fcos_ctr: 0.623  loss_fcos_vfcls: 0.7662  loss_prj: 0.1125  loss_pairwise: 0.01872  loss_mask: 0.01728  loss_mask_affinity: 0.002917    time: 0.7982  last_time: 0.8477  data_time: 0.0170  last_data_time: 0.0163   lr: 0.01  max_mem: 10040M
[32m[06/24 17:48:42 d2.utils.events]: [0m eta: 3:21:35  iter: 3059  total_loss: 1.787  loss_fcos_loc: 0.2519  loss_fcos_ctr: 0.623  loss_fcos_vfcls: 0.7605  loss_prj: 0.1119  loss_pairwise: 0.01873  loss_mask: 0.01748  loss_mask_affinity: 0.003064    time: 0.7982  last_time: 0.7598  data_time: 0.0139  last_data_time: 0.0165   lr: 0.01  max_mem: 10040M
[32m[06/24 17:48:58 d2.utils.events]: [0m eta: 3:21:11  iter: 3079  total_loss: 1.771  loss_fcos_loc: 0.2449  loss_fcos_ctr: 0.6175  loss_fcos_vfcls: 0.778  loss_prj: 0.1076  loss_pairwise: 0.01794  loss_mask: 0.01733  loss_mask_affinity: 0.002741    time: 0.7983  last_time: 0.9552  data_time: 0.0169  last_data_time: 0.0111   lr: 0.01  max_mem: 10040M
[32m[06/24 17:49:15 d2.utils.events]: [0m eta: 3:21:03  iter: 3099  total_loss: 1.792  loss_fcos_loc: 0.245  loss_fcos_ctr: 0.6187  loss_fcos_vfcls: 0.7862  loss_prj: 0.1065  loss_pairwise: 0.01923  loss_mask: 0.01717  loss_mask_affinity: 0.002887    time: 0.7985  last_time: 0.8869  data_time: 0.0183  last_data_time: 0.0236   lr: 0.01  max_mem: 10040M
[32m[06/24 17:49:31 d2.utils.events]: [0m eta: 3:20:48  iter: 3119  total_loss: 1.766  loss_fcos_loc: 0.2465  loss_fcos_ctr: 0.6186  loss_fcos_vfcls: 0.7527  loss_prj: 0.1042  loss_pairwise: 0.01845  loss_mask: 0.018  loss_mask_affinity: 0.002846    time: 0.7986  last_time: 0.6879  data_time: 0.0168  last_data_time: 0.0194   lr: 0.01  max_mem: 10040M
[32m[06/24 17:49:47 d2.utils.events]: [0m eta: 3:20:17  iter: 3139  total_loss: 1.77  loss_fcos_loc: 0.2454  loss_fcos_ctr: 0.6205  loss_fcos_vfcls: 0.7652  loss_prj: 0.1001  loss_pairwise: 0.01831  loss_mask: 0.01695  loss_mask_affinity: 0.002935    time: 0.7986  last_time: 0.8195  data_time: 0.0178  last_data_time: 0.0150   lr: 0.01  max_mem: 10040M
[32m[06/24 17:50:04 d2.utils.events]: [0m eta: 3:20:14  iter: 3159  total_loss: 1.764  loss_fcos_loc: 0.2373  loss_fcos_ctr: 0.6219  loss_fcos_vfcls: 0.763  loss_prj: 0.09657  loss_pairwise: 0.01918  loss_mask: 0.01642  loss_mask_affinity: 0.003037    time: 0.7988  last_time: 0.6639  data_time: 0.0158  last_data_time: 0.0168   lr: 0.01  max_mem: 10040M
[32m[06/24 17:50:20 d2.utils.events]: [0m eta: 3:19:44  iter: 3179  total_loss: 1.78  loss_fcos_loc: 0.2501  loss_fcos_ctr: 0.6186  loss_fcos_vfcls: 0.7701  loss_prj: 0.1008  loss_pairwise: 0.01814  loss_mask: 0.01725  loss_mask_affinity: 0.002742    time: 0.7988  last_time: 0.8534  data_time: 0.0165  last_data_time: 0.0387   lr: 0.01  max_mem: 10040M
[32m[06/24 17:50:36 d2.utils.events]: [0m eta: 3:19:35  iter: 3199  total_loss: 1.798  loss_fcos_loc: 0.2438  loss_fcos_ctr: 0.6185  loss_fcos_vfcls: 0.7978  loss_prj: 0.1058  loss_pairwise: 0.01856  loss_mask: 0.0189  loss_mask_affinity: 0.002906    time: 0.7988  last_time: 0.7817  data_time: 0.0162  last_data_time: 0.0167   lr: 0.01  max_mem: 10040M
[32m[06/24 17:50:52 d2.utils.events]: [0m eta: 3:19:18  iter: 3219  total_loss: 1.779  loss_fcos_loc: 0.2368  loss_fcos_ctr: 0.6192  loss_fcos_vfcls: 0.7796  loss_prj: 0.1045  loss_pairwise: 0.01829  loss_mask: 0.0187  loss_mask_affinity: 0.002994    time: 0.7988  last_time: 0.7633  data_time: 0.0184  last_data_time: 0.0144   lr: 0.01  max_mem: 10040M
[32m[06/24 17:51:08 d2.utils.events]: [0m eta: 3:19:02  iter: 3239  total_loss: 1.761  loss_fcos_loc: 0.2432  loss_fcos_ctr: 0.6205  loss_fcos_vfcls: 0.7484  loss_prj: 0.1058  loss_pairwise: 0.0193  loss_mask: 0.01864  loss_mask_affinity: 0.003091    time: 0.7989  last_time: 0.7273  data_time: 0.0155  last_data_time: 0.0172   lr: 0.01  max_mem: 10040M
[32m[06/24 17:51:25 d2.utils.events]: [0m eta: 3:18:57  iter: 3259  total_loss: 1.773  loss_fcos_loc: 0.248  loss_fcos_ctr: 0.621  loss_fcos_vfcls: 0.7601  loss_prj: 0.1035  loss_pairwise: 0.01953  loss_mask: 0.0181  loss_mask_affinity: 0.003054    time: 0.7991  last_time: 0.9597  data_time: 0.0166  last_data_time: 0.0184   lr: 0.01  max_mem: 10040M
[32m[06/24 17:51:41 d2.utils.events]: [0m eta: 3:18:53  iter: 3279  total_loss: 1.785  loss_fcos_loc: 0.2427  loss_fcos_ctr: 0.6217  loss_fcos_vfcls: 0.7832  loss_prj: 0.1055  loss_pairwise: 0.01849  loss_mask: 0.01904  loss_mask_affinity: 0.003101    time: 0.7993  last_time: 0.8735  data_time: 0.0159  last_data_time: 0.0107   lr: 0.01  max_mem: 10040M
[32m[06/24 17:51:58 d2.utils.events]: [0m eta: 3:18:37  iter: 3299  total_loss: 1.779  loss_fcos_loc: 0.2464  loss_fcos_ctr: 0.6211  loss_fcos_vfcls: 0.7635  loss_prj: 0.1025  loss_pairwise: 0.01794  loss_mask: 0.01869  loss_mask_affinity: 0.003125    time: 0.7994  last_time: 0.9637  data_time: 0.0167  last_data_time: 0.0219   lr: 0.01  max_mem: 10040M
[32m[06/24 17:52:14 d2.utils.events]: [0m eta: 3:18:07  iter: 3319  total_loss: 1.801  loss_fcos_loc: 0.2408  loss_fcos_ctr: 0.6194  loss_fcos_vfcls: 0.7864  loss_prj: 0.1061  loss_pairwise: 0.01919  loss_mask: 0.01856  loss_mask_affinity: 0.003022    time: 0.7994  last_time: 0.8033  data_time: 0.0171  last_data_time: 0.0130   lr: 0.01  max_mem: 10040M
[32m[06/24 17:52:30 d2.utils.events]: [0m eta: 3:17:34  iter: 3339  total_loss: 1.757  loss_fcos_loc: 0.2355  loss_fcos_ctr: 0.6168  loss_fcos_vfcls: 0.7542  loss_prj: 0.09594  loss_pairwise: 0.01793  loss_mask: 0.01802  loss_mask_affinity: 0.002937    time: 0.7994  last_time: 0.7928  data_time: 0.0186  last_data_time: 0.0191   lr: 0.01  max_mem: 10040M
[32m[06/24 17:52:46 d2.utils.events]: [0m eta: 3:17:17  iter: 3359  total_loss: 1.762  loss_fcos_loc: 0.2389  loss_fcos_ctr: 0.6188  loss_fcos_vfcls: 0.7579  loss_prj: 0.09803  loss_pairwise: 0.01961  loss_mask: 0.01742  loss_mask_affinity: 0.003079    time: 0.7995  last_time: 0.7245  data_time: 0.0178  last_data_time: 0.0157   lr: 0.01  max_mem: 10040M
[32m[06/24 17:53:03 d2.utils.events]: [0m eta: 3:16:55  iter: 3379  total_loss: 1.769  loss_fcos_loc: 0.2399  loss_fcos_ctr: 0.6182  loss_fcos_vfcls: 0.7727  loss_prj: 0.1069  loss_pairwise: 0.01939  loss_mask: 0.02052  loss_mask_affinity: 0.002925    time: 0.7995  last_time: 0.7831  data_time: 0.0186  last_data_time: 0.0292   lr: 0.01  max_mem: 10040M
[32m[06/24 17:53:19 d2.utils.events]: [0m eta: 3:16:44  iter: 3399  total_loss: 1.753  loss_fcos_loc: 0.2456  loss_fcos_ctr: 0.6202  loss_fcos_vfcls: 0.7462  loss_prj: 0.1072  loss_pairwise: 0.02028  loss_mask: 0.01868  loss_mask_affinity: 0.003142    time: 0.7996  last_time: 0.8790  data_time: 0.0177  last_data_time: 0.0181   lr: 0.01  max_mem: 10040M
[32m[06/24 17:53:36 d2.utils.events]: [0m eta: 3:16:28  iter: 3419  total_loss: 1.762  loss_fcos_loc: 0.2346  loss_fcos_ctr: 0.6171  loss_fcos_vfcls: 0.7651  loss_prj: 0.09996  loss_pairwise: 0.01964  loss_mask: 0.02001  loss_mask_affinity: 0.003139    time: 0.7998  last_time: 0.7829  data_time: 0.0158  last_data_time: 0.0199   lr: 0.01  max_mem: 10040M
[32m[06/24 17:53:52 d2.utils.events]: [0m eta: 3:16:10  iter: 3439  total_loss: 1.788  loss_fcos_loc: 0.2455  loss_fcos_ctr: 0.6209  loss_fcos_vfcls: 0.7809  loss_prj: 0.1051  loss_pairwise: 0.021  loss_mask: 0.02013  loss_mask_affinity: 0.003232    time: 0.7999  last_time: 0.8359  data_time: 0.0179  last_data_time: 0.0226   lr: 0.01  max_mem: 10040M
[32m[06/24 17:54:09 d2.utils.events]: [0m eta: 3:15:55  iter: 3459  total_loss: 1.769  loss_fcos_loc: 0.2424  loss_fcos_ctr: 0.6207  loss_fcos_vfcls: 0.7435  loss_prj: 0.1083  loss_pairwise: 0.02029  loss_mask: 0.01955  loss_mask_affinity: 0.003224    time: 0.8000  last_time: 0.8341  data_time: 0.0179  last_data_time: 0.0157   lr: 0.01  max_mem: 10040M
[32m[06/24 17:54:25 d2.utils.events]: [0m eta: 3:15:41  iter: 3479  total_loss: 1.766  loss_fcos_loc: 0.2374  loss_fcos_ctr: 0.6189  loss_fcos_vfcls: 0.757  loss_prj: 0.1013  loss_pairwise: 0.01949  loss_mask: 0.01837  loss_mask_affinity: 0.003228    time: 0.8001  last_time: 0.8088  data_time: 0.0173  last_data_time: 0.0237   lr: 0.01  max_mem: 10040M
[32m[06/24 17:54:41 d2.utils.events]: [0m eta: 3:15:22  iter: 3499  total_loss: 1.794  loss_fcos_loc: 0.2426  loss_fcos_ctr: 0.6215  loss_fcos_vfcls: 0.7743  loss_prj: 0.1115  loss_pairwise: 0.01881  loss_mask: 0.0209  loss_mask_affinity: 0.003457    time: 0.8002  last_time: 0.7435  data_time: 0.0187  last_data_time: 0.0458   lr: 0.01  max_mem: 10040M
[32m[06/24 17:54:58 d2.utils.events]: [0m eta: 3:15:06  iter: 3519  total_loss: 1.764  loss_fcos_loc: 0.2266  loss_fcos_ctr: 0.6166  loss_fcos_vfcls: 0.7909  loss_prj: 0.1032  loss_pairwise: 0.021  loss_mask: 0.0202  loss_mask_affinity: 0.003078    time: 0.8002  last_time: 0.7873  data_time: 0.0185  last_data_time: 0.0163   lr: 0.01  max_mem: 10040M
[32m[06/24 17:55:13 d2.utils.events]: [0m eta: 3:14:38  iter: 3539  total_loss: 1.823  loss_fcos_loc: 0.2409  loss_fcos_ctr: 0.6213  loss_fcos_vfcls: 0.8192  loss_prj: 0.1037  loss_pairwise: 0.01887  loss_mask: 0.01861  loss_mask_affinity: 0.003326    time: 0.8002  last_time: 0.7305  data_time: 0.0190  last_data_time: 0.0188   lr: 0.01  max_mem: 10040M
[32m[06/24 17:55:30 d2.utils.events]: [0m eta: 3:14:23  iter: 3559  total_loss: 1.778  loss_fcos_loc: 0.2308  loss_fcos_ctr: 0.6212  loss_fcos_vfcls: 0.7636  loss_prj: 0.0978  loss_pairwise: 0.02085  loss_mask: 0.0192  loss_mask_affinity: 0.003117    time: 0.8003  last_time: 0.8588  data_time: 0.0171  last_data_time: 0.0347   lr: 0.01  max_mem: 10040M
[32m[06/24 17:55:47 d2.utils.events]: [0m eta: 3:14:18  iter: 3579  total_loss: 1.762  loss_fcos_loc: 0.2389  loss_fcos_ctr: 0.6197  loss_fcos_vfcls: 0.7382  loss_prj: 0.1088  loss_pairwise: 0.02205  loss_mask: 0.0203  loss_mask_affinity: 0.003144    time: 0.8005  last_time: 0.8472  data_time: 0.0175  last_data_time: 0.0128   lr: 0.01  max_mem: 10040M
[32m[06/24 17:56:03 d2.utils.events]: [0m eta: 3:14:02  iter: 3599  total_loss: 1.773  loss_fcos_loc: 0.2461  loss_fcos_ctr: 0.6204  loss_fcos_vfcls: 0.7392  loss_prj: 0.106  loss_pairwise: 0.02114  loss_mask: 0.02082  loss_mask_affinity: 0.003402    time: 0.8005  last_time: 0.8090  data_time: 0.0194  last_data_time: 0.0142   lr: 0.01  max_mem: 10040M
[32m[06/24 17:56:19 d2.utils.events]: [0m eta: 3:13:46  iter: 3619  total_loss: 1.777  loss_fcos_loc: 0.2403  loss_fcos_ctr: 0.6207  loss_fcos_vfcls: 0.7372  loss_prj: 0.1056  loss_pairwise: 0.01995  loss_mask: 0.02012  loss_mask_affinity: 0.003317    time: 0.8006  last_time: 0.8254  data_time: 0.0195  last_data_time: 0.0123   lr: 0.01  max_mem: 10040M
[32m[06/24 17:56:36 d2.utils.events]: [0m eta: 3:13:31  iter: 3639  total_loss: 1.768  loss_fcos_loc: 0.2232  loss_fcos_ctr: 0.6187  loss_fcos_vfcls: 0.7822  loss_prj: 0.09733  loss_pairwise: 0.02091  loss_mask: 0.01979  loss_mask_affinity: 0.003235    time: 0.8008  last_time: 0.9399  data_time: 0.0186  last_data_time: 0.0091   lr: 0.01  max_mem: 10040M
[32m[06/24 17:56:52 d2.utils.events]: [0m eta: 3:13:13  iter: 3659  total_loss: 1.75  loss_fcos_loc: 0.239  loss_fcos_ctr: 0.6217  loss_fcos_vfcls: 0.759  loss_prj: 0.09869  loss_pairwise: 0.02064  loss_mask: 0.02015  loss_mask_affinity: 0.003424    time: 0.8009  last_time: 0.7694  data_time: 0.0179  last_data_time: 0.0125   lr: 0.01  max_mem: 10040M
[32m[06/24 17:57:08 d2.utils.events]: [0m eta: 3:12:43  iter: 3679  total_loss: 1.776  loss_fcos_loc: 0.23  loss_fcos_ctr: 0.6183  loss_fcos_vfcls: 0.7705  loss_prj: 0.1  loss_pairwise: 0.02078  loss_mask: 0.02112  loss_mask_affinity: 0.003268    time: 0.8008  last_time: 0.8070  data_time: 0.0167  last_data_time: 0.0178   lr: 0.01  max_mem: 10040M
[32m[06/24 17:57:24 d2.utils.events]: [0m eta: 3:12:35  iter: 3699  total_loss: 1.761  loss_fcos_loc: 0.2384  loss_fcos_ctr: 0.6192  loss_fcos_vfcls: 0.7526  loss_prj: 0.0975  loss_pairwise: 0.02011  loss_mask: 0.02035  loss_mask_affinity: 0.003157    time: 0.8009  last_time: 0.8351  data_time: 0.0137  last_data_time: 0.0116   lr: 0.01  max_mem: 10040M
[32m[06/24 17:57:40 d2.utils.events]: [0m eta: 3:12:14  iter: 3719  total_loss: 1.793  loss_fcos_loc: 0.2435  loss_fcos_ctr: 0.623  loss_fcos_vfcls: 0.7826  loss_prj: 0.1048  loss_pairwise: 0.02089  loss_mask: 0.01918  loss_mask_affinity: 0.003568    time: 0.8009  last_time: 0.7199  data_time: 0.0160  last_data_time: 0.0111   lr: 0.01  max_mem: 10040M
[32m[06/24 17:57:57 d2.utils.events]: [0m eta: 3:12:04  iter: 3739  total_loss: 1.756  loss_fcos_loc: 0.2354  loss_fcos_ctr: 0.6157  loss_fcos_vfcls: 0.7612  loss_prj: 0.09645  loss_pairwise: 0.0208  loss_mask: 0.02017  loss_mask_affinity: 0.003449    time: 0.8010  last_time: 0.6980  data_time: 0.0153  last_data_time: 0.0177   lr: 0.01  max_mem: 10040M
[32m[06/24 17:58:13 d2.utils.events]: [0m eta: 3:11:52  iter: 3759  total_loss: 1.772  loss_fcos_loc: 0.2412  loss_fcos_ctr: 0.6204  loss_fcos_vfcls: 0.719  loss_prj: 0.1001  loss_pairwise: 0.02111  loss_mask: 0.0206  loss_mask_affinity: 0.003592    time: 0.8011  last_time: 0.7754  data_time: 0.0140  last_data_time: 0.0145   lr: 0.01  max_mem: 10040M
[32m[06/24 17:58:30 d2.utils.events]: [0m eta: 3:11:37  iter: 3779  total_loss: 1.759  loss_fcos_loc: 0.249  loss_fcos_ctr: 0.6219  loss_fcos_vfcls: 0.7623  loss_prj: 0.107  loss_pairwise: 0.02021  loss_mask: 0.02092  loss_mask_affinity: 0.003434    time: 0.8013  last_time: 0.8615  data_time: 0.0157  last_data_time: 0.0097   lr: 0.01  max_mem: 10040M
[32m[06/24 17:58:47 d2.utils.events]: [0m eta: 3:11:17  iter: 3799  total_loss: 1.804  loss_fcos_loc: 0.2532  loss_fcos_ctr: 0.6211  loss_fcos_vfcls: 0.7626  loss_prj: 0.1137  loss_pairwise: 0.02199  loss_mask: 0.02266  loss_mask_affinity: 0.003429    time: 0.8014  last_time: 0.7223  data_time: 0.0168  last_data_time: 0.0177   lr: 0.01  max_mem: 10040M
[32m[06/24 17:59:03 d2.utils.events]: [0m eta: 3:11:06  iter: 3819  total_loss: 1.759  loss_fcos_loc: 0.2365  loss_fcos_ctr: 0.6179  loss_fcos_vfcls: 0.7428  loss_prj: 0.1003  loss_pairwise: 0.02165  loss_mask: 0.02054  loss_mask_affinity: 0.003438    time: 0.8017  last_time: 0.7581  data_time: 0.0157  last_data_time: 0.0179   lr: 0.01  max_mem: 10040M
[32m[06/24 17:59:20 d2.utils.events]: [0m eta: 3:10:52  iter: 3839  total_loss: 1.805  loss_fcos_loc: 0.2337  loss_fcos_ctr: 0.6139  loss_fcos_vfcls: 0.773  loss_prj: 0.1028  loss_pairwise: 0.02075  loss_mask: 0.02032  loss_mask_affinity: 0.003384    time: 0.8017  last_time: 0.7648  data_time: 0.0181  last_data_time: 0.0152   lr: 0.01  max_mem: 10040M
[32m[06/24 17:59:36 d2.utils.events]: [0m eta: 3:10:44  iter: 3859  total_loss: 1.736  loss_fcos_loc: 0.235  loss_fcos_ctr: 0.6182  loss_fcos_vfcls: 0.7364  loss_prj: 0.0988  loss_pairwise: 0.02063  loss_mask: 0.02034  loss_mask_affinity: 0.003591    time: 0.8018  last_time: 0.8407  data_time: 0.0154  last_data_time: 0.0105   lr: 0.01  max_mem: 10040M
[32m[06/24 17:59:53 d2.utils.events]: [0m eta: 3:10:32  iter: 3879  total_loss: 1.728  loss_fcos_loc: 0.2274  loss_fcos_ctr: 0.616  loss_fcos_vfcls: 0.753  loss_prj: 0.09322  loss_pairwise: 0.02009  loss_mask: 0.02025  loss_mask_affinity: 0.00329    time: 0.8019  last_time: 0.8344  data_time: 0.0177  last_data_time: 0.0154   lr: 0.01  max_mem: 10040M
[32m[06/24 18:00:09 d2.utils.events]: [0m eta: 3:10:12  iter: 3899  total_loss: 1.756  loss_fcos_loc: 0.2369  loss_fcos_ctr: 0.6175  loss_fcos_vfcls: 0.7471  loss_prj: 0.0997  loss_pairwise: 0.02156  loss_mask: 0.02061  loss_mask_affinity: 0.003388    time: 0.8020  last_time: 0.8296  data_time: 0.0185  last_data_time: 0.0160   lr: 0.01  max_mem: 10040M
[32m[06/24 18:00:26 d2.utils.events]: [0m eta: 3:10:00  iter: 3919  total_loss: 1.783  loss_fcos_loc: 0.2378  loss_fcos_ctr: 0.6215  loss_fcos_vfcls: 0.7689  loss_prj: 0.1026  loss_pairwise: 0.02161  loss_mask: 0.02095  loss_mask_affinity: 0.00365    time: 0.8021  last_time: 0.8301  data_time: 0.0177  last_data_time: 0.0276   lr: 0.01  max_mem: 10040M
[32m[06/24 18:00:42 d2.utils.events]: [0m eta: 3:09:28  iter: 3939  total_loss: 1.761  loss_fcos_loc: 0.2265  loss_fcos_ctr: 0.6188  loss_fcos_vfcls: 0.7608  loss_prj: 0.09458  loss_pairwise: 0.02181  loss_mask: 0.0204  loss_mask_affinity: 0.003614    time: 0.8021  last_time: 0.7597  data_time: 0.0158  last_data_time: 0.0167   lr: 0.01  max_mem: 10040M
[32m[06/24 18:00:58 d2.utils.events]: [0m eta: 3:09:15  iter: 3959  total_loss: 1.767  loss_fcos_loc: 0.2328  loss_fcos_ctr: 0.6176  loss_fcos_vfcls: 0.7643  loss_prj: 0.1003  loss_pairwise: 0.02256  loss_mask: 0.0215  loss_mask_affinity: 0.003484    time: 0.8022  last_time: 0.8056  data_time: 0.0161  last_data_time: 0.0111   lr: 0.01  max_mem: 10040M
[32m[06/24 18:01:14 d2.utils.events]: [0m eta: 3:08:58  iter: 3979  total_loss: 1.754  loss_fcos_loc: 0.2333  loss_fcos_ctr: 0.6211  loss_fcos_vfcls: 0.7359  loss_prj: 0.1029  loss_pairwise: 0.01999  loss_mask: 0.02244  loss_mask_affinity: 0.003491    time: 0.8022  last_time: 0.8500  data_time: 0.0176  last_data_time: 0.0124   lr: 0.01  max_mem: 10040M
[32m[06/24 18:01:30 d2.utils.events]: [0m eta: 3:08:41  iter: 3999  total_loss: 1.795  loss_fcos_loc: 0.2311  loss_fcos_ctr: 0.6182  loss_fcos_vfcls: 0.7712  loss_prj: 0.1026  loss_pairwise: 0.0222  loss_mask: 0.02187  loss_mask_affinity: 0.003448    time: 0.8022  last_time: 0.8166  data_time: 0.0177  last_data_time: 0.0159   lr: 0.01  max_mem: 10040M
[32m[06/24 18:01:47 d2.utils.events]: [0m eta: 3:08:26  iter: 4019  total_loss: 1.801  loss_fcos_loc: 0.2356  loss_fcos_ctr: 0.6191  loss_fcos_vfcls: 0.791  loss_prj: 0.1009  loss_pairwise: 0.02134  loss_mask: 0.0231  loss_mask_affinity: 0.003474    time: 0.8023  last_time: 0.7276  data_time: 0.0164  last_data_time: 0.0162   lr: 0.01  max_mem: 10040M
[32m[06/24 18:02:03 d2.utils.events]: [0m eta: 3:08:26  iter: 4039  total_loss: 1.774  loss_fcos_loc: 0.2367  loss_fcos_ctr: 0.6191  loss_fcos_vfcls: 0.7638  loss_prj: 0.1008  loss_pairwise: 0.02074  loss_mask: 0.02207  loss_mask_affinity: 0.003569    time: 0.8023  last_time: 0.8806  data_time: 0.0154  last_data_time: 0.0129   lr: 0.01  max_mem: 10040M
[32m[06/24 18:02:19 d2.utils.events]: [0m eta: 3:08:15  iter: 4059  total_loss: 1.783  loss_fcos_loc: 0.248  loss_fcos_ctr: 0.621  loss_fcos_vfcls: 0.7409  loss_prj: 0.1088  loss_pairwise: 0.02241  loss_mask: 0.02231  loss_mask_affinity: 0.003948    time: 0.8024  last_time: 0.9001  data_time: 0.0166  last_data_time: 0.0146   lr: 0.01  max_mem: 10040M
[32m[06/24 18:02:36 d2.utils.events]: [0m eta: 3:07:59  iter: 4079  total_loss: 1.769  loss_fcos_loc: 0.2426  loss_fcos_ctr: 0.6194  loss_fcos_vfcls: 0.7546  loss_prj: 0.1046  loss_pairwise: 0.02171  loss_mask: 0.02285  loss_mask_affinity: 0.00371    time: 0.8025  last_time: 0.9982  data_time: 0.0158  last_data_time: 0.0116   lr: 0.01  max_mem: 10040M
[32m[06/24 18:02:52 d2.utils.events]: [0m eta: 3:07:38  iter: 4099  total_loss: 1.742  loss_fcos_loc: 0.2302  loss_fcos_ctr: 0.6188  loss_fcos_vfcls: 0.7513  loss_prj: 0.1029  loss_pairwise: 0.02102  loss_mask: 0.02176  loss_mask_affinity: 0.003597    time: 0.8026  last_time: 0.8572  data_time: 0.0180  last_data_time: 0.0188   lr: 0.01  max_mem: 10040M
[32m[06/24 18:03:09 d2.utils.events]: [0m eta: 3:07:25  iter: 4119  total_loss: 1.789  loss_fcos_loc: 0.2287  loss_fcos_ctr: 0.6178  loss_fcos_vfcls: 0.7691  loss_prj: 0.09753  loss_pairwise: 0.02043  loss_mask: 0.02294  loss_mask_affinity: 0.003576    time: 0.8027  last_time: 0.7456  data_time: 0.0159  last_data_time: 0.0144   lr: 0.01  max_mem: 10040M
[32m[06/24 18:03:24 d2.utils.events]: [0m eta: 3:06:57  iter: 4139  total_loss: 1.759  loss_fcos_loc: 0.2315  loss_fcos_ctr: 0.6186  loss_fcos_vfcls: 0.763  loss_prj: 0.09857  loss_pairwise: 0.02219  loss_mask: 0.0221  loss_mask_affinity: 0.003811    time: 0.8026  last_time: 0.9118  data_time: 0.0162  last_data_time: 0.0127   lr: 0.01  max_mem: 10040M
[32m[06/24 18:03:41 d2.utils.events]: [0m eta: 3:06:53  iter: 4159  total_loss: 1.745  loss_fcos_loc: 0.2333  loss_fcos_ctr: 0.6186  loss_fcos_vfcls: 0.7419  loss_prj: 0.09881  loss_pairwise: 0.02116  loss_mask: 0.02128  loss_mask_affinity: 0.003951    time: 0.8028  last_time: 0.8250  data_time: 0.0158  last_data_time: 0.0089   lr: 0.01  max_mem: 10040M
[32m[06/24 18:03:58 d2.utils.events]: [0m eta: 3:06:41  iter: 4179  total_loss: 1.78  loss_fcos_loc: 0.2245  loss_fcos_ctr: 0.6192  loss_fcos_vfcls: 0.7751  loss_prj: 0.09291  loss_pairwise: 0.02114  loss_mask: 0.02213  loss_mask_affinity: 0.003597    time: 0.8029  last_time: 0.7085  data_time: 0.0158  last_data_time: 0.0104   lr: 0.01  max_mem: 10040M
[32m[06/24 18:04:14 d2.utils.events]: [0m eta: 3:06:32  iter: 4199  total_loss: 1.781  loss_fcos_loc: 0.2396  loss_fcos_ctr: 0.616  loss_fcos_vfcls: 0.7757  loss_prj: 0.1049  loss_pairwise: 0.02245  loss_mask: 0.02333  loss_mask_affinity: 0.003824    time: 0.8030  last_time: 0.9252  data_time: 0.0176  last_data_time: 0.0199   lr: 0.01  max_mem: 10040M
[32m[06/24 18:04:30 d2.utils.events]: [0m eta: 3:06:15  iter: 4219  total_loss: 1.737  loss_fcos_loc: 0.2192  loss_fcos_ctr: 0.6138  loss_fcos_vfcls: 0.7807  loss_prj: 0.09437  loss_pairwise: 0.02391  loss_mask: 0.02209  loss_mask_affinity: 0.003782    time: 0.8030  last_time: 0.7270  data_time: 0.0151  last_data_time: 0.0149   lr: 0.01  max_mem: 10040M
[32m[06/24 18:04:47 d2.utils.events]: [0m eta: 3:06:00  iter: 4239  total_loss: 1.742  loss_fcos_loc: 0.2253  loss_fcos_ctr: 0.6155  loss_fcos_vfcls: 0.7528  loss_prj: 0.09523  loss_pairwise: 0.02259  loss_mask: 0.02311  loss_mask_affinity: 0.003585    time: 0.8031  last_time: 0.7740  data_time: 0.0180  last_data_time: 0.0180   lr: 0.01  max_mem: 10040M
[32m[06/24 18:05:03 d2.utils.events]: [0m eta: 3:05:41  iter: 4259  total_loss: 1.754  loss_fcos_loc: 0.2219  loss_fcos_ctr: 0.6205  loss_fcos_vfcls: 0.7573  loss_prj: 0.09476  loss_pairwise: 0.02209  loss_mask: 0.02263  loss_mask_affinity: 0.003604    time: 0.8031  last_time: 0.9065  data_time: 0.0166  last_data_time: 0.0195   lr: 0.01  max_mem: 10040M
[32m[06/24 18:05:19 d2.utils.events]: [0m eta: 3:05:21  iter: 4279  total_loss: 1.776  loss_fcos_loc: 0.2306  loss_fcos_ctr: 0.6173  loss_fcos_vfcls: 0.7541  loss_prj: 0.09863  loss_pairwise: 0.02281  loss_mask: 0.02355  loss_mask_affinity: 0.003655    time: 0.8032  last_time: 0.8894  data_time: 0.0145  last_data_time: 0.0135   lr: 0.01  max_mem: 10040M
[32m[06/24 18:05:36 d2.utils.events]: [0m eta: 3:05:27  iter: 4299  total_loss: 1.732  loss_fcos_loc: 0.2427  loss_fcos_ctr: 0.6218  loss_fcos_vfcls: 0.7138  loss_prj: 0.1034  loss_pairwise: 0.02261  loss_mask: 0.02277  loss_mask_affinity: 0.003978    time: 0.8034  last_time: 0.7538  data_time: 0.0155  last_data_time: 0.0171   lr: 0.01  max_mem: 10040M
[32m[06/24 18:05:53 d2.utils.events]: [0m eta: 3:05:17  iter: 4319  total_loss: 1.731  loss_fcos_loc: 0.2361  loss_fcos_ctr: 0.6178  loss_fcos_vfcls: 0.7275  loss_prj: 0.0962  loss_pairwise: 0.02317  loss_mask: 0.02334  loss_mask_affinity: 0.003761    time: 0.8035  last_time: 0.7971  data_time: 0.0175  last_data_time: 0.0126   lr: 0.01  max_mem: 10040M
[32m[06/24 18:06:10 d2.utils.events]: [0m eta: 3:05:16  iter: 4339  total_loss: 1.75  loss_fcos_loc: 0.2376  loss_fcos_ctr: 0.6163  loss_fcos_vfcls: 0.7436  loss_prj: 0.09651  loss_pairwise: 0.02281  loss_mask: 0.02213  loss_mask_affinity: 0.003765    time: 0.8037  last_time: 0.8927  data_time: 0.0153  last_data_time: 0.0147   lr: 0.01  max_mem: 10040M
[32m[06/24 18:06:27 d2.utils.events]: [0m eta: 3:05:07  iter: 4359  total_loss: 1.746  loss_fcos_loc: 0.2459  loss_fcos_ctr: 0.6192  loss_fcos_vfcls: 0.7277  loss_prj: 0.09799  loss_pairwise: 0.0228  loss_mask: 0.02464  loss_mask_affinity: 0.003868    time: 0.8039  last_time: 0.7953  data_time: 0.0178  last_data_time: 0.0150   lr: 0.01  max_mem: 10040M
[32m[06/24 18:06:43 d2.utils.events]: [0m eta: 3:04:52  iter: 4379  total_loss: 1.722  loss_fcos_loc: 0.2177  loss_fcos_ctr: 0.6114  loss_fcos_vfcls: 0.7442  loss_prj: 0.09157  loss_pairwise: 0.02332  loss_mask: 0.02249  loss_mask_affinity: 0.003786    time: 0.8040  last_time: 0.8208  data_time: 0.0181  last_data_time: 0.0385   lr: 0.01  max_mem: 10040M
[32m[06/24 18:06:59 d2.utils.events]: [0m eta: 3:04:31  iter: 4399  total_loss: 1.738  loss_fcos_loc: 0.2269  loss_fcos_ctr: 0.6157  loss_fcos_vfcls: 0.7415  loss_prj: 0.09983  loss_pairwise: 0.022  loss_mask: 0.02254  loss_mask_affinity: 0.003984    time: 0.8039  last_time: 0.8195  data_time: 0.0200  last_data_time: 0.0311   lr: 0.01  max_mem: 10040M
[32m[06/24 18:07:15 d2.utils.events]: [0m eta: 3:04:18  iter: 4419  total_loss: 1.729  loss_fcos_loc: 0.2281  loss_fcos_ctr: 0.6153  loss_fcos_vfcls: 0.7503  loss_prj: 0.0958  loss_pairwise: 0.02319  loss_mask: 0.0227  loss_mask_affinity: 0.003789    time: 0.8040  last_time: 0.7277  data_time: 0.0149  last_data_time: 0.0089   lr: 0.01  max_mem: 10040M
[32m[06/24 18:07:31 d2.utils.events]: [0m eta: 3:04:01  iter: 4439  total_loss: 1.771  loss_fcos_loc: 0.2269  loss_fcos_ctr: 0.6171  loss_fcos_vfcls: 0.7749  loss_prj: 0.09867  loss_pairwise: 0.02293  loss_mask: 0.02363  loss_mask_affinity: 0.003875    time: 0.8040  last_time: 0.7747  data_time: 0.0149  last_data_time: 0.0170   lr: 0.01  max_mem: 10040M
[32m[06/24 18:07:48 d2.utils.events]: [0m eta: 3:03:47  iter: 4459  total_loss: 1.753  loss_fcos_loc: 0.2287  loss_fcos_ctr: 0.6189  loss_fcos_vfcls: 0.7326  loss_prj: 0.09833  loss_pairwise: 0.02334  loss_mask: 0.02349  loss_mask_affinity: 0.004029    time: 0.8040  last_time: 0.7810  data_time: 0.0159  last_data_time: 0.0149   lr: 0.01  max_mem: 10040M
[32m[06/24 18:08:04 d2.utils.events]: [0m eta: 3:03:31  iter: 4479  total_loss: 1.704  loss_fcos_loc: 0.2171  loss_fcos_ctr: 0.6175  loss_fcos_vfcls: 0.7284  loss_prj: 0.08806  loss_pairwise: 0.02203  loss_mask: 0.0221  loss_mask_affinity: 0.0038    time: 0.8041  last_time: 0.8118  data_time: 0.0177  last_data_time: 0.0211   lr: 0.01  max_mem: 10040M
[32m[06/24 18:08:21 d2.utils.events]: [0m eta: 3:03:14  iter: 4499  total_loss: 1.761  loss_fcos_loc: 0.227  loss_fcos_ctr: 0.6166  loss_fcos_vfcls: 0.7686  loss_prj: 0.09493  loss_pairwise: 0.02164  loss_mask: 0.02319  loss_mask_affinity: 0.003797    time: 0.8041  last_time: 0.7823  data_time: 0.0154  last_data_time: 0.0156   lr: 0.01  max_mem: 10040M
[32m[06/24 18:08:37 d2.utils.events]: [0m eta: 3:03:01  iter: 4519  total_loss: 1.697  loss_fcos_loc: 0.2245  loss_fcos_ctr: 0.6148  loss_fcos_vfcls: 0.7239  loss_prj: 0.09321  loss_pairwise: 0.02515  loss_mask: 0.02203  loss_mask_affinity: 0.003795    time: 0.8042  last_time: 0.8279  data_time: 0.0168  last_data_time: 0.0125   lr: 0.01  max_mem: 10040M
[32m[06/24 18:08:54 d2.utils.events]: [0m eta: 3:02:54  iter: 4539  total_loss: 1.776  loss_fcos_loc: 0.2358  loss_fcos_ctr: 0.6203  loss_fcos_vfcls: 0.7463  loss_prj: 0.1094  loss_pairwise: 0.02262  loss_mask: 0.02619  loss_mask_affinity: 0.004096    time: 0.8043  last_time: 0.8635  data_time: 0.0160  last_data_time: 0.0201   lr: 0.01  max_mem: 10040M
[32m[06/24 18:09:10 d2.utils.events]: [0m eta: 3:02:31  iter: 4559  total_loss: 1.794  loss_fcos_loc: 0.2377  loss_fcos_ctr: 0.6196  loss_fcos_vfcls: 0.7693  loss_prj: 0.1015  loss_pairwise: 0.02357  loss_mask: 0.02352  loss_mask_affinity: 0.003966    time: 0.8044  last_time: 0.8163  data_time: 0.0161  last_data_time: 0.0136   lr: 0.01  max_mem: 10040M
[32m[06/24 18:09:27 d2.utils.events]: [0m eta: 3:02:12  iter: 4579  total_loss: 1.758  loss_fcos_loc: 0.2192  loss_fcos_ctr: 0.6158  loss_fcos_vfcls: 0.7491  loss_prj: 0.09916  loss_pairwise: 0.02368  loss_mask: 0.02428  loss_mask_affinity: 0.004239    time: 0.8045  last_time: 0.8040  data_time: 0.0168  last_data_time: 0.0217   lr: 0.01  max_mem: 10040M
[32m[06/24 18:09:43 d2.utils.events]: [0m eta: 3:02:05  iter: 4599  total_loss: 1.773  loss_fcos_loc: 0.2297  loss_fcos_ctr: 0.6165  loss_fcos_vfcls: 0.7559  loss_prj: 0.09677  loss_pairwise: 0.02373  loss_mask: 0.02232  loss_mask_affinity: 0.003919    time: 0.8046  last_time: 0.8629  data_time: 0.0153  last_data_time: 0.0123   lr: 0.01  max_mem: 10040M
[32m[06/24 18:10:00 d2.utils.events]: [0m eta: 3:01:51  iter: 4619  total_loss: 1.759  loss_fcos_loc: 0.2268  loss_fcos_ctr: 0.6164  loss_fcos_vfcls: 0.7769  loss_prj: 0.09739  loss_pairwise: 0.02451  loss_mask: 0.02477  loss_mask_affinity: 0.004001    time: 0.8047  last_time: 0.8411  data_time: 0.0153  last_data_time: 0.0172   lr: 0.01  max_mem: 10040M
[32m[06/24 18:10:16 d2.utils.events]: [0m eta: 3:01:19  iter: 4639  total_loss: 1.739  loss_fcos_loc: 0.2291  loss_fcos_ctr: 0.6197  loss_fcos_vfcls: 0.7489  loss_prj: 0.09851  loss_pairwise: 0.02249  loss_mask: 0.02512  loss_mask_affinity: 0.003877    time: 0.8048  last_time: 0.8890  data_time: 0.0164  last_data_time: 0.0157   lr: 0.01  max_mem: 10040M
[32m[06/24 18:10:32 d2.utils.events]: [0m eta: 3:01:09  iter: 4659  total_loss: 1.725  loss_fcos_loc: 0.2191  loss_fcos_ctr: 0.6177  loss_fcos_vfcls: 0.7342  loss_prj: 0.09846  loss_pairwise: 0.0235  loss_mask: 0.02379  loss_mask_affinity: 0.00399    time: 0.8048  last_time: 0.8284  data_time: 0.0152  last_data_time: 0.0118   lr: 0.01  max_mem: 10040M
[32m[06/24 18:10:49 d2.utils.events]: [0m eta: 3:01:09  iter: 4679  total_loss: 1.77  loss_fcos_loc: 0.2428  loss_fcos_ctr: 0.6205  loss_fcos_vfcls: 0.7323  loss_prj: 0.1032  loss_pairwise: 0.02388  loss_mask: 0.02614  loss_mask_affinity: 0.004092    time: 0.8049  last_time: 0.8947  data_time: 0.0168  last_data_time: 0.0079   lr: 0.01  max_mem: 10040M
[32m[06/24 18:11:05 d2.utils.events]: [0m eta: 3:00:56  iter: 4699  total_loss: 1.739  loss_fcos_loc: 0.2257  loss_fcos_ctr: 0.6171  loss_fcos_vfcls: 0.7278  loss_prj: 0.09269  loss_pairwise: 0.02307  loss_mask: 0.02529  loss_mask_affinity: 0.003833    time: 0.8049  last_time: 0.8283  data_time: 0.0164  last_data_time: 0.0132   lr: 0.01  max_mem: 10040M
[32m[06/24 18:11:22 d2.utils.events]: [0m eta: 3:00:40  iter: 4719  total_loss: 1.731  loss_fcos_loc: 0.2241  loss_fcos_ctr: 0.6179  loss_fcos_vfcls: 0.7307  loss_prj: 0.09228  loss_pairwise: 0.02396  loss_mask: 0.02576  loss_mask_affinity: 0.004024    time: 0.8050  last_time: 0.8994  data_time: 0.0151  last_data_time: 0.0094   lr: 0.01  max_mem: 10040M
[32m[06/24 18:11:38 d2.utils.events]: [0m eta: 3:00:26  iter: 4739  total_loss: 1.713  loss_fcos_loc: 0.2292  loss_fcos_ctr: 0.6205  loss_fcos_vfcls: 0.7218  loss_prj: 0.0984  loss_pairwise: 0.02409  loss_mask: 0.02505  loss_mask_affinity: 0.004292    time: 0.8050  last_time: 0.7246  data_time: 0.0156  last_data_time: 0.0135   lr: 0.01  max_mem: 10040M
[32m[06/24 18:11:54 d2.utils.events]: [0m eta: 2:59:57  iter: 4759  total_loss: 1.734  loss_fcos_loc: 0.2244  loss_fcos_ctr: 0.6171  loss_fcos_vfcls: 0.7392  loss_prj: 0.09764  loss_pairwise: 0.02348  loss_mask: 0.02412  loss_mask_affinity: 0.004065    time: 0.8050  last_time: 0.7880  data_time: 0.0151  last_data_time: 0.0171   lr: 0.01  max_mem: 10040M
[32m[06/24 18:12:11 d2.utils.events]: [0m eta: 2:59:29  iter: 4779  total_loss: 1.701  loss_fcos_loc: 0.2179  loss_fcos_ctr: 0.6162  loss_fcos_vfcls: 0.7243  loss_prj: 0.09523  loss_pairwise: 0.02407  loss_mask: 0.02364  loss_mask_affinity: 0.004472    time: 0.8051  last_time: 0.8153  data_time: 0.0174  last_data_time: 0.0173   lr: 0.01  max_mem: 10040M
[32m[06/24 18:12:27 d2.utils.events]: [0m eta: 2:59:20  iter: 4799  total_loss: 1.743  loss_fcos_loc: 0.2204  loss_fcos_ctr: 0.62  loss_fcos_vfcls: 0.74  loss_prj: 0.09208  loss_pairwise: 0.02504  loss_mask: 0.02601  loss_mask_affinity: 0.0042    time: 0.8052  last_time: 0.8262  data_time: 0.0168  last_data_time: 0.0228   lr: 0.01  max_mem: 10040M
[32m[06/24 18:12:44 d2.utils.events]: [0m eta: 2:58:45  iter: 4819  total_loss: 1.749  loss_fcos_loc: 0.2286  loss_fcos_ctr: 0.6185  loss_fcos_vfcls: 0.7405  loss_prj: 0.1022  loss_pairwise: 0.02444  loss_mask: 0.02765  loss_mask_affinity: 0.004064    time: 0.8053  last_time: 0.7881  data_time: 0.0157  last_data_time: 0.0112   lr: 0.01  max_mem: 10040M
[32m[06/24 18:13:00 d2.utils.events]: [0m eta: 2:58:35  iter: 4839  total_loss: 1.742  loss_fcos_loc: 0.2296  loss_fcos_ctr: 0.6178  loss_fcos_vfcls: 0.7515  loss_prj: 0.09879  loss_pairwise: 0.02461  loss_mask: 0.02527  loss_mask_affinity: 0.004232    time: 0.8053  last_time: 0.8042  data_time: 0.0143  last_data_time: 0.0092   lr: 0.01  max_mem: 10040M
[32m[06/24 18:13:17 d2.utils.events]: [0m eta: 2:58:03  iter: 4859  total_loss: 1.702  loss_fcos_loc: 0.2239  loss_fcos_ctr: 0.6148  loss_fcos_vfcls: 0.7235  loss_prj: 0.09163  loss_pairwise: 0.02242  loss_mask: 0.02339  loss_mask_affinity: 0.004166    time: 0.8053  last_time: 0.9129  data_time: 0.0176  last_data_time: 0.0169   lr: 0.01  max_mem: 10040M
[32m[06/24 18:13:33 d2.utils.events]: [0m eta: 2:57:39  iter: 4879  total_loss: 1.742  loss_fcos_loc: 0.2362  loss_fcos_ctr: 0.6195  loss_fcos_vfcls: 0.7273  loss_prj: 0.09847  loss_pairwise: 0.02447  loss_mask: 0.02605  loss_mask_affinity: 0.004263    time: 0.8053  last_time: 0.7906  data_time: 0.0170  last_data_time: 0.0123   lr: 0.01  max_mem: 10040M
[32m[06/24 18:13:49 d2.utils.events]: [0m eta: 2:57:28  iter: 4899  total_loss: 1.726  loss_fcos_loc: 0.2278  loss_fcos_ctr: 0.6152  loss_fcos_vfcls: 0.7279  loss_prj: 0.09153  loss_pairwise: 0.02333  loss_mask: 0.02432  loss_mask_affinity: 0.004104    time: 0.8054  last_time: 0.9092  data_time: 0.0185  last_data_time: 0.0151   lr: 0.01  max_mem: 10040M
[32m[06/24 18:14:05 d2.utils.events]: [0m eta: 2:57:12  iter: 4919  total_loss: 1.729  loss_fcos_loc: 0.2234  loss_fcos_ctr: 0.6183  loss_fcos_vfcls: 0.7343  loss_prj: 0.09518  loss_pairwise: 0.02385  loss_mask: 0.02467  loss_mask_affinity: 0.004099    time: 0.8054  last_time: 0.8543  data_time: 0.0156  last_data_time: 0.0166   lr: 0.01  max_mem: 10040M
[32m[06/24 18:14:22 d2.utils.events]: [0m eta: 2:57:04  iter: 4939  total_loss: 1.737  loss_fcos_loc: 0.2278  loss_fcos_ctr: 0.6175  loss_fcos_vfcls: 0.7249  loss_prj: 0.09926  loss_pairwise: 0.02597  loss_mask: 0.02632  loss_mask_affinity: 0.00425    time: 0.8054  last_time: 0.8105  data_time: 0.0155  last_data_time: 0.0182   lr: 0.01  max_mem: 10040M
[32m[06/24 18:14:38 d2.utils.events]: [0m eta: 2:56:51  iter: 4959  total_loss: 1.718  loss_fcos_loc: 0.2266  loss_fcos_ctr: 0.6181  loss_fcos_vfcls: 0.727  loss_prj: 0.09766  loss_pairwise: 0.02542  loss_mask: 0.02389  loss_mask_affinity: 0.004482    time: 0.8055  last_time: 0.8321  data_time: 0.0170  last_data_time: 0.0166   lr: 0.01  max_mem: 10040M
[32m[06/24 18:14:54 d2.utils.events]: [0m eta: 2:56:35  iter: 4979  total_loss: 1.772  loss_fcos_loc: 0.239  loss_fcos_ctr: 0.6205  loss_fcos_vfcls: 0.7393  loss_prj: 0.1035  loss_pairwise: 0.02299  loss_mask: 0.02587  loss_mask_affinity: 0.004392    time: 0.8055  last_time: 0.8762  data_time: 0.0159  last_data_time: 0.0187   lr: 0.01  max_mem: 10040M
[32m[06/24 18:15:11 fvcore.common.checkpoint]: [0mSaving checkpoint to /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_1x/model_0004999.pth
[32m[06/24 18:15:11 d2.utils.events]: [0m eta: 2:56:25  iter: 4999  total_loss: 1.768  loss_fcos_loc: 0.229  loss_fcos_ctr: 0.6172  loss_fcos_vfcls: 0.7309  loss_prj: 0.09512  loss_pairwise: 0.02538  loss_mask: 0.02688  loss_mask_affinity: 0.004519    time: 0.8055  last_time: 0.7958  data_time: 0.0172  last_data_time: 0.0148   lr: 0.01  max_mem: 10040M
[32m[06/24 18:15:27 d2.utils.events]: [0m eta: 2:56:01  iter: 5019  total_loss: 1.734  loss_fcos_loc: 0.2297  loss_fcos_ctr: 0.619  loss_fcos_vfcls: 0.7331  loss_prj: 0.09825  loss_pairwise: 0.02446  loss_mask: 0.02501  loss_mask_affinity: 0.004478    time: 0.8055  last_time: 0.7931  data_time: 0.0176  last_data_time: 0.0193   lr: 0.01  max_mem: 10040M
[32m[06/24 18:15:44 d2.utils.events]: [0m eta: 2:55:48  iter: 5039  total_loss: 1.772  loss_fcos_loc: 0.2421  loss_fcos_ctr: 0.6216  loss_fcos_vfcls: 0.7359  loss_prj: 0.1053  loss_pairwise: 0.02455  loss_mask: 0.02907  loss_mask_affinity: 0.004519    time: 0.8057  last_time: 0.7481  data_time: 0.0170  last_data_time: 0.0181   lr: 0.01  max_mem: 10040M
[32m[06/24 18:16:01 d2.utils.events]: [0m eta: 2:55:36  iter: 5059  total_loss: 1.772  loss_fcos_loc: 0.2314  loss_fcos_ctr: 0.6188  loss_fcos_vfcls: 0.7539  loss_prj: 0.1035  loss_pairwise: 0.02435  loss_mask: 0.02777  loss_mask_affinity: 0.004182    time: 0.8057  last_time: 0.8270  data_time: 0.0166  last_data_time: 0.0087   lr: 0.01  max_mem: 10040M
[32m[06/24 18:16:17 d2.utils.events]: [0m eta: 2:55:24  iter: 5079  total_loss: 1.751  loss_fcos_loc: 0.2296  loss_fcos_ctr: 0.6183  loss_fcos_vfcls: 0.7376  loss_prj: 0.09528  loss_pairwise: 0.02354  loss_mask: 0.02697  loss_mask_affinity: 0.004282    time: 0.8057  last_time: 0.9304  data_time: 0.0147  last_data_time: 0.0118   lr: 0.01  max_mem: 10040M
[32m[06/24 18:16:33 d2.utils.events]: [0m eta: 2:55:03  iter: 5099  total_loss: 1.756  loss_fcos_loc: 0.2219  loss_fcos_ctr: 0.6205  loss_fcos_vfcls: 0.7495  loss_prj: 0.09701  loss_pairwise: 0.02583  loss_mask: 0.02546  loss_mask_affinity: 0.004539    time: 0.8057  last_time: 0.8056  data_time: 0.0163  last_data_time: 0.0137   lr: 0.01  max_mem: 10040M
[32m[06/24 18:16:50 d2.utils.events]: [0m eta: 2:54:43  iter: 5119  total_loss: 1.749  loss_fcos_loc: 0.2337  loss_fcos_ctr: 0.6222  loss_fcos_vfcls: 0.7327  loss_prj: 0.1022  loss_pairwise: 0.02481  loss_mask: 0.02522  loss_mask_affinity: 0.00432    time: 0.8058  last_time: 0.8497  data_time: 0.0161  last_data_time: 0.0120   lr: 0.01  max_mem: 10040M
[32m[06/24 18:17:06 d2.utils.events]: [0m eta: 2:54:49  iter: 5139  total_loss: 1.76  loss_fcos_loc: 0.2349  loss_fcos_ctr: 0.6216  loss_fcos_vfcls: 0.7465  loss_prj: 0.1086  loss_pairwise: 0.02462  loss_mask: 0.02681  loss_mask_affinity: 0.004611    time: 0.8059  last_time: 0.7994  data_time: 0.0142  last_data_time: 0.0142   lr: 0.01  max_mem: 10040M
[32m[06/24 18:17:22 d2.utils.events]: [0m eta: 2:54:14  iter: 5159  total_loss: 1.705  loss_fcos_loc: 0.2263  loss_fcos_ctr: 0.6164  loss_fcos_vfcls: 0.7193  loss_prj: 0.09372  loss_pairwise: 0.02402  loss_mask: 0.02628  loss_mask_affinity: 0.004279    time: 0.8059  last_time: 0.7750  data_time: 0.0146  last_data_time: 0.0199   lr: 0.01  max_mem: 10040M
[32m[06/24 18:17:38 d2.utils.events]: [0m eta: 2:53:58  iter: 5179  total_loss: 1.703  loss_fcos_loc: 0.2156  loss_fcos_ctr: 0.6174  loss_fcos_vfcls: 0.7127  loss_prj: 0.09152  loss_pairwise: 0.02614  loss_mask: 0.02608  loss_mask_affinity: 0.004418    time: 0.8059  last_time: 0.9419  data_time: 0.0154  last_data_time: 0.0127   lr: 0.01  max_mem: 10040M
[32m[06/24 18:17:55 d2.utils.events]: [0m eta: 2:53:27  iter: 5199  total_loss: 1.711  loss_fcos_loc: 0.2248  loss_fcos_ctr: 0.6197  loss_fcos_vfcls: 0.717  loss_prj: 0.0972  loss_pairwise: 0.02352  loss_mask: 0.02605  loss_mask_affinity: 0.004556    time: 0.8060  last_time: 0.8928  data_time: 0.0143  last_data_time: 0.0123   lr: 0.01  max_mem: 10040M
[32m[06/24 18:18:11 d2.utils.events]: [0m eta: 2:53:32  iter: 5219  total_loss: 1.716  loss_fcos_loc: 0.2247  loss_fcos_ctr: 0.6164  loss_fcos_vfcls: 0.7137  loss_prj: 0.09172  loss_pairwise: 0.02519  loss_mask: 0.02563  loss_mask_affinity: 0.004486    time: 0.8060  last_time: 0.7624  data_time: 0.0164  last_data_time: 0.0137   lr: 0.01  max_mem: 10040M
[32m[06/24 18:18:27 d2.utils.events]: [0m eta: 2:53:09  iter: 5239  total_loss: 1.699  loss_fcos_loc: 0.2116  loss_fcos_ctr: 0.6159  loss_fcos_vfcls: 0.7285  loss_prj: 0.09094  loss_pairwise: 0.02555  loss_mask: 0.02617  loss_mask_affinity: 0.004592    time: 0.8060  last_time: 0.8064  data_time: 0.0149  last_data_time: 0.0247   lr: 0.01  max_mem: 10040M
[32m[06/24 18:18:44 d2.utils.events]: [0m eta: 2:52:53  iter: 5259  total_loss: 1.721  loss_fcos_loc: 0.231  loss_fcos_ctr: 0.6141  loss_fcos_vfcls: 0.6981  loss_prj: 0.09724  loss_pairwise: 0.02382  loss_mask: 0.02729  loss_mask_affinity: 0.004631    time: 0.8061  last_time: 0.7308  data_time: 0.0146  last_data_time: 0.0140   lr: 0.01  max_mem: 10040M
[32m[06/24 18:19:01 d2.utils.events]: [0m eta: 2:52:37  iter: 5279  total_loss: 1.741  loss_fcos_loc: 0.2357  loss_fcos_ctr: 0.6185  loss_fcos_vfcls: 0.715  loss_prj: 0.101  loss_pairwise: 0.0257  loss_mask: 0.02776  loss_mask_affinity: 0.004776    time: 0.8062  last_time: 1.2638  data_time: 0.0156  last_data_time: 0.0148   lr: 0.01  max_mem: 10040M
[32m[06/24 18:19:17 d2.utils.events]: [0m eta: 2:51:55  iter: 5299  total_loss: 1.708  loss_fcos_loc: 0.2243  loss_fcos_ctr: 0.6169  loss_fcos_vfcls: 0.7077  loss_prj: 0.09622  loss_pairwise: 0.02479  loss_mask: 0.02706  loss_mask_affinity: 0.004534    time: 0.8061  last_time: 0.7924  data_time: 0.0177  last_data_time: 0.0350   lr: 0.01  max_mem: 10040M
[32m[06/24 18:19:33 d2.utils.events]: [0m eta: 2:51:38  iter: 5319  total_loss: 1.7  loss_fcos_loc: 0.2254  loss_fcos_ctr: 0.6174  loss_fcos_vfcls: 0.7075  loss_prj: 0.09645  loss_pairwise: 0.02518  loss_mask: 0.02654  loss_mask_affinity: 0.004359    time: 0.8062  last_time: 0.8349  data_time: 0.0147  last_data_time: 0.0249   lr: 0.01  max_mem: 10040M
[32m[06/24 18:19:49 d2.utils.events]: [0m eta: 2:51:17  iter: 5339  total_loss: 1.779  loss_fcos_loc: 0.2336  loss_fcos_ctr: 0.6166  loss_fcos_vfcls: 0.7679  loss_prj: 0.09768  loss_pairwise: 0.02649  loss_mask: 0.02707  loss_mask_affinity: 0.004653    time: 0.8062  last_time: 0.6795  data_time: 0.0169  last_data_time: 0.0144   lr: 0.01  max_mem: 10040M
[32m[06/24 18:20:05 d2.utils.events]: [0m eta: 2:50:50  iter: 5359  total_loss: 1.702  loss_fcos_loc: 0.2206  loss_fcos_ctr: 0.6187  loss_fcos_vfcls: 0.7292  loss_prj: 0.09531  loss_pairwise: 0.02497  loss_mask: 0.02581  loss_mask_affinity: 0.004705    time: 0.8061  last_time: 0.7855  data_time: 0.0155  last_data_time: 0.0124   lr: 0.01  max_mem: 10040M
[32m[06/24 18:20:21 d2.utils.events]: [0m eta: 2:50:29  iter: 5379  total_loss: 1.709  loss_fcos_loc: 0.2181  loss_fcos_ctr: 0.6147  loss_fcos_vfcls: 0.7082  loss_prj: 0.09422  loss_pairwise: 0.02522  loss_mask: 0.02663  loss_mask_affinity: 0.004532    time: 0.8061  last_time: 0.7954  data_time: 0.0142  last_data_time: 0.0139   lr: 0.01  max_mem: 10040M
[32m[06/24 18:20:38 d2.utils.events]: [0m eta: 2:50:23  iter: 5399  total_loss: 1.728  loss_fcos_loc: 0.2335  loss_fcos_ctr: 0.6205  loss_fcos_vfcls: 0.7105  loss_prj: 0.09404  loss_pairwise: 0.02624  loss_mask: 0.02831  loss_mask_affinity: 0.004819    time: 0.8061  last_time: 0.7232  data_time: 0.0145  last_data_time: 0.0136   lr: 0.01  max_mem: 10040M
[32m[06/24 18:20:54 d2.utils.events]: [0m eta: 2:49:57  iter: 5419  total_loss: 1.743  loss_fcos_loc: 0.222  loss_fcos_ctr: 0.6184  loss_fcos_vfcls: 0.7453  loss_prj: 0.09808  loss_pairwise: 0.02508  loss_mask: 0.02726  loss_mask_affinity: 0.004422    time: 0.8061  last_time: 0.7559  data_time: 0.0143  last_data_time: 0.0142   lr: 0.01  max_mem: 10040M
[32m[06/24 18:21:10 d2.utils.events]: [0m eta: 2:49:48  iter: 5439  total_loss: 1.728  loss_fcos_loc: 0.2213  loss_fcos_ctr: 0.6156  loss_fcos_vfcls: 0.7025  loss_prj: 0.09758  loss_pairwise: 0.02427  loss_mask: 0.0295  loss_mask_affinity: 0.004467    time: 0.8061  last_time: 0.8452  data_time: 0.0145  last_data_time: 0.0152   lr: 0.01  max_mem: 10040M
[32m[06/24 18:21:26 d2.utils.events]: [0m eta: 2:49:26  iter: 5459  total_loss: 1.735  loss_fcos_loc: 0.223  loss_fcos_ctr: 0.6214  loss_fcos_vfcls: 0.7277  loss_prj: 0.09575  loss_pairwise: 0.02549  loss_mask: 0.02753  loss_mask_affinity: 0.004843    time: 0.8062  last_time: 0.7711  data_time: 0.0145  last_data_time: 0.0166   lr: 0.01  max_mem: 10040M
[32m[06/24 18:21:43 d2.utils.events]: [0m eta: 2:49:08  iter: 5479  total_loss: 1.733  loss_fcos_loc: 0.2147  loss_fcos_ctr: 0.6167  loss_fcos_vfcls: 0.7445  loss_prj: 0.09692  loss_pairwise: 0.025  loss_mask: 0.02652  loss_mask_affinity: 0.004484    time: 0.8062  last_time: 1.0377  data_time: 0.0173  last_data_time: 0.0195   lr: 0.01  max_mem: 10040M
[32m[06/24 18:21:58 d2.utils.events]: [0m eta: 2:48:50  iter: 5499  total_loss: 1.72  loss_fcos_loc: 0.2146  loss_fcos_ctr: 0.6195  loss_fcos_vfcls: 0.724  loss_prj: 0.09487  loss_pairwise: 0.02441  loss_mask: 0.0281  loss_mask_affinity: 0.004808    time: 0.8062  last_time: 0.7717  data_time: 0.0149  last_data_time: 0.0125   lr: 0.01  max_mem: 10040M
[32m[06/24 18:22:15 d2.utils.events]: [0m eta: 2:48:33  iter: 5519  total_loss: 1.739  loss_fcos_loc: 0.2258  loss_fcos_ctr: 0.6192  loss_fcos_vfcls: 0.7301  loss_prj: 0.1024  loss_pairwise: 0.02798  loss_mask: 0.03028  loss_mask_affinity: 0.004864    time: 0.8062  last_time: 0.8094  data_time: 0.0160  last_data_time: 0.0152   lr: 0.01  max_mem: 10040M
[32m[06/24 18:22:31 d2.utils.events]: [0m eta: 2:48:14  iter: 5539  total_loss: 1.719  loss_fcos_loc: 0.2148  loss_fcos_ctr: 0.6138  loss_fcos_vfcls: 0.7294  loss_prj: 0.09459  loss_pairwise: 0.02498  loss_mask: 0.02935  loss_mask_affinity: 0.00471    time: 0.8061  last_time: 0.7831  data_time: 0.0139  last_data_time: 0.0210   lr: 0.01  max_mem: 10040M
[32m[06/24 18:22:47 d2.utils.events]: [0m eta: 2:47:58  iter: 5559  total_loss: 1.751  loss_fcos_loc: 0.228  loss_fcos_ctr: 0.6155  loss_fcos_vfcls: 0.7268  loss_prj: 0.09895  loss_pairwise: 0.02651  loss_mask: 0.0315  loss_mask_affinity: 0.005    time: 0.8062  last_time: 0.8386  data_time: 0.0161  last_data_time: 0.0176   lr: 0.01  max_mem: 10040M
[32m[06/24 18:23:04 d2.utils.events]: [0m eta: 2:47:42  iter: 5579  total_loss: 1.703  loss_fcos_loc: 0.2158  loss_fcos_ctr: 0.618  loss_fcos_vfcls: 0.7015  loss_prj: 0.09064  loss_pairwise: 0.02673  loss_mask: 0.02644  loss_mask_affinity: 0.004778    time: 0.8063  last_time: 0.8031  data_time: 0.0160  last_data_time: 0.0163   lr: 0.01  max_mem: 10040M
[32m[06/24 18:23:19 d2.utils.events]: [0m eta: 2:47:19  iter: 5599  total_loss: 1.733  loss_fcos_loc: 0.2091  loss_fcos_ctr: 0.6146  loss_fcos_vfcls: 0.7371  loss_prj: 0.09313  loss_pairwise: 0.02554  loss_mask: 0.02476  loss_mask_affinity: 0.004555    time: 0.8062  last_time: 0.8373  data_time: 0.0152  last_data_time: 0.0180   lr: 0.01  max_mem: 10040M
[32m[06/24 18:23:35 d2.utils.events]: [0m eta: 2:47:00  iter: 5619  total_loss: 1.754  loss_fcos_loc: 0.2305  loss_fcos_ctr: 0.6169  loss_fcos_vfcls: 0.7534  loss_prj: 0.09665  loss_pairwise: 0.026  loss_mask: 0.02779  loss_mask_affinity: 0.00493    time: 0.8062  last_time: 0.7290  data_time: 0.0168  last_data_time: 0.0258   lr: 0.01  max_mem: 10040M
[32m[06/24 18:23:51 d2.utils.events]: [0m eta: 2:46:43  iter: 5639  total_loss: 1.747  loss_fcos_loc: 0.2253  loss_fcos_ctr: 0.618  loss_fcos_vfcls: 0.7536  loss_prj: 0.09266  loss_pairwise: 0.02553  loss_mask: 0.02896  loss_mask_affinity: 0.004741    time: 0.8061  last_time: 0.8340  data_time: 0.0139  last_data_time: 0.0153   lr: 0.01  max_mem: 10040M
[32m[06/24 18:24:07 d2.utils.events]: [0m eta: 2:46:29  iter: 5659  total_loss: 1.702  loss_fcos_loc: 0.2155  loss_fcos_ctr: 0.6177  loss_fcos_vfcls: 0.7227  loss_prj: 0.09265  loss_pairwise: 0.0244  loss_mask: 0.02764  loss_mask_affinity: 0.004546    time: 0.8061  last_time: 0.8569  data_time: 0.0154  last_data_time: 0.0191   lr: 0.01  max_mem: 10040M
[32m[06/24 18:24:24 d2.utils.events]: [0m eta: 2:46:12  iter: 5679  total_loss: 1.708  loss_fcos_loc: 0.2194  loss_fcos_ctr: 0.6166  loss_fcos_vfcls: 0.6988  loss_prj: 0.09743  loss_pairwise: 0.02594  loss_mask: 0.02693  loss_mask_affinity: 0.004662    time: 0.8061  last_time: 0.7629  data_time: 0.0141  last_data_time: 0.0101   lr: 0.01  max_mem: 10040M
[32m[06/24 18:24:40 d2.utils.events]: [0m eta: 2:45:58  iter: 5699  total_loss: 1.709  loss_fcos_loc: 0.227  loss_fcos_ctr: 0.617  loss_fcos_vfcls: 0.711  loss_prj: 0.09664  loss_pairwise: 0.0274  loss_mask: 0.02823  loss_mask_affinity: 0.005051    time: 0.8062  last_time: 0.8414  data_time: 0.0154  last_data_time: 0.0158   lr: 0.01  max_mem: 10040M
[32m[06/24 18:24:56 d2.utils.events]: [0m eta: 2:45:38  iter: 5719  total_loss: 1.706  loss_fcos_loc: 0.2196  loss_fcos_ctr: 0.6195  loss_fcos_vfcls: 0.7211  loss_prj: 0.09508  loss_pairwise: 0.02555  loss_mask: 0.02817  loss_mask_affinity: 0.004776    time: 0.8061  last_time: 0.7110  data_time: 0.0150  last_data_time: 0.0149   lr: 0.01  max_mem: 10040M
[32m[06/24 18:25:12 d2.utils.events]: [0m eta: 2:45:22  iter: 5739  total_loss: 1.719  loss_fcos_loc: 0.2272  loss_fcos_ctr: 0.6187  loss_fcos_vfcls: 0.7209  loss_prj: 0.09805  loss_pairwise: 0.02683  loss_mask: 0.02776  loss_mask_affinity: 0.004972    time: 0.8062  last_time: 0.8757  data_time: 0.0156  last_data_time: 0.0172   lr: 0.01  max_mem: 10040M
[32m[06/24 18:25:29 d2.utils.events]: [0m eta: 2:45:08  iter: 5759  total_loss: 1.703  loss_fcos_loc: 0.2195  loss_fcos_ctr: 0.6203  loss_fcos_vfcls: 0.6933  loss_prj: 0.09341  loss_pairwise: 0.02648  loss_mask: 0.02957  loss_mask_affinity: 0.004909    time: 0.8062  last_time: 0.8418  data_time: 0.0180  last_data_time: 0.0132   lr: 0.01  max_mem: 10040M
[32m[06/24 18:25:45 d2.utils.events]: [0m eta: 2:44:53  iter: 5779  total_loss: 1.729  loss_fcos_loc: 0.2257  loss_fcos_ctr: 0.617  loss_fcos_vfcls: 0.7402  loss_prj: 0.09374  loss_pairwise: 0.02564  loss_mask: 0.0281  loss_mask_affinity: 0.004812    time: 0.8062  last_time: 0.7418  data_time: 0.0153  last_data_time: 0.0124   lr: 0.01  max_mem: 10040M
[32m[06/24 18:26:01 d2.utils.events]: [0m eta: 2:44:25  iter: 5799  total_loss: 1.733  loss_fcos_loc: 0.2208  loss_fcos_ctr: 0.6129  loss_fcos_vfcls: 0.738  loss_prj: 0.09427  loss_pairwise: 0.02751  loss_mask: 0.02713  loss_mask_affinity: 0.005179    time: 0.8062  last_time: 0.8695  data_time: 0.0156  last_data_time: 0.0150   lr: 0.01  max_mem: 10040M
[32m[06/24 18:26:17 d2.utils.events]: [0m eta: 2:43:53  iter: 5819  total_loss: 1.755  loss_fcos_loc: 0.2321  loss_fcos_ctr: 0.6162  loss_fcos_vfcls: 0.7383  loss_prj: 0.1028  loss_pairwise: 0.02677  loss_mask: 0.03172  loss_mask_affinity: 0.005215    time: 0.8062  last_time: 0.7606  data_time: 0.0154  last_data_time: 0.0190   lr: 0.01  max_mem: 10040M
[32m[06/24 18:26:32 d2.utils.events]: [0m eta: 2:43:25  iter: 5839  total_loss: 1.706  loss_fcos_loc: 0.2045  loss_fcos_ctr: 0.6138  loss_fcos_vfcls: 0.7417  loss_prj: 0.09279  loss_pairwise: 0.02381  loss_mask: 0.02887  loss_mask_affinity: 0.004712    time: 0.8061  last_time: 0.8006  data_time: 0.0145  last_data_time: 0.0129   lr: 0.01  max_mem: 10040M
[32m[06/24 18:26:49 d2.utils.events]: [0m eta: 2:43:19  iter: 5859  total_loss: 1.7  loss_fcos_loc: 0.2249  loss_fcos_ctr: 0.6193  loss_fcos_vfcls: 0.7139  loss_prj: 0.09004  loss_pairwise: 0.02468  loss_mask: 0.03033  loss_mask_affinity: 0.00457    time: 0.8061  last_time: 0.7676  data_time: 0.0165  last_data_time: 0.0180   lr: 0.01  max_mem: 10040M
[32m[06/24 18:27:05 d2.utils.events]: [0m eta: 2:43:04  iter: 5879  total_loss: 1.703  loss_fcos_loc: 0.2112  loss_fcos_ctr: 0.6169  loss_fcos_vfcls: 0.7235  loss_prj: 0.0886  loss_pairwise: 0.02563  loss_mask: 0.0268  loss_mask_affinity: 0.004895    time: 0.8061  last_time: 0.7619  data_time: 0.0152  last_data_time: 0.0135   lr: 0.01  max_mem: 10040M
[32m[06/24 18:27:21 d2.utils.events]: [0m eta: 2:42:45  iter: 5899  total_loss: 1.734  loss_fcos_loc: 0.2229  loss_fcos_ctr: 0.6185  loss_fcos_vfcls: 0.7136  loss_prj: 0.09838  loss_pairwise: 0.02671  loss_mask: 0.03098  loss_mask_affinity: 0.005058    time: 0.8061  last_time: 0.7605  data_time: 0.0170  last_data_time: 0.0275   lr: 0.01  max_mem: 10040M
[32m[06/24 18:27:37 d2.utils.events]: [0m eta: 2:42:25  iter: 5919  total_loss: 1.721  loss_fcos_loc: 0.2167  loss_fcos_ctr: 0.6174  loss_fcos_vfcls: 0.7235  loss_prj: 0.09254  loss_pairwise: 0.02663  loss_mask: 0.02733  loss_mask_affinity: 0.004952    time: 0.8061  last_time: 0.8128  data_time: 0.0147  last_data_time: 0.0072   lr: 0.01  max_mem: 10040M
[32m[06/24 18:27:53 d2.utils.events]: [0m eta: 2:42:03  iter: 5939  total_loss: 1.696  loss_fcos_loc: 0.2108  loss_fcos_ctr: 0.614  loss_fcos_vfcls: 0.7216  loss_prj: 0.08817  loss_pairwise: 0.02709  loss_mask: 0.02696  loss_mask_affinity: 0.004728    time: 0.8061  last_time: 0.8445  data_time: 0.0141  last_data_time: 0.0080   lr: 0.01  max_mem: 10040M
[32m[06/24 18:28:10 d2.utils.events]: [0m eta: 2:41:52  iter: 5959  total_loss: 1.733  loss_fcos_loc: 0.2184  loss_fcos_ctr: 0.6184  loss_fcos_vfcls: 0.7396  loss_prj: 0.09585  loss_pairwise: 0.0284  loss_mask: 0.02871  loss_mask_affinity: 0.004737    time: 0.8062  last_time: 0.7816  data_time: 0.0156  last_data_time: 0.0120   lr: 0.01  max_mem: 10040M
[32m[06/24 18:28:26 d2.utils.events]: [0m eta: 2:41:32  iter: 5979  total_loss: 1.766  loss_fcos_loc: 0.2305  loss_fcos_ctr: 0.619  loss_fcos_vfcls: 0.7511  loss_prj: 0.1013  loss_pairwise: 0.02517  loss_mask: 0.03239  loss_mask_affinity: 0.005068    time: 0.8061  last_time: 0.7504  data_time: 0.0180  last_data_time: 0.0144   lr: 0.01  max_mem: 10040M
[32m[06/24 18:28:42 d2.utils.events]: [0m eta: 2:41:16  iter: 5999  total_loss: 1.721  loss_fcos_loc: 0.225  loss_fcos_ctr: 0.6164  loss_fcos_vfcls: 0.7219  loss_prj: 0.09177  loss_pairwise: 0.02475  loss_mask: 0.02809  loss_mask_affinity: 0.00495    time: 0.8061  last_time: 0.7796  data_time: 0.0150  last_data_time: 0.0158   lr: 0.01  max_mem: 10040M
[32m[06/24 18:28:58 d2.utils.events]: [0m eta: 2:41:10  iter: 6019  total_loss: 1.724  loss_fcos_loc: 0.2214  loss_fcos_ctr: 0.6181  loss_fcos_vfcls: 0.7099  loss_prj: 0.09602  loss_pairwise: 0.02435  loss_mask: 0.03063  loss_mask_affinity: 0.005214    time: 0.8062  last_time: 0.7634  data_time: 0.0160  last_data_time: 0.0111   lr: 0.01  max_mem: 10040M
[32m[06/24 18:29:14 d2.utils.events]: [0m eta: 2:40:43  iter: 6039  total_loss: 1.673  loss_fcos_loc: 0.2087  loss_fcos_ctr: 0.615  loss_fcos_vfcls: 0.7036  loss_prj: 0.08971  loss_pairwise: 0.02544  loss_mask: 0.02714  loss_mask_affinity: 0.004981    time: 0.8062  last_time: 0.8308  data_time: 0.0150  last_data_time: 0.0135   lr: 0.01  max_mem: 10040M
[32m[06/24 18:29:31 d2.utils.events]: [0m eta: 2:40:27  iter: 6059  total_loss: 1.736  loss_fcos_loc: 0.2241  loss_fcos_ctr: 0.6167  loss_fcos_vfcls: 0.7324  loss_prj: 0.09407  loss_pairwise: 0.02403  loss_mask: 0.02901  loss_mask_affinity: 0.005179    time: 0.8062  last_time: 0.9370  data_time: 0.0145  last_data_time: 0.0108   lr: 0.01  max_mem: 10040M
[32m[06/24 18:29:47 d2.utils.events]: [0m eta: 2:40:11  iter: 6079  total_loss: 1.715  loss_fcos_loc: 0.2136  loss_fcos_ctr: 0.6166  loss_fcos_vfcls: 0.7142  loss_prj: 0.08715  loss_pairwise: 0.02547  loss_mask: 0.02927  loss_mask_affinity: 0.005007    time: 0.8062  last_time: 0.7570  data_time: 0.0163  last_data_time: 0.0142   lr: 0.01  max_mem: 10040M
[32m[06/24 18:30:03 d2.utils.events]: [0m eta: 2:40:03  iter: 6099  total_loss: 1.682  loss_fcos_loc: 0.2093  loss_fcos_ctr: 0.6137  loss_fcos_vfcls: 0.7155  loss_prj: 0.08637  loss_pairwise: 0.0256  loss_mask: 0.02856  loss_mask_affinity: 0.005205    time: 0.8062  last_time: 0.8482  data_time: 0.0149  last_data_time: 0.0162   lr: 0.01  max_mem: 10040M
[32m[06/24 18:30:19 d2.utils.events]: [0m eta: 2:39:47  iter: 6119  total_loss: 1.756  loss_fcos_loc: 0.2171  loss_fcos_ctr: 0.6155  loss_fcos_vfcls: 0.7367  loss_prj: 0.09748  loss_pairwise: 0.02703  loss_mask: 0.03153  loss_mask_affinity: 0.004764    time: 0.8062  last_time: 0.8199  data_time: 0.0154  last_data_time: 0.0145   lr: 0.01  max_mem: 10040M
[32m[06/24 18:30:35 d2.utils.events]: [0m eta: 2:39:21  iter: 6139  total_loss: 1.71  loss_fcos_loc: 0.2104  loss_fcos_ctr: 0.617  loss_fcos_vfcls: 0.7118  loss_prj: 0.08591  loss_pairwise: 0.02812  loss_mask: 0.02917  loss_mask_affinity: 0.00529    time: 0.8061  last_time: 0.8083  data_time: 0.0146  last_data_time: 0.0102   lr: 0.01  max_mem: 10040M
[32m[06/24 18:30:51 d2.utils.events]: [0m eta: 2:39:01  iter: 6159  total_loss: 1.743  loss_fcos_loc: 0.2225  loss_fcos_ctr: 0.6166  loss_fcos_vfcls: 0.7345  loss_prj: 0.09538  loss_pairwise: 0.0276  loss_mask: 0.02997  loss_mask_affinity: 0.004966    time: 0.8061  last_time: 0.8453  data_time: 0.0147  last_data_time: 0.0106   lr: 0.01  max_mem: 10040M
[32m[06/24 18:31:07 d2.utils.events]: [0m eta: 2:38:44  iter: 6179  total_loss: 1.744  loss_fcos_loc: 0.2179  loss_fcos_ctr: 0.6163  loss_fcos_vfcls: 0.7455  loss_prj: 0.09738  loss_pairwise: 0.0284  loss_mask: 0.03357  loss_mask_affinity: 0.005308    time: 0.8061  last_time: 0.8701  data_time: 0.0156  last_data_time: 0.0265   lr: 0.01  max_mem: 10040M
[32m[06/24 18:31:23 d2.utils.events]: [0m eta: 2:38:16  iter: 6199  total_loss: 1.711  loss_fcos_loc: 0.2208  loss_fcos_ctr: 0.618  loss_fcos_vfcls: 0.7149  loss_prj: 0.09333  loss_pairwise: 0.02915  loss_mask: 0.03015  loss_mask_affinity: 0.005189    time: 0.8060  last_time: 0.8179  data_time: 0.0142  last_data_time: 0.0088   lr: 0.01  max_mem: 10040M
[32m[06/24 18:31:39 d2.utils.events]: [0m eta: 2:37:53  iter: 6219  total_loss: 1.752  loss_fcos_loc: 0.2297  loss_fcos_ctr: 0.6181  loss_fcos_vfcls: 0.7536  loss_prj: 0.09854  loss_pairwise: 0.02604  loss_mask: 0.03197  loss_mask_affinity: 0.005159    time: 0.8060  last_time: 0.8587  data_time: 0.0162  last_data_time: 0.0081   lr: 0.01  max_mem: 10040M
[32m[06/24 18:31:56 d2.utils.events]: [0m eta: 2:37:39  iter: 6239  total_loss: 1.676  loss_fcos_loc: 0.2094  loss_fcos_ctr: 0.6133  loss_fcos_vfcls: 0.7044  loss_prj: 0.08691  loss_pairwise: 0.02838  loss_mask: 0.02692  loss_mask_affinity: 0.005275    time: 0.8061  last_time: 0.7729  data_time: 0.0166  last_data_time: 0.0139   lr: 0.01  max_mem: 10040M
[32m[06/24 18:32:13 d2.utils.events]: [0m eta: 2:37:23  iter: 6259  total_loss: 1.692  loss_fcos_loc: 0.2157  loss_fcos_ctr: 0.6168  loss_fcos_vfcls: 0.7045  loss_prj: 0.0869  loss_pairwise: 0.0259  loss_mask: 0.02989  loss_mask_affinity: 0.00519    time: 0.8063  last_time: 0.7603  data_time: 0.0146  last_data_time: 0.0099   lr: 0.01  max_mem: 10040M
[32m[06/24 18:32:30 d2.utils.events]: [0m eta: 2:37:11  iter: 6279  total_loss: 1.706  loss_fcos_loc: 0.2217  loss_fcos_ctr: 0.6158  loss_fcos_vfcls: 0.7098  loss_prj: 0.09766  loss_pairwise: 0.02669  loss_mask: 0.03195  loss_mask_affinity: 0.005215    time: 0.8063  last_time: 0.9131  data_time: 0.0166  last_data_time: 0.0277   lr: 0.01  max_mem: 10040M
[32m[06/24 18:32:46 d2.utils.events]: [0m eta: 2:36:56  iter: 6299  total_loss: 1.709  loss_fcos_loc: 0.2217  loss_fcos_ctr: 0.6158  loss_fcos_vfcls: 0.7186  loss_prj: 0.09201  loss_pairwise: 0.02722  loss_mask: 0.02963  loss_mask_affinity: 0.005449    time: 0.8063  last_time: 0.7080  data_time: 0.0165  last_data_time: 0.0161   lr: 0.01  max_mem: 10040M
[32m[06/24 18:33:02 d2.utils.events]: [0m eta: 2:36:39  iter: 6319  total_loss: 1.656  loss_fcos_loc: 0.2159  loss_fcos_ctr: 0.6136  loss_fcos_vfcls: 0.6916  loss_prj: 0.08265  loss_pairwise: 0.02825  loss_mask: 0.02868  loss_mask_affinity: 0.005129    time: 0.8063  last_time: 0.7908  data_time: 0.0142  last_data_time: 0.0120   lr: 0.01  max_mem: 10040M
[32m[06/24 18:33:18 d2.utils.events]: [0m eta: 2:36:23  iter: 6339  total_loss: 1.696  loss_fcos_loc: 0.2131  loss_fcos_ctr: 0.6141  loss_fcos_vfcls: 0.6997  loss_prj: 0.09139  loss_pairwise: 0.02938  loss_mask: 0.03037  loss_mask_affinity: 0.005287    time: 0.8063  last_time: 0.7632  data_time: 0.0143  last_data_time: 0.0173   lr: 0.01  max_mem: 10040M
[32m[06/24 18:33:34 d2.utils.events]: [0m eta: 2:36:02  iter: 6359  total_loss: 1.712  loss_fcos_loc: 0.2199  loss_fcos_ctr: 0.6164  loss_fcos_vfcls: 0.7314  loss_prj: 0.09309  loss_pairwise: 0.0285  loss_mask: 0.03122  loss_mask_affinity: 0.005356    time: 0.8063  last_time: 0.7669  data_time: 0.0167  last_data_time: 0.0165   lr: 0.01  max_mem: 10040M
[32m[06/24 18:33:50 d2.utils.events]: [0m eta: 2:35:49  iter: 6379  total_loss: 1.741  loss_fcos_loc: 0.2228  loss_fcos_ctr: 0.6181  loss_fcos_vfcls: 0.767  loss_prj: 0.09503  loss_pairwise: 0.02623  loss_mask: 0.03034  loss_mask_affinity: 0.00509    time: 0.8063  last_time: 0.8857  data_time: 0.0149  last_data_time: 0.0105   lr: 0.01  max_mem: 10040M
[32m[06/24 18:34:06 d2.utils.events]: [0m eta: 2:35:34  iter: 6399  total_loss: 1.709  loss_fcos_loc: 0.2151  loss_fcos_ctr: 0.6164  loss_fcos_vfcls: 0.7109  loss_prj: 0.09408  loss_pairwise: 0.02756  loss_mask: 0.0318  loss_mask_affinity: 0.005699    time: 0.8063  last_time: 0.8100  data_time: 0.0147  last_data_time: 0.0157   lr: 0.01  max_mem: 10040M
[32m[06/24 18:34:23 d2.utils.events]: [0m eta: 2:35:17  iter: 6419  total_loss: 1.679  loss_fcos_loc: 0.2111  loss_fcos_ctr: 0.617  loss_fcos_vfcls: 0.6926  loss_prj: 0.09331  loss_pairwise: 0.02754  loss_mask: 0.03084  loss_mask_affinity: 0.005553    time: 0.8063  last_time: 0.7754  data_time: 0.0144  last_data_time: 0.0138   lr: 0.01  max_mem: 10040M
[32m[06/24 18:34:39 d2.utils.events]: [0m eta: 2:34:58  iter: 6439  total_loss: 1.684  loss_fcos_loc: 0.1991  loss_fcos_ctr: 0.6163  loss_fcos_vfcls: 0.716  loss_prj: 0.08221  loss_pairwise: 0.02677  loss_mask: 0.02685  loss_mask_affinity: 0.005207    time: 0.8064  last_time: 0.7947  data_time: 0.0137  last_data_time: 0.0168   lr: 0.01  max_mem: 10040M
[32m[06/24 18:34:55 d2.utils.events]: [0m eta: 2:34:40  iter: 6459  total_loss: 1.702  loss_fcos_loc: 0.2084  loss_fcos_ctr: 0.6147  loss_fcos_vfcls: 0.6996  loss_prj: 0.09191  loss_pairwise: 0.02807  loss_mask: 0.02999  loss_mask_affinity: 0.005364    time: 0.8064  last_time: 0.8119  data_time: 0.0154  last_data_time: 0.0171   lr: 0.01  max_mem: 10040M
[32m[06/24 18:35:12 d2.utils.events]: [0m eta: 2:34:24  iter: 6479  total_loss: 1.69  loss_fcos_loc: 0.2037  loss_fcos_ctr: 0.6123  loss_fcos_vfcls: 0.7421  loss_prj: 0.08971  loss_pairwise: 0.02683  loss_mask: 0.03137  loss_mask_affinity: 0.004963    time: 0.8064  last_time: 0.7275  data_time: 0.0158  last_data_time: 0.0178   lr: 0.01  max_mem: 10040M
[32m[06/24 18:35:28 d2.utils.events]: [0m eta: 2:34:16  iter: 6499  total_loss: 1.733  loss_fcos_loc: 0.2202  loss_fcos_ctr: 0.6165  loss_fcos_vfcls: 0.7302  loss_prj: 0.09417  loss_pairwise: 0.02802  loss_mask: 0.03118  loss_mask_affinity: 0.005405    time: 0.8065  last_time: 0.8362  data_time: 0.0175  last_data_time: 0.0133   lr: 0.01  max_mem: 10040M
[32m[06/24 18:35:45 d2.utils.events]: [0m eta: 2:33:58  iter: 6519  total_loss: 1.696  loss_fcos_loc: 0.2134  loss_fcos_ctr: 0.6152  loss_fcos_vfcls: 0.7164  loss_prj: 0.09372  loss_pairwise: 0.02507  loss_mask: 0.03062  loss_mask_affinity: 0.00531    time: 0.8065  last_time: 0.8122  data_time: 0.0189  last_data_time: 0.0137   lr: 0.01  max_mem: 10040M
[32m[06/24 18:36:01 d2.utils.events]: [0m eta: 2:33:43  iter: 6539  total_loss: 1.68  loss_fcos_loc: 0.2186  loss_fcos_ctr: 0.6142  loss_fcos_vfcls: 0.6964  loss_prj: 0.0972  loss_pairwise: 0.02869  loss_mask: 0.03149  loss_mask_affinity: 0.005169    time: 0.8065  last_time: 0.7773  data_time: 0.0159  last_data_time: 0.0158   lr: 0.01  max_mem: 10040M
[32m[06/24 18:36:17 d2.utils.events]: [0m eta: 2:33:19  iter: 6559  total_loss: 1.681  loss_fcos_loc: 0.2218  loss_fcos_ctr: 0.6157  loss_fcos_vfcls: 0.6847  loss_prj: 0.1014  loss_pairwise: 0.02704  loss_mask: 0.03055  loss_mask_affinity: 0.005688    time: 0.8065  last_time: 0.8068  data_time: 0.0151  last_data_time: 0.0141   lr: 0.01  max_mem: 10040M
[32m[06/24 18:36:33 d2.utils.events]: [0m eta: 2:33:02  iter: 6579  total_loss: 1.684  loss_fcos_loc: 0.2079  loss_fcos_ctr: 0.6174  loss_fcos_vfcls: 0.6976  loss_prj: 0.08413  loss_pairwise: 0.02708  loss_mask: 0.03062  loss_mask_affinity: 0.005633    time: 0.8065  last_time: 0.7289  data_time: 0.0150  last_data_time: 0.0157   lr: 0.01  max_mem: 10040M
[32m[06/24 18:36:49 d2.utils.events]: [0m eta: 2:32:51  iter: 6599  total_loss: 1.693  loss_fcos_loc: 0.2135  loss_fcos_ctr: 0.6144  loss_fcos_vfcls: 0.6938  loss_prj: 0.09324  loss_pairwise: 0.02879  loss_mask: 0.03256  loss_mask_affinity: 0.005702    time: 0.8065  last_time: 0.7475  data_time: 0.0154  last_data_time: 0.0103   lr: 0.01  max_mem: 10040M
[32m[06/24 18:37:06 d2.utils.events]: [0m eta: 2:32:36  iter: 6619  total_loss: 1.694  loss_fcos_loc: 0.2107  loss_fcos_ctr: 0.6124  loss_fcos_vfcls: 0.7339  loss_prj: 0.09451  loss_pairwise: 0.02902  loss_mask: 0.03162  loss_mask_affinity: 0.005606    time: 0.8066  last_time: 0.7563  data_time: 0.0159  last_data_time: 0.0091   lr: 0.01  max_mem: 10040M
[32m[06/24 18:37:22 d2.utils.events]: [0m eta: 2:32:22  iter: 6639  total_loss: 1.731  loss_fcos_loc: 0.2242  loss_fcos_ctr: 0.6172  loss_fcos_vfcls: 0.7116  loss_prj: 0.09695  loss_pairwise: 0.02797  loss_mask: 0.03321  loss_mask_affinity: 0.00564    time: 0.8065  last_time: 0.8069  data_time: 0.0158  last_data_time: 0.0160   lr: 0.01  max_mem: 10040M
[32m[06/24 18:37:38 d2.utils.events]: [0m eta: 2:32:06  iter: 6659  total_loss: 1.68  loss_fcos_loc: 0.2114  loss_fcos_ctr: 0.617  loss_fcos_vfcls: 0.685  loss_prj: 0.0922  loss_pairwise: 0.02805  loss_mask: 0.03327  loss_mask_affinity: 0.005639    time: 0.8066  last_time: 0.8275  data_time: 0.0156  last_data_time: 0.0141   lr: 0.01  max_mem: 10040M
[32m[06/24 18:37:55 d2.utils.events]: [0m eta: 2:31:53  iter: 6679  total_loss: 1.707  loss_fcos_loc: 0.2194  loss_fcos_ctr: 0.6154  loss_fcos_vfcls: 0.6964  loss_prj: 0.09309  loss_pairwise: 0.02726  loss_mask: 0.03146  loss_mask_affinity: 0.005267    time: 0.8066  last_time: 0.7840  data_time: 0.0158  last_data_time: 0.0158   lr: 0.01  max_mem: 10040M
[32m[06/24 18:38:11 d2.utils.events]: [0m eta: 2:31:32  iter: 6699  total_loss: 1.694  loss_fcos_loc: 0.204  loss_fcos_ctr: 0.6133  loss_fcos_vfcls: 0.7214  loss_prj: 0.08505  loss_pairwise: 0.03048  loss_mask: 0.02948  loss_mask_affinity: 0.005369    time: 0.8066  last_time: 0.7584  data_time: 0.0149  last_data_time: 0.0093   lr: 0.01  max_mem: 10040M
[32m[06/24 18:38:27 d2.utils.events]: [0m eta: 2:31:19  iter: 6719  total_loss: 1.705  loss_fcos_loc: 0.2114  loss_fcos_ctr: 0.6191  loss_fcos_vfcls: 0.7149  loss_prj: 0.09356  loss_pairwise: 0.02807  loss_mask: 0.03364  loss_mask_affinity: 0.005408    time: 0.8066  last_time: 0.8013  data_time: 0.0179  last_data_time: 0.0166   lr: 0.01  max_mem: 10040M
[32m[06/24 18:38:43 d2.utils.events]: [0m eta: 2:31:02  iter: 6739  total_loss: 1.748  loss_fcos_loc: 0.2156  loss_fcos_ctr: 0.6152  loss_fcos_vfcls: 0.7414  loss_prj: 0.08859  loss_pairwise: 0.02716  loss_mask: 0.03457  loss_mask_affinity: 0.005123    time: 0.8066  last_time: 0.9007  data_time: 0.0157  last_data_time: 0.0125   lr: 0.01  max_mem: 10040M
[32m[06/24 18:39:00 d2.utils.events]: [0m eta: 2:30:47  iter: 6759  total_loss: 1.715  loss_fcos_loc: 0.2167  loss_fcos_ctr: 0.618  loss_fcos_vfcls: 0.6994  loss_prj: 0.0931  loss_pairwise: 0.0299  loss_mask: 0.03134  loss_mask_affinity: 0.005825    time: 0.8066  last_time: 0.6774  data_time: 0.0138  last_data_time: 0.0142   lr: 0.01  max_mem: 10040M
[32m[06/24 18:39:16 d2.utils.events]: [0m eta: 2:30:29  iter: 6779  total_loss: 1.702  loss_fcos_loc: 0.2078  loss_fcos_ctr: 0.6127  loss_fcos_vfcls: 0.7296  loss_prj: 0.09329  loss_pairwise: 0.02818  loss_mask: 0.0312  loss_mask_affinity: 0.005584    time: 0.8066  last_time: 0.7308  data_time: 0.0146  last_data_time: 0.0082   lr: 0.01  max_mem: 10040M
[32m[06/24 18:39:32 d2.utils.events]: [0m eta: 2:30:18  iter: 6799  total_loss: 1.65  loss_fcos_loc: 0.2041  loss_fcos_ctr: 0.6153  loss_fcos_vfcls: 0.6707  loss_prj: 0.09005  loss_pairwise: 0.02758  loss_mask: 0.03238  loss_mask_affinity: 0.005371    time: 0.8067  last_time: 0.7626  data_time: 0.0154  last_data_time: 0.0177   lr: 0.01  max_mem: 10040M
[32m[06/24 18:39:49 d2.utils.events]: [0m eta: 2:30:06  iter: 6819  total_loss: 1.69  loss_fcos_loc: 0.2123  loss_fcos_ctr: 0.6154  loss_fcos_vfcls: 0.6899  loss_prj: 0.09031  loss_pairwise: 0.02742  loss_mask: 0.03509  loss_mask_affinity: 0.005466    time: 0.8067  last_time: 0.7325  data_time: 0.0164  last_data_time: 0.0178   lr: 0.01  max_mem: 10040M
[32m[06/24 18:40:05 d2.utils.events]: [0m eta: 2:29:54  iter: 6839  total_loss: 1.704  loss_fcos_loc: 0.214  loss_fcos_ctr: 0.6155  loss_fcos_vfcls: 0.7193  loss_prj: 0.08837  loss_pairwise: 0.02841  loss_mask: 0.03151  loss_mask_affinity: 0.005489    time: 0.8066  last_time: 0.8667  data_time: 0.0186  last_data_time: 0.0218   lr: 0.01  max_mem: 10040M
[32m[06/24 18:40:21 d2.utils.events]: [0m eta: 2:29:36  iter: 6859  total_loss: 1.735  loss_fcos_loc: 0.2275  loss_fcos_ctr: 0.6135  loss_fcos_vfcls: 0.7192  loss_prj: 0.09235  loss_pairwise: 0.02803  loss_mask: 0.0322  loss_mask_affinity: 0.005495    time: 0.8067  last_time: 0.7127  data_time: 0.0163  last_data_time: 0.0305   lr: 0.01  max_mem: 10040M
[32m[06/24 18:40:37 d2.utils.events]: [0m eta: 2:29:18  iter: 6879  total_loss: 1.733  loss_fcos_loc: 0.2236  loss_fcos_ctr: 0.6155  loss_fcos_vfcls: 0.7215  loss_prj: 0.09369  loss_pairwise: 0.02965  loss_mask: 0.03438  loss_mask_affinity: 0.005567    time: 0.8067  last_time: 0.7444  data_time: 0.0178  last_data_time: 0.0144   lr: 0.01  max_mem: 10040M
[32m[06/24 18:40:53 d2.utils.events]: [0m eta: 2:29:02  iter: 6899  total_loss: 1.679  loss_fcos_loc: 0.216  loss_fcos_ctr: 0.6159  loss_fcos_vfcls: 0.6952  loss_prj: 0.09248  loss_pairwise: 0.02707  loss_mask: 0.0331  loss_mask_affinity: 0.005636    time: 0.8067  last_time: 0.8080  data_time: 0.0163  last_data_time: 0.0249   lr: 0.01  max_mem: 10040M
[32m[06/24 18:41:10 d2.utils.events]: [0m eta: 2:28:50  iter: 6919  total_loss: 1.699  loss_fcos_loc: 0.2149  loss_fcos_ctr: 0.6152  loss_fcos_vfcls: 0.6974  loss_prj: 0.09648  loss_pairwise: 0.02883  loss_mask: 0.03211  loss_mask_affinity: 0.005625    time: 0.8067  last_time: 0.7423  data_time: 0.0204  last_data_time: 0.0093   lr: 0.01  max_mem: 10040M
[32m[06/24 18:41:26 d2.utils.events]: [0m eta: 2:28:34  iter: 6939  total_loss: 1.658  loss_fcos_loc: 0.209  loss_fcos_ctr: 0.6143  loss_fcos_vfcls: 0.6913  loss_prj: 0.08813  loss_pairwise: 0.02873  loss_mask: 0.02995  loss_mask_affinity: 0.005445    time: 0.8067  last_time: 0.8024  data_time: 0.0161  last_data_time: 0.0092   lr: 0.01  max_mem: 10040M
[32m[06/24 18:41:43 d2.utils.events]: [0m eta: 2:28:21  iter: 6959  total_loss: 1.689  loss_fcos_loc: 0.2176  loss_fcos_ctr: 0.6163  loss_fcos_vfcls: 0.7016  loss_prj: 0.09925  loss_pairwise: 0.0273  loss_mask: 0.03475  loss_mask_affinity: 0.005691    time: 0.8068  last_time: 0.8245  data_time: 0.0186  last_data_time: 0.0340   lr: 0.01  max_mem: 10040M
[32m[06/24 18:41:59 d2.utils.events]: [0m eta: 2:28:05  iter: 6979  total_loss: 1.713  loss_fcos_loc: 0.2169  loss_fcos_ctr: 0.619  loss_fcos_vfcls: 0.7057  loss_prj: 0.09243  loss_pairwise: 0.02853  loss_mask: 0.0328  loss_mask_affinity: 0.005848    time: 0.8068  last_time: 0.8102  data_time: 0.0197  last_data_time: 0.0163   lr: 0.01  max_mem: 10040M
[32m[06/24 18:42:15 d2.utils.events]: [0m eta: 2:27:45  iter: 6999  total_loss: 1.699  loss_fcos_loc: 0.2172  loss_fcos_ctr: 0.615  loss_fcos_vfcls: 0.7017  loss_prj: 0.09528  loss_pairwise: 0.0289  loss_mask: 0.03153  loss_mask_affinity: 0.005569    time: 0.8068  last_time: 0.7509  data_time: 0.0153  last_data_time: 0.0158   lr: 0.01  max_mem: 10040M
[32m[06/24 18:42:32 d2.utils.events]: [0m eta: 2:27:30  iter: 7019  total_loss: 1.711  loss_fcos_loc: 0.2167  loss_fcos_ctr: 0.619  loss_fcos_vfcls: 0.7295  loss_prj: 0.09371  loss_pairwise: 0.03028  loss_mask: 0.03441  loss_mask_affinity: 0.006074    time: 0.8069  last_time: 0.7732  data_time: 0.0152  last_data_time: 0.0136   lr: 0.01  max_mem: 10040M
[32m[06/24 18:42:48 d2.utils.events]: [0m eta: 2:27:16  iter: 7039  total_loss: 1.705  loss_fcos_loc: 0.2067  loss_fcos_ctr: 0.6139  loss_fcos_vfcls: 0.7204  loss_prj: 0.08968  loss_pairwise: 0.02887  loss_mask: 0.03399  loss_mask_affinity: 0.005778    time: 0.8069  last_time: 0.7129  data_time: 0.0179  last_data_time: 0.0175   lr: 0.01  max_mem: 10040M
[32m[06/24 18:43:05 d2.utils.events]: [0m eta: 2:27:03  iter: 7059  total_loss: 1.696  loss_fcos_loc: 0.2121  loss_fcos_ctr: 0.6156  loss_fcos_vfcls: 0.7012  loss_prj: 0.08364  loss_pairwise: 0.02969  loss_mask: 0.03216  loss_mask_affinity: 0.005504    time: 0.8070  last_time: 0.8081  data_time: 0.0145  last_data_time: 0.0091   lr: 0.01  max_mem: 10040M
[32m[06/24 18:43:21 d2.utils.events]: [0m eta: 2:26:51  iter: 7079  total_loss: 1.708  loss_fcos_loc: 0.2187  loss_fcos_ctr: 0.6156  loss_fcos_vfcls: 0.6817  loss_prj: 0.09319  loss_pairwise: 0.03117  loss_mask: 0.03263  loss_mask_affinity: 0.005801    time: 0.8070  last_time: 0.8132  data_time: 0.0169  last_data_time: 0.0147   lr: 0.01  max_mem: 10040M
[32m[06/24 18:43:38 d2.utils.events]: [0m eta: 2:26:35  iter: 7099  total_loss: 1.729  loss_fcos_loc: 0.2353  loss_fcos_ctr: 0.6183  loss_fcos_vfcls: 0.7123  loss_prj: 0.09742  loss_pairwise: 0.02861  loss_mask: 0.03281  loss_mask_affinity: 0.006097    time: 0.8071  last_time: 0.9443  data_time: 0.0182  last_data_time: 0.0136   lr: 0.01  max_mem: 10040M
[32m[06/24 18:43:54 d2.utils.events]: [0m eta: 2:26:20  iter: 7119  total_loss: 1.745  loss_fcos_loc: 0.2367  loss_fcos_ctr: 0.6182  loss_fcos_vfcls: 0.7111  loss_prj: 0.09578  loss_pairwise: 0.02595  loss_mask: 0.03351  loss_mask_affinity: 0.005932    time: 0.8072  last_time: 0.7905  data_time: 0.0149  last_data_time: 0.0156   lr: 0.01  max_mem: 10040M
[32m[06/24 18:44:10 d2.utils.events]: [0m eta: 2:26:02  iter: 7139  total_loss: 1.683  loss_fcos_loc: 0.2137  loss_fcos_ctr: 0.6138  loss_fcos_vfcls: 0.6893  loss_prj: 0.08852  loss_pairwise: 0.02845  loss_mask: 0.03343  loss_mask_affinity: 0.005584    time: 0.8071  last_time: 0.7964  data_time: 0.0141  last_data_time: 0.0157   lr: 0.01  max_mem: 10040M
[32m[06/24 18:44:26 d2.utils.events]: [0m eta: 2:25:46  iter: 7159  total_loss: 1.72  loss_fcos_loc: 0.2142  loss_fcos_ctr: 0.6135  loss_fcos_vfcls: 0.7328  loss_prj: 0.09374  loss_pairwise: 0.02721  loss_mask: 0.0353  loss_mask_affinity: 0.005798    time: 0.8071  last_time: 0.7908  data_time: 0.0155  last_data_time: 0.0100   lr: 0.01  max_mem: 10040M
[32m[06/24 18:44:43 d2.utils.events]: [0m eta: 2:25:34  iter: 7179  total_loss: 1.711  loss_fcos_loc: 0.2201  loss_fcos_ctr: 0.6163  loss_fcos_vfcls: 0.7122  loss_prj: 0.0957  loss_pairwise: 0.02815  loss_mask: 0.03376  loss_mask_affinity: 0.005958    time: 0.8071  last_time: 0.8400  data_time: 0.0148  last_data_time: 0.0143   lr: 0.01  max_mem: 10040M
[32m[06/24 18:45:00 d2.utils.events]: [0m eta: 2:25:29  iter: 7199  total_loss: 1.671  loss_fcos_loc: 0.2115  loss_fcos_ctr: 0.6176  loss_fcos_vfcls: 0.6897  loss_prj: 0.08606  loss_pairwise: 0.02498  loss_mask: 0.03357  loss_mask_affinity: 0.005509    time: 0.8073  last_time: 0.8072  data_time: 0.0160  last_data_time: 0.0165   lr: 0.01  max_mem: 10040M
[32m[06/24 18:45:16 d2.utils.events]: [0m eta: 2:25:10  iter: 7219  total_loss: 1.677  loss_fcos_loc: 0.2003  loss_fcos_ctr: 0.6148  loss_fcos_vfcls: 0.6897  loss_prj: 0.08455  loss_pairwise: 0.02793  loss_mask: 0.03268  loss_mask_affinity: 0.005441    time: 0.8072  last_time: 0.7768  data_time: 0.0169  last_data_time: 0.0413   lr: 0.01  max_mem: 10040M
[32m[06/24 18:45:32 d2.utils.events]: [0m eta: 2:24:54  iter: 7239  total_loss: 1.717  loss_fcos_loc: 0.2217  loss_fcos_ctr: 0.6164  loss_fcos_vfcls: 0.7045  loss_prj: 0.095  loss_pairwise: 0.02839  loss_mask: 0.03488  loss_mask_affinity: 0.005858    time: 0.8072  last_time: 0.8569  data_time: 0.0161  last_data_time: 0.0125   lr: 0.01  max_mem: 10040M
[32m[06/24 18:45:49 d2.utils.events]: [0m eta: 2:24:42  iter: 7259  total_loss: 1.689  loss_fcos_loc: 0.221  loss_fcos_ctr: 0.6177  loss_fcos_vfcls: 0.6825  loss_prj: 0.09577  loss_pairwise: 0.02398  loss_mask: 0.03447  loss_mask_affinity: 0.006039    time: 0.8073  last_time: 0.8345  data_time: 0.0153  last_data_time: 0.0163   lr: 0.01  max_mem: 10040M
[32m[06/24 18:46:05 d2.utils.events]: [0m eta: 2:24:26  iter: 7279  total_loss: 1.684  loss_fcos_loc: 0.2025  loss_fcos_ctr: 0.6121  loss_fcos_vfcls: 0.7077  loss_prj: 0.08699  loss_pairwise: 0.029  loss_mask: 0.03271  loss_mask_affinity: 0.005701    time: 0.8073  last_time: 0.8513  data_time: 0.0145  last_data_time: 0.0098   lr: 0.01  max_mem: 10040M
[32m[06/24 18:46:22 d2.utils.events]: [0m eta: 2:24:10  iter: 7299  total_loss: 1.707  loss_fcos_loc: 0.2203  loss_fcos_ctr: 0.6209  loss_fcos_vfcls: 0.6765  loss_prj: 0.09724  loss_pairwise: 0.028  loss_mask: 0.0357  loss_mask_affinity: 0.006054    time: 0.8074  last_time: 0.7837  data_time: 0.0167  last_data_time: 0.0140   lr: 0.01  max_mem: 10040M
[32m[06/24 18:46:38 d2.utils.events]: [0m eta: 2:23:55  iter: 7319  total_loss: 1.721  loss_fcos_loc: 0.2232  loss_fcos_ctr: 0.6143  loss_fcos_vfcls: 0.6891  loss_prj: 0.09412  loss_pairwise: 0.03005  loss_mask: 0.03623  loss_mask_affinity: 0.005863    time: 0.8074  last_time: 0.8825  data_time: 0.0174  last_data_time: 0.0087   lr: 0.01  max_mem: 10040M
[32m[06/24 18:46:55 d2.utils.events]: [0m eta: 2:23:44  iter: 7339  total_loss: 1.662  loss_fcos_loc: 0.2015  loss_fcos_ctr: 0.6124  loss_fcos_vfcls: 0.6685  loss_prj: 0.08563  loss_pairwise: 0.02859  loss_mask: 0.03216  loss_mask_affinity: 0.005518    time: 0.8075  last_time: 0.8115  data_time: 0.0168  last_data_time: 0.0165   lr: 0.01  max_mem: 10040M
[32m[06/24 18:47:11 d2.utils.events]: [0m eta: 2:23:33  iter: 7359  total_loss: 1.663  loss_fcos_loc: 0.2182  loss_fcos_ctr: 0.6153  loss_fcos_vfcls: 0.6903  loss_prj: 0.08674  loss_pairwise: 0.03004  loss_mask: 0.03313  loss_mask_affinity: 0.005992    time: 0.8075  last_time: 0.7065  data_time: 0.0158  last_data_time: 0.0139   lr: 0.01  max_mem: 10040M
[32m[06/24 18:47:28 d2.utils.events]: [0m eta: 2:23:17  iter: 7379  total_loss: 1.685  loss_fcos_loc: 0.2144  loss_fcos_ctr: 0.6124  loss_fcos_vfcls: 0.6929  loss_prj: 0.08527  loss_pairwise: 0.02701  loss_mask: 0.03289  loss_mask_affinity: 0.00541    time: 0.8075  last_time: 0.9141  data_time: 0.0164  last_data_time: 0.0124   lr: 0.01  max_mem: 10040M
[32m[06/24 18:47:44 d2.utils.events]: [0m eta: 2:22:54  iter: 7399  total_loss: 1.674  loss_fcos_loc: 0.2208  loss_fcos_ctr: 0.6164  loss_fcos_vfcls: 0.6805  loss_prj: 0.09859  loss_pairwise: 0.02702  loss_mask: 0.03578  loss_mask_affinity: 0.005914    time: 0.8075  last_time: 0.7813  data_time: 0.0175  last_data_time: 0.0133   lr: 0.01  max_mem: 10040M
[32m[06/24 18:48:00 d2.utils.events]: [0m eta: 2:22:47  iter: 7419  total_loss: 1.71  loss_fcos_loc: 0.213  loss_fcos_ctr: 0.6119  loss_fcos_vfcls: 0.7103  loss_prj: 0.09249  loss_pairwise: 0.02996  loss_mask: 0.03472  loss_mask_affinity: 0.005948    time: 0.8076  last_time: 0.9054  data_time: 0.0157  last_data_time: 0.0183   lr: 0.01  max_mem: 10040M
[32m[06/24 18:48:17 d2.utils.events]: [0m eta: 2:22:41  iter: 7439  total_loss: 1.684  loss_fcos_loc: 0.2135  loss_fcos_ctr: 0.6158  loss_fcos_vfcls: 0.6935  loss_prj: 0.08942  loss_pairwise: 0.02917  loss_mask: 0.03366  loss_mask_affinity: 0.00602    time: 0.8077  last_time: 0.7649  data_time: 0.0175  last_data_time: 0.0097   lr: 0.01  max_mem: 10040M
[32m[06/24 18:48:33 d2.utils.events]: [0m eta: 2:22:27  iter: 7459  total_loss: 1.663  loss_fcos_loc: 0.2033  loss_fcos_ctr: 0.6153  loss_fcos_vfcls: 0.6896  loss_prj: 0.09132  loss_pairwise: 0.02862  loss_mask: 0.03532  loss_mask_affinity: 0.005703    time: 0.8077  last_time: 0.7496  data_time: 0.0155  last_data_time: 0.0191   lr: 0.01  max_mem: 10040M
[32m[06/24 18:48:50 d2.utils.events]: [0m eta: 2:22:12  iter: 7479  total_loss: 1.687  loss_fcos_loc: 0.2162  loss_fcos_ctr: 0.6167  loss_fcos_vfcls: 0.6951  loss_prj: 0.09155  loss_pairwise: 0.03251  loss_mask: 0.03582  loss_mask_affinity: 0.006169    time: 0.8078  last_time: 0.8541  data_time: 0.0170  last_data_time: 0.0148   lr: 0.01  max_mem: 10140M
[32m[06/24 18:49:06 d2.utils.events]: [0m eta: 2:21:52  iter: 7499  total_loss: 1.697  loss_fcos_loc: 0.2094  loss_fcos_ctr: 0.6174  loss_fcos_vfcls: 0.6951  loss_prj: 0.09243  loss_pairwise: 0.0281  loss_mask: 0.03574  loss_mask_affinity: 0.00592    time: 0.8078  last_time: 0.8119  data_time: 0.0155  last_data_time: 0.0112   lr: 0.01  max_mem: 10140M
[32m[06/24 18:49:23 d2.utils.events]: [0m eta: 2:21:47  iter: 7519  total_loss: 1.671  loss_fcos_loc: 0.2177  loss_fcos_ctr: 0.6172  loss_fcos_vfcls: 0.678  loss_prj: 0.09498  loss_pairwise: 0.02795  loss_mask: 0.03436  loss_mask_affinity: 0.006229    time: 0.8078  last_time: 0.8326  data_time: 0.0157  last_data_time: 0.0139   lr: 0.01  max_mem: 10140M
[32m[06/24 18:49:39 d2.utils.events]: [0m eta: 2:21:30  iter: 7539  total_loss: 1.646  loss_fcos_loc: 0.1942  loss_fcos_ctr: 0.614  loss_fcos_vfcls: 0.6756  loss_prj: 0.08225  loss_pairwise: 0.02869  loss_mask: 0.02964  loss_mask_affinity: 0.006268    time: 0.8078  last_time: 0.8049  data_time: 0.0185  last_data_time: 0.0229   lr: 0.01  max_mem: 10411M
[32m[06/24 18:49:56 d2.utils.events]: [0m eta: 2:21:19  iter: 7559  total_loss: 1.677  loss_fcos_loc: 0.2071  loss_fcos_ctr: 0.6135  loss_fcos_vfcls: 0.6975  loss_prj: 0.08696  loss_pairwise: 0.02897  loss_mask: 0.03312  loss_mask_affinity: 0.006337    time: 0.8079  last_time: 0.8661  data_time: 0.0152  last_data_time: 0.0098   lr: 0.01  max_mem: 10411M
[32m[06/24 18:50:12 d2.utils.events]: [0m eta: 2:21:10  iter: 7579  total_loss: 1.686  loss_fcos_loc: 0.2146  loss_fcos_ctr: 0.6161  loss_fcos_vfcls: 0.6954  loss_prj: 0.09543  loss_pairwise: 0.03123  loss_mask: 0.03519  loss_mask_affinity: 0.006205    time: 0.8078  last_time: 0.8547  data_time: 0.0176  last_data_time: 0.0168   lr: 0.01  max_mem: 10411M
[32m[06/24 18:50:28 d2.utils.events]: [0m eta: 2:20:55  iter: 7599  total_loss: 1.673  loss_fcos_loc: 0.2064  loss_fcos_ctr: 0.6143  loss_fcos_vfcls: 0.6979  loss_prj: 0.08777  loss_pairwise: 0.02637  loss_mask: 0.03278  loss_mask_affinity: 0.005847    time: 0.8079  last_time: 0.8672  data_time: 0.0152  last_data_time: 0.0153   lr: 0.01  max_mem: 10411M
[32m[06/24 18:50:44 d2.utils.events]: [0m eta: 2:20:30  iter: 7619  total_loss: 1.694  loss_fcos_loc: 0.207  loss_fcos_ctr: 0.6155  loss_fcos_vfcls: 0.6934  loss_prj: 0.09141  loss_pairwise: 0.03007  loss_mask: 0.03518  loss_mask_affinity: 0.005942    time: 0.8079  last_time: 0.8390  data_time: 0.0161  last_data_time: 0.0277   lr: 0.01  max_mem: 10411M
[32m[06/24 18:51:01 d2.utils.events]: [0m eta: 2:20:23  iter: 7639  total_loss: 1.7  loss_fcos_loc: 0.2009  loss_fcos_ctr: 0.6131  loss_fcos_vfcls: 0.7037  loss_prj: 0.08383  loss_pairwise: 0.02992  loss_mask: 0.03672  loss_mask_affinity: 0.005751    time: 0.8079  last_time: 0.7743  data_time: 0.0151  last_data_time: 0.0204   lr: 0.01  max_mem: 10411M
[32m[06/24 18:51:17 d2.utils.events]: [0m eta: 2:20:06  iter: 7659  total_loss: 1.662  loss_fcos_loc: 0.2155  loss_fcos_ctr: 0.618  loss_fcos_vfcls: 0.6647  loss_prj: 0.09036  loss_pairwise: 0.02723  loss_mask: 0.03489  loss_mask_affinity: 0.006303    time: 0.8080  last_time: 0.9041  data_time: 0.0186  last_data_time: 0.0131   lr: 0.01  max_mem: 10411M
[32m[06/24 18:51:34 d2.utils.events]: [0m eta: 2:19:50  iter: 7679  total_loss: 1.688  loss_fcos_loc: 0.1964  loss_fcos_ctr: 0.6112  loss_fcos_vfcls: 0.6866  loss_prj: 0.0838  loss_pairwise: 0.02896  loss_mask: 0.03493  loss_mask_affinity: 0.006086    time: 0.8080  last_time: 0.7957  data_time: 0.0146  last_data_time: 0.0154   lr: 0.01  max_mem: 10411M
[32m[06/24 18:51:50 d2.utils.events]: [0m eta: 2:19:40  iter: 7699  total_loss: 1.748  loss_fcos_loc: 0.2204  loss_fcos_ctr: 0.6187  loss_fcos_vfcls: 0.7075  loss_prj: 0.09815  loss_pairwise: 0.02906  loss_mask: 0.0357  loss_mask_affinity: 0.006674    time: 0.8080  last_time: 0.7431  data_time: 0.0142  last_data_time: 0.0112   lr: 0.01  max_mem: 10411M
[32m[06/24 18:52:06 d2.utils.events]: [0m eta: 2:19:19  iter: 7719  total_loss: 1.662  loss_fcos_loc: 0.2083  loss_fcos_ctr: 0.6177  loss_fcos_vfcls: 0.6877  loss_prj: 0.08826  loss_pairwise: 0.02619  loss_mask: 0.03742  loss_mask_affinity: 0.005751    time: 0.8080  last_time: 0.7604  data_time: 0.0158  last_data_time: 0.0297   lr: 0.01  max_mem: 10411M
[32m[06/24 18:52:23 d2.utils.events]: [0m eta: 2:19:09  iter: 7739  total_loss: 1.656  loss_fcos_loc: 0.2023  loss_fcos_ctr: 0.616  loss_fcos_vfcls: 0.675  loss_prj: 0.08474  loss_pairwise: 0.0307  loss_mask: 0.03291  loss_mask_affinity: 0.006118    time: 0.8081  last_time: 0.8545  data_time: 0.0155  last_data_time: 0.0112   lr: 0.01  max_mem: 10411M
[32m[06/24 18:52:39 d2.utils.events]: [0m eta: 2:18:49  iter: 7759  total_loss: 1.698  loss_fcos_loc: 0.2117  loss_fcos_ctr: 0.6137  loss_fcos_vfcls: 0.6985  loss_prj: 0.08396  loss_pairwise: 0.02888  loss_mask: 0.03439  loss_mask_affinity: 0.005507    time: 0.8081  last_time: 0.7881  data_time: 0.0155  last_data_time: 0.0150   lr: 0.01  max_mem: 10411M
[32m[06/24 18:52:56 d2.utils.events]: [0m eta: 2:18:42  iter: 7779  total_loss: 1.678  loss_fcos_loc: 0.2047  loss_fcos_ctr: 0.613  loss_fcos_vfcls: 0.7112  loss_prj: 0.08651  loss_pairwise: 0.02762  loss_mask: 0.03504  loss_mask_affinity: 0.005941    time: 0.8082  last_time: 0.8819  data_time: 0.0165  last_data_time: 0.0361   lr: 0.01  max_mem: 10411M
[32m[06/24 18:53:12 d2.utils.events]: [0m eta: 2:18:34  iter: 7799  total_loss: 1.713  loss_fcos_loc: 0.1952  loss_fcos_ctr: 0.6125  loss_fcos_vfcls: 0.725  loss_prj: 0.08152  loss_pairwise: 0.02891  loss_mask: 0.03375  loss_mask_affinity: 0.005961    time: 0.8082  last_time: 0.8556  data_time: 0.0135  last_data_time: 0.0136   lr: 0.01  max_mem: 10411M
[32m[06/24 18:53:29 d2.utils.events]: [0m eta: 2:18:20  iter: 7819  total_loss: 1.708  loss_fcos_loc: 0.2174  loss_fcos_ctr: 0.6187  loss_fcos_vfcls: 0.6925  loss_prj: 0.09173  loss_pairwise: 0.03036  loss_mask: 0.03355  loss_mask_affinity: 0.006447    time: 0.8082  last_time: 0.8353  data_time: 0.0189  last_data_time: 0.0306   lr: 0.01  max_mem: 10411M
[32m[06/24 18:53:45 d2.utils.events]: [0m eta: 2:18:03  iter: 7839  total_loss: 1.647  loss_fcos_loc: 0.2025  loss_fcos_ctr: 0.6103  loss_fcos_vfcls: 0.6923  loss_prj: 0.08766  loss_pairwise: 0.02644  loss_mask: 0.03963  loss_mask_affinity: 0.006119    time: 0.8082  last_time: 0.7473  data_time: 0.0163  last_data_time: 0.0109   lr: 0.01  max_mem: 10411M
[32m[06/24 18:54:01 d2.utils.events]: [0m eta: 2:17:44  iter: 7859  total_loss: 1.66  loss_fcos_loc: 0.2067  loss_fcos_ctr: 0.612  loss_fcos_vfcls: 0.6749  loss_prj: 0.08927  loss_pairwise: 0.02983  loss_mask: 0.0353  loss_mask_affinity: 0.006201    time: 0.8082  last_time: 0.8618  data_time: 0.0156  last_data_time: 0.0130   lr: 0.01  max_mem: 10411M
[32m[06/24 18:54:17 d2.utils.events]: [0m eta: 2:17:28  iter: 7879  total_loss: 1.666  loss_fcos_loc: 0.2173  loss_fcos_ctr: 0.6117  loss_fcos_vfcls: 0.6641  loss_prj: 0.09362  loss_pairwise: 0.02668  loss_mask: 0.03386  loss_mask_affinity: 0.006303    time: 0.8082  last_time: 0.8749  data_time: 0.0148  last_data_time: 0.0158   lr: 0.01  max_mem: 10411M
[32m[06/24 18:54:34 d2.utils.events]: [0m eta: 2:17:13  iter: 7899  total_loss: 1.676  loss_fcos_loc: 0.2038  loss_fcos_ctr: 0.6161  loss_fcos_vfcls: 0.7053  loss_prj: 0.08574  loss_pairwise: 0.03135  loss_mask: 0.03706  loss_mask_affinity: 0.006166    time: 0.8082  last_time: 0.9333  data_time: 0.0180  last_data_time: 0.0213   lr: 0.01  max_mem: 10411M
[32m[06/24 18:54:50 d2.utils.events]: [0m eta: 2:16:56  iter: 7919  total_loss: 1.69  loss_fcos_loc: 0.2056  loss_fcos_ctr: 0.6144  loss_fcos_vfcls: 0.7152  loss_prj: 0.09  loss_pairwise: 0.02622  loss_mask: 0.03802  loss_mask_affinity: 0.005789    time: 0.8082  last_time: 0.7587  data_time: 0.0171  last_data_time: 0.0152   lr: 0.01  max_mem: 10411M
[32m[06/24 18:55:06 d2.utils.events]: [0m eta: 2:16:34  iter: 7939  total_loss: 1.702  loss_fcos_loc: 0.2144  loss_fcos_ctr: 0.6166  loss_fcos_vfcls: 0.6955  loss_prj: 0.08836  loss_pairwise: 0.03046  loss_mask: 0.0368  loss_mask_affinity: 0.006538    time: 0.8082  last_time: 0.7662  data_time: 0.0158  last_data_time: 0.0233   lr: 0.01  max_mem: 10411M
[32m[06/24 18:55:22 d2.utils.events]: [0m eta: 2:16:09  iter: 7959  total_loss: 1.644  loss_fcos_loc: 0.2074  loss_fcos_ctr: 0.6138  loss_fcos_vfcls: 0.6749  loss_prj: 0.08541  loss_pairwise: 0.02929  loss_mask: 0.03567  loss_mask_affinity: 0.006486    time: 0.8082  last_time: 0.8344  data_time: 0.0154  last_data_time: 0.0144   lr: 0.01  max_mem: 10411M
[32m[06/24 18:55:39 d2.utils.events]: [0m eta: 2:16:00  iter: 7979  total_loss: 1.703  loss_fcos_loc: 0.2134  loss_fcos_ctr: 0.6134  loss_fcos_vfcls: 0.6948  loss_prj: 0.09229  loss_pairwise: 0.02922  loss_mask: 0.03795  loss_mask_affinity: 0.006155    time: 0.8082  last_time: 0.8707  data_time: 0.0179  last_data_time: 0.0143   lr: 0.01  max_mem: 10411M
[32m[06/24 18:55:55 d2.utils.events]: [0m eta: 2:15:50  iter: 7999  total_loss: 1.664  loss_fcos_loc: 0.2066  loss_fcos_ctr: 0.6162  loss_fcos_vfcls: 0.6881  loss_prj: 0.09009  loss_pairwise: 0.02855  loss_mask: 0.03554  loss_mask_affinity: 0.006336    time: 0.8083  last_time: 0.9097  data_time: 0.0179  last_data_time: 0.0122   lr: 0.01  max_mem: 10411M
[32m[06/24 18:56:12 d2.utils.events]: [0m eta: 2:15:36  iter: 8019  total_loss: 1.697  loss_fcos_loc: 0.2123  loss_fcos_ctr: 0.617  loss_fcos_vfcls: 0.7037  loss_prj: 0.08708  loss_pairwise: 0.03004  loss_mask: 0.0357  loss_mask_affinity: 0.006167    time: 0.8083  last_time: 0.8256  data_time: 0.0165  last_data_time: 0.0155   lr: 0.01  max_mem: 10411M
[32m[06/24 18:56:28 d2.utils.events]: [0m eta: 2:15:20  iter: 8039  total_loss: 1.673  loss_fcos_loc: 0.2036  loss_fcos_ctr: 0.6145  loss_fcos_vfcls: 0.6856  loss_prj: 0.08505  loss_pairwise: 0.03016  loss_mask: 0.03442  loss_mask_affinity: 0.006421    time: 0.8083  last_time: 0.8474  data_time: 0.0173  last_data_time: 0.0228   lr: 0.01  max_mem: 10411M
[32m[06/24 18:56:44 d2.utils.events]: [0m eta: 2:15:04  iter: 8059  total_loss: 1.689  loss_fcos_loc: 0.213  loss_fcos_ctr: 0.6168  loss_fcos_vfcls: 0.6907  loss_prj: 0.08978  loss_pairwise: 0.0262  loss_mask: 0.03555  loss_mask_affinity: 0.006347    time: 0.8083  last_time: 0.7652  data_time: 0.0160  last_data_time: 0.0100   lr: 0.01  max_mem: 10411M
[32m[06/24 18:57:00 d2.utils.events]: [0m eta: 2:14:48  iter: 8079  total_loss: 1.679  loss_fcos_loc: 0.2125  loss_fcos_ctr: 0.6157  loss_fcos_vfcls: 0.6868  loss_prj: 0.08406  loss_pairwise: 0.03207  loss_mask: 0.03557  loss_mask_affinity: 0.005817    time: 0.8083  last_time: 0.7379  data_time: 0.0152  last_data_time: 0.0095   lr: 0.01  max_mem: 10411M
[32m[06/24 18:57:17 d2.utils.events]: [0m eta: 2:14:37  iter: 8099  total_loss: 1.712  loss_fcos_loc: 0.2073  loss_fcos_ctr: 0.6121  loss_fcos_vfcls: 0.7203  loss_prj: 0.09132  loss_pairwise: 0.02959  loss_mask: 0.03892  loss_mask_affinity: 0.006767    time: 0.8084  last_time: 0.8606  data_time: 0.0179  last_data_time: 0.0139   lr: 0.01  max_mem: 10411M
[32m[06/24 18:57:34 d2.utils.events]: [0m eta: 2:14:22  iter: 8119  total_loss: 1.714  loss_fcos_loc: 0.2237  loss_fcos_ctr: 0.6198  loss_fcos_vfcls: 0.6927  loss_prj: 0.1004  loss_pairwise: 0.03073  loss_mask: 0.03724  loss_mask_affinity: 0.00658    time: 0.8085  last_time: 0.7998  data_time: 0.0154  last_data_time: 0.0117   lr: 0.01  max_mem: 10411M
[32m[06/24 18:57:50 d2.utils.events]: [0m eta: 2:14:20  iter: 8139  total_loss: 1.723  loss_fcos_loc: 0.2183  loss_fcos_ctr: 0.617  loss_fcos_vfcls: 0.6965  loss_prj: 0.09863  loss_pairwise: 0.03293  loss_mask: 0.03869  loss_mask_affinity: 0.006743    time: 0.8085  last_time: 0.8064  data_time: 0.0165  last_data_time: 0.0168   lr: 0.01  max_mem: 10411M
[32m[06/24 18:58:07 d2.utils.events]: [0m eta: 2:14:08  iter: 8159  total_loss: 1.734  loss_fcos_loc: 0.2201  loss_fcos_ctr: 0.6188  loss_fcos_vfcls: 0.7095  loss_prj: 0.09868  loss_pairwise: 0.03152  loss_mask: 0.03857  loss_mask_affinity: 0.006796    time: 0.8086  last_time: 0.8519  data_time: 0.0191  last_data_time: 0.0186   lr: 0.01  max_mem: 10411M
[32m[06/24 18:58:24 d2.utils.events]: [0m eta: 2:13:53  iter: 8179  total_loss: 1.682  loss_fcos_loc: 0.2175  loss_fcos_ctr: 0.6155  loss_fcos_vfcls: 0.6761  loss_prj: 0.09129  loss_pairwise: 0.03024  loss_mask: 0.03786  loss_mask_affinity: 0.006833    time: 0.8087  last_time: 0.7616  data_time: 0.0189  last_data_time: 0.0121   lr: 0.01  max_mem: 10411M
[32m[06/24 18:58:40 d2.utils.events]: [0m eta: 2:13:31  iter: 8199  total_loss: 1.656  loss_fcos_loc: 0.2049  loss_fcos_ctr: 0.6126  loss_fcos_vfcls: 0.6898  loss_prj: 0.08489  loss_pairwise: 0.0299  loss_mask: 0.03646  loss_mask_affinity: 0.006309    time: 0.8086  last_time: 0.7018  data_time: 0.0154  last_data_time: 0.0150   lr: 0.01  max_mem: 10411M
[32m[06/24 18:58:56 d2.utils.events]: [0m eta: 2:13:21  iter: 8219  total_loss: 1.677  loss_fcos_loc: 0.213  loss_fcos_ctr: 0.6141  loss_fcos_vfcls: 0.6688  loss_prj: 0.09292  loss_pairwise: 0.03194  loss_mask: 0.03536  loss_mask_affinity: 0.006959    time: 0.8087  last_time: 0.7819  data_time: 0.0153  last_data_time: 0.0104   lr: 0.01  max_mem: 10411M
[32m[06/24 18:59:13 d2.utils.events]: [0m eta: 2:13:03  iter: 8239  total_loss: 1.701  loss_fcos_loc: 0.2056  loss_fcos_ctr: 0.6138  loss_fcos_vfcls: 0.7111  loss_prj: 0.09085  loss_pairwise: 0.02786  loss_mask: 0.03683  loss_mask_affinity: 0.006449    time: 0.8087  last_time: 0.8189  data_time: 0.0172  last_data_time: 0.0120   lr: 0.01  max_mem: 10411M
[32m[06/24 18:59:29 d2.utils.events]: [0m eta: 2:12:42  iter: 8259  total_loss: 1.674  loss_fcos_loc: 0.1988  loss_fcos_ctr: 0.6137  loss_fcos_vfcls: 0.706  loss_prj: 0.08422  loss_pairwise: 0.02936  loss_mask: 0.03094  loss_mask_affinity: 0.005934    time: 0.8087  last_time: 0.8186  data_time: 0.0172  last_data_time: 0.0147   lr: 0.01  max_mem: 10411M
[32m[06/24 18:59:46 d2.utils.events]: [0m eta: 2:12:25  iter: 8279  total_loss: 1.712  loss_fcos_loc: 0.2148  loss_fcos_ctr: 0.6151  loss_fcos_vfcls: 0.707  loss_prj: 0.0927  loss_pairwise: 0.02923  loss_mask: 0.03863  loss_mask_affinity: 0.006719    time: 0.8087  last_time: 0.8094  data_time: 0.0158  last_data_time: 0.0156   lr: 0.01  max_mem: 10411M
[32m[06/24 19:00:02 d2.utils.events]: [0m eta: 2:12:09  iter: 8299  total_loss: 1.662  loss_fcos_loc: 0.2151  loss_fcos_ctr: 0.6169  loss_fcos_vfcls: 0.6869  loss_prj: 0.09512  loss_pairwise: 0.03053  loss_mask: 0.03936  loss_mask_affinity: 0.006236    time: 0.8088  last_time: 0.8328  data_time: 0.0156  last_data_time: 0.0195   lr: 0.01  max_mem: 10411M
[32m[06/24 19:00:19 d2.utils.events]: [0m eta: 2:11:53  iter: 8319  total_loss: 1.677  loss_fcos_loc: 0.1994  loss_fcos_ctr: 0.611  loss_fcos_vfcls: 0.6976  loss_prj: 0.09224  loss_pairwise: 0.0335  loss_mask: 0.03578  loss_mask_affinity: 0.00667    time: 0.8088  last_time: 0.7338  data_time: 0.0153  last_data_time: 0.0096   lr: 0.01  max_mem: 10411M
[32m[06/24 19:00:35 d2.utils.events]: [0m eta: 2:11:29  iter: 8339  total_loss: 1.707  loss_fcos_loc: 0.2025  loss_fcos_ctr: 0.6132  loss_fcos_vfcls: 0.7121  loss_prj: 0.08613  loss_pairwise: 0.02953  loss_mask: 0.03912  loss_mask_affinity: 0.006483    time: 0.8088  last_time: 0.7742  data_time: 0.0163  last_data_time: 0.0134   lr: 0.01  max_mem: 10411M
[32m[06/24 19:00:52 d2.utils.events]: [0m eta: 2:11:20  iter: 8359  total_loss: 1.651  loss_fcos_loc: 0.2062  loss_fcos_ctr: 0.6155  loss_fcos_vfcls: 0.6614  loss_prj: 0.08683  loss_pairwise: 0.03282  loss_mask: 0.03855  loss_mask_affinity: 0.006658    time: 0.8088  last_time: 0.8170  data_time: 0.0171  last_data_time: 0.0093   lr: 0.01  max_mem: 10411M
[32m[06/24 19:01:08 d2.utils.events]: [0m eta: 2:11:06  iter: 8379  total_loss: 1.697  loss_fcos_loc: 0.2106  loss_fcos_ctr: 0.617  loss_fcos_vfcls: 0.6931  loss_prj: 0.09092  loss_pairwise: 0.03103  loss_mask: 0.03965  loss_mask_affinity: 0.006642    time: 0.8089  last_time: 0.7533  data_time: 0.0208  last_data_time: 0.0449   lr: 0.01  max_mem: 10411M
[32m[06/24 19:01:25 d2.utils.events]: [0m eta: 2:10:53  iter: 8399  total_loss: 1.695  loss_fcos_loc: 0.2111  loss_fcos_ctr: 0.6151  loss_fcos_vfcls: 0.696  loss_prj: 0.09534  loss_pairwise: 0.03003  loss_mask: 0.03807  loss_mask_affinity: 0.006365    time: 0.8089  last_time: 0.7290  data_time: 0.0151  last_data_time: 0.0129   lr: 0.01  max_mem: 10411M
[32m[06/24 19:01:42 d2.utils.events]: [0m eta: 2:10:34  iter: 8419  total_loss: 1.679  loss_fcos_loc: 0.2128  loss_fcos_ctr: 0.6173  loss_fcos_vfcls: 0.6829  loss_prj: 0.09343  loss_pairwise: 0.03323  loss_mask: 0.03867  loss_mask_affinity: 0.00672    time: 0.8090  last_time: 0.8304  data_time: 0.0171  last_data_time: 0.0080   lr: 0.01  max_mem: 10411M
[32m[06/24 19:01:58 d2.utils.events]: [0m eta: 2:10:12  iter: 8439  total_loss: 1.676  loss_fcos_loc: 0.1901  loss_fcos_ctr: 0.6116  loss_fcos_vfcls: 0.7119  loss_prj: 0.08119  loss_pairwise: 0.02869  loss_mask: 0.03638  loss_mask_affinity: 0.006023    time: 0.8090  last_time: 0.8641  data_time: 0.0172  last_data_time: 0.0142   lr: 0.01  max_mem: 10411M
[32m[06/24 19:02:15 d2.utils.events]: [0m eta: 2:09:59  iter: 8459  total_loss: 1.714  loss_fcos_loc: 0.2166  loss_fcos_ctr: 0.6171  loss_fcos_vfcls: 0.7047  loss_prj: 0.08715  loss_pairwise: 0.02964  loss_mask: 0.03738  loss_mask_affinity: 0.006721    time: 0.8091  last_time: 0.7965  data_time: 0.0193  last_data_time: 0.0154   lr: 0.01  max_mem: 10411M
[32m[06/24 19:02:31 d2.utils.events]: [0m eta: 2:09:46  iter: 8479  total_loss: 1.667  loss_fcos_loc: 0.2049  loss_fcos_ctr: 0.6153  loss_fcos_vfcls: 0.6752  loss_prj: 0.08795  loss_pairwise: 0.03182  loss_mask: 0.03802  loss_mask_affinity: 0.006985    time: 0.8091  last_time: 0.9020  data_time: 0.0184  last_data_time: 0.0143   lr: 0.01  max_mem: 10411M
[32m[06/24 19:02:48 d2.utils.events]: [0m eta: 2:09:40  iter: 8499  total_loss: 1.674  loss_fcos_loc: 0.2168  loss_fcos_ctr: 0.6164  loss_fcos_vfcls: 0.6732  loss_prj: 0.09402  loss_pairwise: 0.03415  loss_mask: 0.03905  loss_mask_affinity: 0.007047    time: 0.8092  last_time: 0.7101  data_time: 0.0151  last_data_time: 0.0102   lr: 0.01  max_mem: 10411M
[32m[06/24 19:03:04 d2.utils.events]: [0m eta: 2:09:21  iter: 8519  total_loss: 1.642  loss_fcos_loc: 0.2067  loss_fcos_ctr: 0.6168  loss_fcos_vfcls: 0.6984  loss_prj: 0.08609  loss_pairwise: 0.02699  loss_mask: 0.0345  loss_mask_affinity: 0.006224    time: 0.8092  last_time: 0.8289  data_time: 0.0174  last_data_time: 0.0097   lr: 0.01  max_mem: 10411M
[32m[06/24 19:03:21 d2.utils.events]: [0m eta: 2:09:15  iter: 8539  total_loss: 1.666  loss_fcos_loc: 0.206  loss_fcos_ctr: 0.6142  loss_fcos_vfcls: 0.6999  loss_prj: 0.08726  loss_pairwise: 0.03049  loss_mask: 0.03453  loss_mask_affinity: 0.006725    time: 0.8092  last_time: 0.8208  data_time: 0.0180  last_data_time: 0.0220   lr: 0.01  max_mem: 10411M
[32m[06/24 19:03:37 d2.utils.events]: [0m eta: 2:08:59  iter: 8559  total_loss: 1.686  loss_fcos_loc: 0.2069  loss_fcos_ctr: 0.6175  loss_fcos_vfcls: 0.6943  loss_prj: 0.09288  loss_pairwise: 0.02834  loss_mask: 0.03687  loss_mask_affinity: 0.006832    time: 0.8092  last_time: 0.8523  data_time: 0.0185  last_data_time: 0.0265   lr: 0.01  max_mem: 10411M
[32m[06/24 19:03:53 d2.utils.events]: [0m eta: 2:08:42  iter: 8579  total_loss: 1.678  loss_fcos_loc: 0.2194  loss_fcos_ctr: 0.6137  loss_fcos_vfcls: 0.6745  loss_prj: 0.09552  loss_pairwise: 0.03286  loss_mask: 0.03792  loss_mask_affinity: 0.006721    time: 0.8092  last_time: 0.8027  data_time: 0.0165  last_data_time: 0.0129   lr: 0.01  max_mem: 10411M
[32m[06/24 19:04:09 d2.utils.events]: [0m eta: 2:08:28  iter: 8599  total_loss: 1.649  loss_fcos_loc: 0.2039  loss_fcos_ctr: 0.6113  loss_fcos_vfcls: 0.6922  loss_prj: 0.08826  loss_pairwise: 0.0329  loss_mask: 0.03703  loss_mask_affinity: 0.006225    time: 0.8092  last_time: 0.8360  data_time: 0.0162  last_data_time: 0.0174   lr: 0.01  max_mem: 10411M
[32m[06/24 19:04:26 d2.utils.events]: [0m eta: 2:08:19  iter: 8619  total_loss: 1.671  loss_fcos_loc: 0.2041  loss_fcos_ctr: 0.6116  loss_fcos_vfcls: 0.7029  loss_prj: 0.08594  loss_pairwise: 0.02867  loss_mask: 0.03691  loss_mask_affinity: 0.006701    time: 0.8093  last_time: 0.9219  data_time: 0.0171  last_data_time: 0.0125   lr: 0.01  max_mem: 10411M
[32m[06/24 19:04:43 d2.utils.events]: [0m eta: 2:07:58  iter: 8639  total_loss: 1.654  loss_fcos_loc: 0.2106  loss_fcos_ctr: 0.6133  loss_fcos_vfcls: 0.6711  loss_prj: 0.09103  loss_pairwise: 0.02939  loss_mask: 0.03978  loss_mask_affinity: 0.006931    time: 0.8093  last_time: 0.7891  data_time: 0.0166  last_data_time: 0.0354   lr: 0.01  max_mem: 10411M
[32m[06/24 19:04:59 d2.utils.events]: [0m eta: 2:07:39  iter: 8659  total_loss: 1.693  loss_fcos_loc: 0.2098  loss_fcos_ctr: 0.6145  loss_fcos_vfcls: 0.6851  loss_prj: 0.09268  loss_pairwise: 0.02766  loss_mask: 0.03973  loss_mask_affinity: 0.007099    time: 0.8093  last_time: 0.7573  data_time: 0.0181  last_data_time: 0.0141   lr: 0.01  max_mem: 10411M
[32m[06/24 19:05:15 d2.utils.events]: [0m eta: 2:07:28  iter: 8679  total_loss: 1.659  loss_fcos_loc: 0.2056  loss_fcos_ctr: 0.6143  loss_fcos_vfcls: 0.682  loss_prj: 0.08895  loss_pairwise: 0.02998  loss_mask: 0.03681  loss_mask_affinity: 0.006553    time: 0.8093  last_time: 0.8238  data_time: 0.0153  last_data_time: 0.0160   lr: 0.01  max_mem: 10411M
[32m[06/24 19:05:32 d2.utils.events]: [0m eta: 2:07:09  iter: 8699  total_loss: 1.683  loss_fcos_loc: 0.2168  loss_fcos_ctr: 0.6161  loss_fcos_vfcls: 0.6774  loss_prj: 0.09079  loss_pairwise: 0.02648  loss_mask: 0.03907  loss_mask_affinity: 0.006581    time: 0.8094  last_time: 0.8641  data_time: 0.0150  last_data_time: 0.0202   lr: 0.01  max_mem: 10411M
[32m[06/24 19:05:48 d2.utils.events]: [0m eta: 2:06:55  iter: 8719  total_loss: 1.695  loss_fcos_loc: 0.2173  loss_fcos_ctr: 0.6161  loss_fcos_vfcls: 0.6732  loss_prj: 0.09624  loss_pairwise: 0.02818  loss_mask: 0.0378  loss_mask_affinity: 0.00664    time: 0.8093  last_time: 0.7724  data_time: 0.0164  last_data_time: 0.0107   lr: 0.01  max_mem: 10411M
[32m[06/24 19:06:04 d2.utils.events]: [0m eta: 2:06:31  iter: 8739  total_loss: 1.64  loss_fcos_loc: 0.203  loss_fcos_ctr: 0.6124  loss_fcos_vfcls: 0.6777  loss_prj: 0.08453  loss_pairwise: 0.0298  loss_mask: 0.03774  loss_mask_affinity: 0.007002    time: 0.8093  last_time: 0.7618  data_time: 0.0167  last_data_time: 0.0219   lr: 0.01  max_mem: 10411M
[32m[06/24 19:06:20 d2.utils.events]: [0m eta: 2:06:16  iter: 8759  total_loss: 1.699  loss_fcos_loc: 0.2127  loss_fcos_ctr: 0.6175  loss_fcos_vfcls: 0.6922  loss_prj: 0.092  loss_pairwise: 0.02856  loss_mask: 0.04045  loss_mask_affinity: 0.007017    time: 0.8093  last_time: 0.8871  data_time: 0.0167  last_data_time: 0.0146   lr: 0.01  max_mem: 10411M
[32m[06/24 19:06:37 d2.utils.events]: [0m eta: 2:05:59  iter: 8779  total_loss: 1.688  loss_fcos_loc: 0.2024  loss_fcos_ctr: 0.6116  loss_fcos_vfcls: 0.7151  loss_prj: 0.08566  loss_pairwise: 0.03265  loss_mask: 0.03693  loss_mask_affinity: 0.007162    time: 0.8094  last_time: 0.7708  data_time: 0.0169  last_data_time: 0.0097   lr: 0.01  max_mem: 10411M
[32m[06/24 19:06:53 d2.utils.events]: [0m eta: 2:05:39  iter: 8799  total_loss: 1.7  loss_fcos_loc: 0.2135  loss_fcos_ctr: 0.617  loss_fcos_vfcls: 0.6889  loss_prj: 0.08739  loss_pairwise: 0.03078  loss_mask: 0.04186  loss_mask_affinity: 0.006942    time: 0.8094  last_time: 0.7709  data_time: 0.0143  last_data_time: 0.0161   lr: 0.01  max_mem: 10411M
[32m[06/24 19:07:10 d2.utils.events]: [0m eta: 2:05:15  iter: 8819  total_loss: 1.642  loss_fcos_loc: 0.1994  loss_fcos_ctr: 0.6127  loss_fcos_vfcls: 0.6592  loss_prj: 0.08577  loss_pairwise: 0.0316  loss_mask: 0.03477  loss_mask_affinity: 0.006614    time: 0.8094  last_time: 0.8439  data_time: 0.0163  last_data_time: 0.0123   lr: 0.01  max_mem: 10411M
[32m[06/24 19:07:26 d2.utils.events]: [0m eta: 2:05:09  iter: 8839  total_loss: 1.704  loss_fcos_loc: 0.2097  loss_fcos_ctr: 0.6148  loss_fcos_vfcls: 0.7064  loss_prj: 0.08565  loss_pairwise: 0.03048  loss_mask: 0.03724  loss_mask_affinity: 0.007284    time: 0.8095  last_time: 0.8542  data_time: 0.0198  last_data_time: 0.0317   lr: 0.01  max_mem: 10411M
[32m[06/24 19:07:43 d2.utils.events]: [0m eta: 2:04:58  iter: 8859  total_loss: 1.677  loss_fcos_loc: 0.2076  loss_fcos_ctr: 0.6138  loss_fcos_vfcls: 0.672  loss_prj: 0.08329  loss_pairwise: 0.03034  loss_mask: 0.03462  loss_mask_affinity: 0.0066    time: 0.8095  last_time: 0.7541  data_time: 0.0175  last_data_time: 0.0203   lr: 0.01  max_mem: 10411M
[32m[06/24 19:07:59 d2.utils.events]: [0m eta: 2:04:37  iter: 8879  total_loss: 1.658  loss_fcos_loc: 0.2122  loss_fcos_ctr: 0.6139  loss_fcos_vfcls: 0.6837  loss_prj: 0.09487  loss_pairwise: 0.03048  loss_mask: 0.03765  loss_mask_affinity: 0.00698    time: 0.8095  last_time: 0.8391  data_time: 0.0147  last_data_time: 0.0188   lr: 0.01  max_mem: 10411M
[32m[06/24 19:08:15 d2.utils.events]: [0m eta: 2:04:19  iter: 8899  total_loss: 1.695  loss_fcos_loc: 0.2098  loss_fcos_ctr: 0.615  loss_fcos_vfcls: 0.7006  loss_prj: 0.09158  loss_pairwise: 0.02987  loss_mask: 0.04325  loss_mask_affinity: 0.007395    time: 0.8094  last_time: 0.7095  data_time: 0.0150  last_data_time: 0.0106   lr: 0.01  max_mem: 10411M
[32m[06/24 19:08:31 d2.utils.events]: [0m eta: 2:04:04  iter: 8919  total_loss: 1.7  loss_fcos_loc: 0.2086  loss_fcos_ctr: 0.6142  loss_fcos_vfcls: 0.7029  loss_prj: 0.0888  loss_pairwise: 0.03291  loss_mask: 0.0343  loss_mask_affinity: 0.00675    time: 0.8095  last_time: 0.8528  data_time: 0.0171  last_data_time: 0.0148   lr: 0.01  max_mem: 10411M
[32m[06/24 19:08:48 d2.utils.events]: [0m eta: 2:03:45  iter: 8939  total_loss: 1.678  loss_fcos_loc: 0.206  loss_fcos_ctr: 0.6155  loss_fcos_vfcls: 0.6886  loss_prj: 0.09519  loss_pairwise: 0.03187  loss_mask: 0.03804  loss_mask_affinity: 0.007052    time: 0.8095  last_time: 0.7620  data_time: 0.0152  last_data_time: 0.0129   lr: 0.01  max_mem: 10411M
[32m[06/24 19:09:03 d2.utils.events]: [0m eta: 2:03:28  iter: 8959  total_loss: 1.674  loss_fcos_loc: 0.2051  loss_fcos_ctr: 0.6153  loss_fcos_vfcls: 0.6851  loss_prj: 0.092  loss_pairwise: 0.0295  loss_mask: 0.04057  loss_mask_affinity: 0.006419    time: 0.8095  last_time: 0.8605  data_time: 0.0159  last_data_time: 0.0200   lr: 0.01  max_mem: 10411M
[32m[06/24 19:09:20 d2.utils.events]: [0m eta: 2:03:07  iter: 8979  total_loss: 1.678  loss_fcos_loc: 0.1951  loss_fcos_ctr: 0.6164  loss_fcos_vfcls: 0.6837  loss_prj: 0.08441  loss_pairwise: 0.02899  loss_mask: 0.03904  loss_mask_affinity: 0.007274    time: 0.8095  last_time: 0.7336  data_time: 0.0149  last_data_time: 0.0149   lr: 0.01  max_mem: 10411M
[32m[06/24 19:09:36 d2.utils.events]: [0m eta: 2:02:46  iter: 8999  total_loss: 1.68  loss_fcos_loc: 0.1994  loss_fcos_ctr: 0.6147  loss_fcos_vfcls: 0.6687  loss_prj: 0.08327  loss_pairwise: 0.03233  loss_mask: 0.03633  loss_mask_affinity: 0.007122    time: 0.8095  last_time: 0.8373  data_time: 0.0155  last_data_time: 0.0150   lr: 0.01  max_mem: 10411M
[32m[06/24 19:09:52 d2.utils.events]: [0m eta: 2:02:17  iter: 9019  total_loss: 1.681  loss_fcos_loc: 0.2027  loss_fcos_ctr: 0.6127  loss_fcos_vfcls: 0.6962  loss_prj: 0.09186  loss_pairwise: 0.03032  loss_mask: 0.03759  loss_mask_affinity: 0.007166    time: 0.8094  last_time: 0.7642  data_time: 0.0169  last_data_time: 0.0151   lr: 0.01  max_mem: 10411M
[32m[06/24 19:10:09 d2.utils.events]: [0m eta: 2:01:59  iter: 9039  total_loss: 1.662  loss_fcos_loc: 0.1943  loss_fcos_ctr: 0.6118  loss_fcos_vfcls: 0.6865  loss_prj: 0.08934  loss_pairwise: 0.03021  loss_mask: 0.03961  loss_mask_affinity: 0.007152    time: 0.8094  last_time: 0.8260  data_time: 0.0190  last_data_time: 0.0157   lr: 0.01  max_mem: 10411M
[32m[06/24 19:10:26 d2.utils.events]: [0m eta: 2:01:41  iter: 9059  total_loss: 1.676  loss_fcos_loc: 0.2015  loss_fcos_ctr: 0.6169  loss_fcos_vfcls: 0.6842  loss_prj: 0.0848  loss_pairwise: 0.03136  loss_mask: 0.03881  loss_mask_affinity: 0.007088    time: 0.8095  last_time: 0.7801  data_time: 0.0176  last_data_time: 0.0163   lr: 0.01  max_mem: 10411M
[32m[06/24 19:10:42 d2.utils.events]: [0m eta: 2:01:24  iter: 9079  total_loss: 1.642  loss_fcos_loc: 0.2013  loss_fcos_ctr: 0.6126  loss_fcos_vfcls: 0.6762  loss_prj: 0.08188  loss_pairwise: 0.03202  loss_mask: 0.0385  loss_mask_affinity: 0.006983    time: 0.8095  last_time: 0.8046  data_time: 0.0170  last_data_time: 0.0267   lr: 0.01  max_mem: 10411M
[32m[06/24 19:10:58 d2.utils.events]: [0m eta: 2:01:00  iter: 9099  total_loss: 1.667  loss_fcos_loc: 0.1959  loss_fcos_ctr: 0.6141  loss_fcos_vfcls: 0.6864  loss_prj: 0.07777  loss_pairwise: 0.02971  loss_mask: 0.03444  loss_mask_affinity: 0.006927    time: 0.8094  last_time: 0.7990  data_time: 0.0188  last_data_time: 0.0209   lr: 0.01  max_mem: 10411M
[32m[06/24 19:11:14 d2.utils.events]: [0m eta: 2:00:22  iter: 9119  total_loss: 1.704  loss_fcos_loc: 0.2166  loss_fcos_ctr: 0.6189  loss_fcos_vfcls: 0.679  loss_prj: 0.09409  loss_pairwise: 0.03085  loss_mask: 0.04396  loss_mask_affinity: 0.006935    time: 0.8094  last_time: 0.7132  data_time: 0.0143  last_data_time: 0.0133   lr: 0.01  max_mem: 10411M
[32m[06/24 19:11:30 d2.utils.events]: [0m eta: 2:00:06  iter: 9139  total_loss: 1.668  loss_fcos_loc: 0.2149  loss_fcos_ctr: 0.6178  loss_fcos_vfcls: 0.6792  loss_prj: 0.09379  loss_pairwise: 0.03209  loss_mask: 0.04072  loss_mask_affinity: 0.007092    time: 0.8094  last_time: 0.8815  data_time: 0.0180  last_data_time: 0.0152   lr: 0.01  max_mem: 10411M
[32m[06/24 19:11:46 d2.utils.events]: [0m eta: 1:59:45  iter: 9159  total_loss: 1.675  loss_fcos_loc: 0.214  loss_fcos_ctr: 0.6168  loss_fcos_vfcls: 0.6592  loss_prj: 0.09042  loss_pairwise: 0.02695  loss_mask: 0.03697  loss_mask_affinity: 0.007073    time: 0.8094  last_time: 0.8148  data_time: 0.0168  last_data_time: 0.0232   lr: 0.01  max_mem: 10411M
[32m[06/24 19:12:02 d2.utils.events]: [0m eta: 1:59:14  iter: 9179  total_loss: 1.671  loss_fcos_loc: 0.2027  loss_fcos_ctr: 0.6138  loss_fcos_vfcls: 0.6967  loss_prj: 0.08843  loss_pairwise: 0.02834  loss_mask: 0.04044  loss_mask_affinity: 0.006835    time: 0.8094  last_time: 0.8543  data_time: 0.0154  last_data_time: 0.0128   lr: 0.01  max_mem: 10411M
[32m[06/24 19:12:19 d2.utils.events]: [0m eta: 1:59:13  iter: 9199  total_loss: 1.7  loss_fcos_loc: 0.2232  loss_fcos_ctr: 0.6163  loss_fcos_vfcls: 0.6965  loss_prj: 0.09246  loss_pairwise: 0.03273  loss_mask: 0.04342  loss_mask_affinity: 0.007666    time: 0.8094  last_time: 0.9180  data_time: 0.0157  last_data_time: 0.0142   lr: 0.01  max_mem: 10411M
[32m[06/24 19:12:35 d2.utils.events]: [0m eta: 1:58:46  iter: 9219  total_loss: 1.648  loss_fcos_loc: 0.2034  loss_fcos_ctr: 0.6145  loss_fcos_vfcls: 0.6501  loss_prj: 0.08695  loss_pairwise: 0.02908  loss_mask: 0.03751  loss_mask_affinity: 0.007519    time: 0.8095  last_time: 0.8473  data_time: 0.0157  last_data_time: 0.0071   lr: 0.01  max_mem: 10411M
[32m[06/24 19:12:52 d2.utils.events]: [0m eta: 1:58:35  iter: 9239  total_loss: 1.694  loss_fcos_loc: 0.2098  loss_fcos_ctr: 0.6172  loss_fcos_vfcls: 0.6787  loss_prj: 0.09464  loss_pairwise: 0.03138  loss_mask: 0.03963  loss_mask_affinity: 0.007502    time: 0.8095  last_time: 0.8300  data_time: 0.0162  last_data_time: 0.0151   lr: 0.01  max_mem: 10411M
[32m[06/24 19:13:08 d2.utils.events]: [0m eta: 1:58:23  iter: 9259  total_loss: 1.67  loss_fcos_loc: 0.2001  loss_fcos_ctr: 0.6133  loss_fcos_vfcls: 0.668  loss_prj: 0.08684  loss_pairwise: 0.0298  loss_mask: 0.03919  loss_mask_affinity: 0.006777    time: 0.8095  last_time: 0.8099  data_time: 0.0165  last_data_time: 0.0355   lr: 0.01  max_mem: 10411M
[32m[06/24 19:13:24 d2.utils.events]: [0m eta: 1:58:08  iter: 9279  total_loss: 1.677  loss_fcos_loc: 0.2107  loss_fcos_ctr: 0.6146  loss_fcos_vfcls: 0.6909  loss_prj: 0.0845  loss_pairwise: 0.03126  loss_mask: 0.03856  loss_mask_affinity: 0.007203    time: 0.8095  last_time: 0.7439  data_time: 0.0172  last_data_time: 0.0101   lr: 0.01  max_mem: 10411M
[32m[06/24 19:13:41 d2.utils.events]: [0m eta: 1:57:50  iter: 9299  total_loss: 1.712  loss_fcos_loc: 0.2094  loss_fcos_ctr: 0.6145  loss_fcos_vfcls: 0.7053  loss_prj: 0.08869  loss_pairwise: 0.03318  loss_mask: 0.03904  loss_mask_affinity: 0.00764    time: 0.8095  last_time: 0.7654  data_time: 0.0196  last_data_time: 0.0147   lr: 0.01  max_mem: 10411M
[32m[06/24 19:13:57 d2.utils.events]: [0m eta: 1:57:34  iter: 9319  total_loss: 1.673  loss_fcos_loc: 0.2081  loss_fcos_ctr: 0.616  loss_fcos_vfcls: 0.6821  loss_prj: 0.08673  loss_pairwise: 0.03076  loss_mask: 0.04041  loss_mask_affinity: 0.007452    time: 0.8095  last_time: 0.8064  data_time: 0.0164  last_data_time: 0.0155   lr: 0.01  max_mem: 10411M
[32m[06/24 19:14:13 d2.utils.events]: [0m eta: 1:57:23  iter: 9339  total_loss: 1.65  loss_fcos_loc: 0.2043  loss_fcos_ctr: 0.6157  loss_fcos_vfcls: 0.6751  loss_prj: 0.0867  loss_pairwise: 0.03  loss_mask: 0.0358  loss_mask_affinity: 0.006787    time: 0.8095  last_time: 0.7025  data_time: 0.0168  last_data_time: 0.0206   lr: 0.01  max_mem: 10411M
[32m[06/24 19:14:30 d2.utils.events]: [0m eta: 1:57:00  iter: 9359  total_loss: 1.656  loss_fcos_loc: 0.1961  loss_fcos_ctr: 0.6123  loss_fcos_vfcls: 0.6848  loss_prj: 0.082  loss_pairwise: 0.02854  loss_mask: 0.03577  loss_mask_affinity: 0.007103    time: 0.8096  last_time: 0.7429  data_time: 0.0153  last_data_time: 0.0147   lr: 0.01  max_mem: 10411M
[32m[06/24 19:14:47 d2.utils.events]: [0m eta: 1:56:38  iter: 9379  total_loss: 1.683  loss_fcos_loc: 0.1986  loss_fcos_ctr: 0.6159  loss_fcos_vfcls: 0.689  loss_prj: 0.08749  loss_pairwise: 0.03203  loss_mask: 0.04126  loss_mask_affinity: 0.007173    time: 0.8096  last_time: 0.7908  data_time: 0.0171  last_data_time: 0.0171   lr: 0.01  max_mem: 10411M
[32m[06/24 19:15:03 d2.utils.events]: [0m eta: 1:56:22  iter: 9399  total_loss: 1.654  loss_fcos_loc: 0.2001  loss_fcos_ctr: 0.6125  loss_fcos_vfcls: 0.6601  loss_prj: 0.0784  loss_pairwise: 0.03272  loss_mask: 0.0393  loss_mask_affinity: 0.007073    time: 0.8096  last_time: 0.9729  data_time: 0.0185  last_data_time: 0.0241   lr: 0.01  max_mem: 10411M
[32m[06/24 19:15:19 d2.utils.events]: [0m eta: 1:55:59  iter: 9419  total_loss: 1.667  loss_fcos_loc: 0.2049  loss_fcos_ctr: 0.6151  loss_fcos_vfcls: 0.6637  loss_prj: 0.08647  loss_pairwise: 0.03108  loss_mask: 0.03632  loss_mask_affinity: 0.007044    time: 0.8096  last_time: 0.7364  data_time: 0.0166  last_data_time: 0.0159   lr: 0.01  max_mem: 10411M
[32m[06/24 19:15:36 d2.utils.events]: [0m eta: 1:55:44  iter: 9439  total_loss: 1.664  loss_fcos_loc: 0.1961  loss_fcos_ctr: 0.6156  loss_fcos_vfcls: 0.6763  loss_prj: 0.08726  loss_pairwise: 0.031  loss_mask: 0.04013  loss_mask_affinity: 0.007043    time: 0.8097  last_time: 0.8139  data_time: 0.0166  last_data_time: 0.0137   lr: 0.01  max_mem: 10411M
[32m[06/24 19:15:52 d2.utils.events]: [0m eta: 1:55:25  iter: 9459  total_loss: 1.689  loss_fcos_loc: 0.2043  loss_fcos_ctr: 0.6164  loss_fcos_vfcls: 0.683  loss_prj: 0.08919  loss_pairwise: 0.03242  loss_mask: 0.04118  loss_mask_affinity: 0.007735    time: 0.8097  last_time: 0.7733  data_time: 0.0168  last_data_time: 0.0105   lr: 0.01  max_mem: 10411M
[32m[06/24 19:16:08 d2.utils.events]: [0m eta: 1:55:08  iter: 9479  total_loss: 1.646  loss_fcos_loc: 0.207  loss_fcos_ctr: 0.6131  loss_fcos_vfcls: 0.6741  loss_prj: 0.08617  loss_pairwise: 0.02868  loss_mask: 0.04116  loss_mask_affinity: 0.007128    time: 0.8097  last_time: 0.8170  data_time: 0.0146  last_data_time: 0.0128   lr: 0.01  max_mem: 10411M
[32m[06/24 19:16:25 d2.utils.events]: [0m eta: 1:54:52  iter: 9499  total_loss: 1.68  loss_fcos_loc: 0.2086  loss_fcos_ctr: 0.6137  loss_fcos_vfcls: 0.6753  loss_prj: 0.08267  loss_pairwise: 0.02874  loss_mask: 0.04037  loss_mask_affinity: 0.007301    time: 0.8097  last_time: 0.7846  data_time: 0.0172  last_data_time: 0.0250   lr: 0.01  max_mem: 10411M
[32m[06/24 19:16:41 d2.utils.events]: [0m eta: 1:54:37  iter: 9519  total_loss: 1.678  loss_fcos_loc: 0.2039  loss_fcos_ctr: 0.6131  loss_fcos_vfcls: 0.689  loss_prj: 0.08057  loss_pairwise: 0.03204  loss_mask: 0.03965  loss_mask_affinity: 0.006957    time: 0.8097  last_time: 0.8758  data_time: 0.0152  last_data_time: 0.0175   lr: 0.01  max_mem: 10411M
[32m[06/24 19:16:58 d2.utils.events]: [0m eta: 1:54:19  iter: 9539  total_loss: 1.663  loss_fcos_loc: 0.2069  loss_fcos_ctr: 0.6162  loss_fcos_vfcls: 0.6628  loss_prj: 0.09378  loss_pairwise: 0.03014  loss_mask: 0.03956  loss_mask_affinity: 0.007413    time: 0.8097  last_time: 0.7601  data_time: 0.0143  last_data_time: 0.0161   lr: 0.01  max_mem: 10411M
[32m[06/24 19:17:13 d2.utils.events]: [0m eta: 1:53:56  iter: 9559  total_loss: 1.676  loss_fcos_loc: 0.1932  loss_fcos_ctr: 0.6115  loss_fcos_vfcls: 0.6904  loss_prj: 0.0872  loss_pairwise: 0.02946  loss_mask: 0.0407  loss_mask_affinity: 0.006953    time: 0.8097  last_time: 0.7930  data_time: 0.0157  last_data_time: 0.0156   lr: 0.01  max_mem: 10411M
[32m[06/24 19:17:30 d2.utils.events]: [0m eta: 1:53:42  iter: 9579  total_loss: 1.718  loss_fcos_loc: 0.2013  loss_fcos_ctr: 0.6147  loss_fcos_vfcls: 0.6896  loss_prj: 0.08254  loss_pairwise: 0.03217  loss_mask: 0.03671  loss_mask_affinity: 0.007599    time: 0.8097  last_time: 0.8406  data_time: 0.0172  last_data_time: 0.0119   lr: 0.01  max_mem: 10411M
[32m[06/24 19:17:46 d2.utils.events]: [0m eta: 1:53:17  iter: 9599  total_loss: 1.645  loss_fcos_loc: 0.2011  loss_fcos_ctr: 0.6112  loss_fcos_vfcls: 0.6754  loss_prj: 0.08642  loss_pairwise: 0.02822  loss_mask: 0.03686  loss_mask_affinity: 0.007276    time: 0.8097  last_time: 0.7301  data_time: 0.0155  last_data_time: 0.0125   lr: 0.01  max_mem: 10411M
[32m[06/24 19:18:02 d2.utils.events]: [0m eta: 1:52:58  iter: 9619  total_loss: 1.661  loss_fcos_loc: 0.191  loss_fcos_ctr: 0.6143  loss_fcos_vfcls: 0.6866  loss_prj: 0.07888  loss_pairwise: 0.02945  loss_mask: 0.03647  loss_mask_affinity: 0.007132    time: 0.8097  last_time: 0.7862  data_time: 0.0187  last_data_time: 0.0221   lr: 0.01  max_mem: 10411M
[32m[06/24 19:18:21 d2.utils.events]: [0m eta: 1:52:38  iter: 9639  total_loss: 1.652  loss_fcos_loc: 0.1949  loss_fcos_ctr: 0.6109  loss_fcos_vfcls: 0.6802  loss_prj: 0.07779  loss_pairwise: 0.03092  loss_mask: 0.03647  loss_mask_affinity: 0.007093    time: 0.8096  last_time: 0.6870  data_time: 0.0179  last_data_time: 0.0174   lr: 0.01  max_mem: 10411M
[32m[06/24 19:18:37 d2.utils.events]: [0m eta: 1:52:24  iter: 9659  total_loss: 1.699  loss_fcos_loc: 0.209  loss_fcos_ctr: 0.614  loss_fcos_vfcls: 0.6995  loss_prj: 0.09026  loss_pairwise: 0.03253  loss_mask: 0.04136  loss_mask_affinity: 0.007781    time: 0.8096  last_time: 0.8326  data_time: 0.0159  last_data_time: 0.0107   lr: 0.01  max_mem: 10411M
[32m[06/24 19:18:53 d2.utils.events]: [0m eta: 1:52:04  iter: 9679  total_loss: 1.688  loss_fcos_loc: 0.2079  loss_fcos_ctr: 0.6179  loss_fcos_vfcls: 0.6834  loss_prj: 0.08481  loss_pairwise: 0.03319  loss_mask: 0.04058  loss_mask_affinity: 0.007588    time: 0.8096  last_time: 0.7892  data_time: 0.0170  last_data_time: 0.0163   lr: 0.01  max_mem: 10411M
[32m[06/24 19:19:09 d2.utils.events]: [0m eta: 1:51:46  iter: 9699  total_loss: 1.656  loss_fcos_loc: 0.2021  loss_fcos_ctr: 0.6133  loss_fcos_vfcls: 0.6606  loss_prj: 0.0874  loss_pairwise: 0.03175  loss_mask: 0.0394  loss_mask_affinity: 0.007381    time: 0.8096  last_time: 0.7213  data_time: 0.0171  last_data_time: 0.0091   lr: 0.01  max_mem: 10411M
[32m[06/24 19:19:25 d2.utils.events]: [0m eta: 1:51:32  iter: 9719  total_loss: 1.668  loss_fcos_loc: 0.2056  loss_fcos_ctr: 0.6144  loss_fcos_vfcls: 0.6867  loss_prj: 0.08856  loss_pairwise: 0.03242  loss_mask: 0.03997  loss_mask_affinity: 0.007736    time: 0.8096  last_time: 0.8777  data_time: 0.0189  last_data_time: 0.0218   lr: 0.01  max_mem: 10411M
[32m[06/24 19:19:41 d2.utils.events]: [0m eta: 1:51:17  iter: 9739  total_loss: 1.671  loss_fcos_loc: 0.2124  loss_fcos_ctr: 0.6176  loss_fcos_vfcls: 0.6829  loss_prj: 0.0934  loss_pairwise: 0.03136  loss_mask: 0.0438  loss_mask_affinity: 0.008057    time: 0.8096  last_time: 0.7343  data_time: 0.0158  last_data_time: 0.0229   lr: 0.01  max_mem: 10411M
[32m[06/24 19:19:58 d2.utils.events]: [0m eta: 1:51:01  iter: 9759  total_loss: 1.704  loss_fcos_loc: 0.2114  loss_fcos_ctr: 0.6134  loss_fcos_vfcls: 0.6956  loss_prj: 0.0904  loss_pairwise: 0.03342  loss_mask: 0.04281  loss_mask_affinity: 0.008164    time: 0.8096  last_time: 0.9000  data_time: 0.0158  last_data_time: 0.0144   lr: 0.01  max_mem: 10411M
[32m[06/24 19:20:14 d2.utils.events]: [0m eta: 1:50:44  iter: 9779  total_loss: 1.666  loss_fcos_loc: 0.1947  loss_fcos_ctr: 0.6129  loss_fcos_vfcls: 0.685  loss_prj: 0.08504  loss_pairwise: 0.03075  loss_mask: 0.03989  loss_mask_affinity: 0.007168    time: 0.8096  last_time: 0.8893  data_time: 0.0158  last_data_time: 0.0189   lr: 0.01  max_mem: 10411M
[32m[06/24 19:20:30 d2.utils.events]: [0m eta: 1:50:27  iter: 9799  total_loss: 1.662  loss_fcos_loc: 0.2056  loss_fcos_ctr: 0.6143  loss_fcos_vfcls: 0.6709  loss_prj: 0.08396  loss_pairwise: 0.03169  loss_mask: 0.03738  loss_mask_affinity: 0.007408    time: 0.8096  last_time: 0.9568  data_time: 0.0171  last_data_time: 0.0111   lr: 0.01  max_mem: 10411M
[32m[06/24 19:20:47 d2.utils.events]: [0m eta: 1:50:11  iter: 9819  total_loss: 1.679  loss_fcos_loc: 0.2036  loss_fcos_ctr: 0.612  loss_fcos_vfcls: 0.6809  loss_prj: 0.08711  loss_pairwise: 0.03026  loss_mask: 0.03953  loss_mask_affinity: 0.007364    time: 0.8096  last_time: 0.7926  data_time: 0.0168  last_data_time: 0.0131   lr: 0.01  max_mem: 10411M
[32m[06/24 19:21:03 d2.utils.events]: [0m eta: 1:49:54  iter: 9839  total_loss: 1.694  loss_fcos_loc: 0.2101  loss_fcos_ctr: 0.6149  loss_fcos_vfcls: 0.6823  loss_prj: 0.09428  loss_pairwise: 0.03202  loss_mask: 0.04431  loss_mask_affinity: 0.007717    time: 0.8097  last_time: 0.9281  data_time: 0.0164  last_data_time: 0.0159   lr: 0.01  max_mem: 10411M
[32m[06/24 19:21:20 d2.utils.events]: [0m eta: 1:49:38  iter: 9859  total_loss: 1.653  loss_fcos_loc: 0.204  loss_fcos_ctr: 0.6145  loss_fcos_vfcls: 0.6553  loss_prj: 0.08388  loss_pairwise: 0.03316  loss_mask: 0.043  loss_mask_affinity: 0.007604    time: 0.8097  last_time: 0.7941  data_time: 0.0156  last_data_time: 0.0245   lr: 0.01  max_mem: 10411M
[32m[06/24 19:21:36 d2.utils.events]: [0m eta: 1:49:23  iter: 9879  total_loss: 1.676  loss_fcos_loc: 0.2035  loss_fcos_ctr: 0.616  loss_fcos_vfcls: 0.6915  loss_prj: 0.08658  loss_pairwise: 0.03351  loss_mask: 0.0396  loss_mask_affinity: 0.007889    time: 0.8097  last_time: 0.8332  data_time: 0.0202  last_data_time: 0.0206   lr: 0.01  max_mem: 10411M
[32m[06/24 19:21:53 d2.utils.events]: [0m eta: 1:49:07  iter: 9899  total_loss: 1.66  loss_fcos_loc: 0.2067  loss_fcos_ctr: 0.6138  loss_fcos_vfcls: 0.671  loss_prj: 0.09331  loss_pairwise: 0.03281  loss_mask: 0.04377  loss_mask_affinity: 0.007824    time: 0.8097  last_time: 0.7532  data_time: 0.0171  last_data_time: 0.0122   lr: 0.01  max_mem: 10411M
[32m[06/24 19:22:08 d2.utils.events]: [0m eta: 1:48:45  iter: 9919  total_loss: 1.668  loss_fcos_loc: 0.1995  loss_fcos_ctr: 0.61  loss_fcos_vfcls: 0.6677  loss_prj: 0.08101  loss_pairwise: 0.03271  loss_mask: 0.04214  loss_mask_affinity: 0.007418    time: 0.8097  last_time: 0.7479  data_time: 0.0171  last_data_time: 0.0128   lr: 0.01  max_mem: 10411M
[32m[06/24 19:22:25 d2.utils.events]: [0m eta: 1:48:34  iter: 9939  total_loss: 1.65  loss_fcos_loc: 0.2094  loss_fcos_ctr: 0.6158  loss_fcos_vfcls: 0.6536  loss_prj: 0.08611  loss_pairwise: 0.03085  loss_mask: 0.04446  loss_mask_affinity: 0.007792    time: 0.8097  last_time: 0.8088  data_time: 0.0169  last_data_time: 0.0198   lr: 0.01  max_mem: 10411M
[32m[06/24 19:22:41 d2.utils.events]: [0m eta: 1:48:17  iter: 9959  total_loss: 1.625  loss_fcos_loc: 0.1971  loss_fcos_ctr: 0.6108  loss_fcos_vfcls: 0.6685  loss_prj: 0.07953  loss_pairwise: 0.02825  loss_mask: 0.03735  loss_mask_affinity: 0.007363    time: 0.8097  last_time: 0.7523  data_time: 0.0154  last_data_time: 0.0114   lr: 0.01  max_mem: 10411M
[32m[06/24 19:22:57 d2.utils.events]: [0m eta: 1:47:57  iter: 9979  total_loss: 1.614  loss_fcos_loc: 0.1994  loss_fcos_ctr: 0.6151  loss_fcos_vfcls: 0.6516  loss_prj: 0.08597  loss_pairwise: 0.03234  loss_mask: 0.03776  loss_mask_affinity: 0.007257    time: 0.8097  last_time: 0.7955  data_time: 0.0140  last_data_time: 0.0102   lr: 0.01  max_mem: 10411M
[32m[06/24 19:23:14 fvcore.common.checkpoint]: [0mSaving checkpoint to /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_1x/model_0009999.pth
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[32m[06/24 19:23:15 d2.data.build]: [0mDistribution of instances among all 20 categories:
[36m|  category   | #instances   |  category   | #instances   |  category  | #instances   |
|:-----------:|:-------------|:-----------:|:-------------|:----------:|:-------------|
|  aeroplane  | 311          |   bicycle   | 389          |    bird    | 576          |
|    boat     | 393          |   bottle    | 657          |    bus     | 254          |
|     car     | 1541         |     cat     | 370          |   chair    | 1374         |
|     cow     | 329          | diningtable | 299          |    dog     | 530          |
|    horse    | 395          |  motorbike  | 369          |   person   | 5227         |
| pottedplant | 592          |    sheep    | 311          |    sofa    | 396          |
|    train    | 302          |  tvmonitor  | 361          |            |              |
|    total    | 14976        |             |              |            |              |[0m
[32m[06/24 19:23:15 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[06/24 19:23:15 d2.data.common]: [0mSerializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[32m[06/24 19:23:15 d2.data.common]: [0mSerializing 4952 elements to byte tensors and concatenating them all ...
[32m[06/24 19:23:16 d2.data.common]: [0mSerialized dataset takes 2.22 MiB
[32m[06/24 19:23:16 d2.evaluation.evaluator]: [0mStart inference on 1238 batches
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[32m[06/24 19:23:20 d2.evaluation.evaluator]: [0mInference done 11/1238. Dataloading: 0.0008 s/iter. Inference: 0.0508 s/iter. Eval: 0.0059 s/iter. Total: 0.0575 s/iter. ETA=0:01:10
[32m[06/24 19:23:25 d2.evaluation.evaluator]: [0mInference done 99/1238. Dataloading: 0.0012 s/iter. Inference: 0.0501 s/iter. Eval: 0.0055 s/iter. Total: 0.0570 s/iter. ETA=0:01:04
[32m[06/24 19:23:30 d2.evaluation.evaluator]: [0mInference done 186/1238. Dataloading: 0.0013 s/iter. Inference: 0.0503 s/iter. Eval: 0.0058 s/iter. Total: 0.0574 s/iter. ETA=0:01:00
[32m[06/24 19:23:35 d2.evaluation.evaluator]: [0mInference done 274/1238. Dataloading: 0.0013 s/iter. Inference: 0.0503 s/iter. Eval: 0.0058 s/iter. Total: 0.0574 s/iter. ETA=0:00:55
[32m[06/24 19:23:40 d2.evaluation.evaluator]: [0mInference done 363/1238. Dataloading: 0.0013 s/iter. Inference: 0.0501 s/iter. Eval: 0.0058 s/iter. Total: 0.0573 s/iter. ETA=0:00:50
[32m[06/24 19:23:45 d2.evaluation.evaluator]: [0mInference done 450/1238. Dataloading: 0.0013 s/iter. Inference: 0.0502 s/iter. Eval: 0.0058 s/iter. Total: 0.0573 s/iter. ETA=0:00:45
[32m[06/24 19:23:50 d2.evaluation.evaluator]: [0mInference done 538/1238. Dataloading: 0.0013 s/iter. Inference: 0.0502 s/iter. Eval: 0.0058 s/iter. Total: 0.0574 s/iter. ETA=0:00:40
[32m[06/24 19:23:55 d2.evaluation.evaluator]: [0mInference done 624/1238. Dataloading: 0.0013 s/iter. Inference: 0.0504 s/iter. Eval: 0.0058 s/iter. Total: 0.0575 s/iter. ETA=0:00:35
[32m[06/24 19:24:00 d2.evaluation.evaluator]: [0mInference done 710/1238. Dataloading: 0.0013 s/iter. Inference: 0.0504 s/iter. Eval: 0.0059 s/iter. Total: 0.0577 s/iter. ETA=0:00:30
[32m[06/24 19:24:05 d2.evaluation.evaluator]: [0mInference done 794/1238. Dataloading: 0.0013 s/iter. Inference: 0.0506 s/iter. Eval: 0.0060 s/iter. Total: 0.0579 s/iter. ETA=0:00:25
[32m[06/24 19:24:10 d2.evaluation.evaluator]: [0mInference done 879/1238. Dataloading: 0.0013 s/iter. Inference: 0.0507 s/iter. Eval: 0.0060 s/iter. Total: 0.0581 s/iter. ETA=0:00:20
[32m[06/24 19:24:15 d2.evaluation.evaluator]: [0mInference done 966/1238. Dataloading: 0.0013 s/iter. Inference: 0.0507 s/iter. Eval: 0.0059 s/iter. Total: 0.0580 s/iter. ETA=0:00:15
[32m[06/24 19:24:20 d2.evaluation.evaluator]: [0mInference done 1053/1238. Dataloading: 0.0013 s/iter. Inference: 0.0507 s/iter. Eval: 0.0059 s/iter. Total: 0.0580 s/iter. ETA=0:00:10
[32m[06/24 19:24:25 d2.evaluation.evaluator]: [0mInference done 1140/1238. Dataloading: 0.0013 s/iter. Inference: 0.0507 s/iter. Eval: 0.0059 s/iter. Total: 0.0580 s/iter. ETA=0:00:05
[32m[06/24 19:24:30 d2.evaluation.evaluator]: [0mInference done 1228/1238. Dataloading: 0.0013 s/iter. Inference: 0.0507 s/iter. Eval: 0.0059 s/iter. Total: 0.0579 s/iter. ETA=0:00:00
[32m[06/24 19:24:31 d2.evaluation.evaluator]: [0mTotal inference time: 0:01:11.754134 (0.058195 s / iter per device, on 4 devices)
[32m[06/24 19:24:31 d2.evaluation.evaluator]: [0mTotal inference pure compute time: 0:01:02 (0.050689 s / iter per device, on 4 devices)
[32m[06/24 19:24:32 d2.evaluation.pascal_voc_evaluation]: [0mEvaluating voc_2007_test using 2007 metric. Note that results do not use the official Matlab API.
[32m[06/24 19:26:14 d2.engine.defaults]: [0mEvaluation results for voc_2007_test in csv format:
[32m[06/24 19:26:14 d2.evaluation.testing]: [0mcopypaste: Task: bbox
[32m[06/24 19:26:14 d2.evaluation.testing]: [0mcopypaste: AP,AP50,AP75
[32m[06/24 19:26:14 d2.evaluation.testing]: [0mcopypaste: 54.3379,78.2891,59.9249
[32m[06/24 19:26:14 d2.utils.events]: [0m eta: 1:47:43  iter: 9999  total_loss: 1.675  loss_fcos_loc: 0.1991  loss_fcos_ctr: 0.6123  loss_fcos_vfcls: 0.6566  loss_prj: 0.0948  loss_pairwise: 0.03444  loss_mask: 0.04627  loss_mask_affinity: 0.007734    time: 0.8097  last_time: 0.8143  data_time: 0.0153  last_data_time: 0.0135   lr: 0.01  max_mem: 10411M
[32m[06/24 19:26:30 d2.utils.events]: [0m eta: 1:47:30  iter: 10019  total_loss: 1.68  loss_fcos_loc: 0.2127  loss_fcos_ctr: 0.6153  loss_fcos_vfcls: 0.6834  loss_prj: 0.08722  loss_pairwise: 0.02799  loss_mask: 0.04136  loss_mask_affinity: 0.00744    time: 0.8097  last_time: 0.7984  data_time: 0.0156  last_data_time: 0.0206   lr: 0.01  max_mem: 10411M
[32m[06/24 19:26:46 d2.utils.events]: [0m eta: 1:47:09  iter: 10039  total_loss: 1.681  loss_fcos_loc: 0.2056  loss_fcos_ctr: 0.6111  loss_fcos_vfcls: 0.6883  loss_prj: 0.08937  loss_pairwise: 0.0328  loss_mask: 0.04392  loss_mask_affinity: 0.007402    time: 0.8097  last_time: 0.7968  data_time: 0.0168  last_data_time: 0.0212   lr: 0.01  max_mem: 10411M
[32m[06/24 19:27:02 d2.utils.events]: [0m eta: 1:46:48  iter: 10059  total_loss: 1.652  loss_fcos_loc: 0.1969  loss_fcos_ctr: 0.6132  loss_fcos_vfcls: 0.6645  loss_prj: 0.08721  loss_pairwise: 0.03132  loss_mask: 0.03969  loss_mask_affinity: 0.007234    time: 0.8097  last_time: 0.8199  data_time: 0.0172  last_data_time: 0.0205   lr: 0.01  max_mem: 10411M
[32m[06/24 19:27:18 d2.utils.events]: [0m eta: 1:46:27  iter: 10079  total_loss: 1.646  loss_fcos_loc: 0.1958  loss_fcos_ctr: 0.6115  loss_fcos_vfcls: 0.6781  loss_prj: 0.088  loss_pairwise: 0.03023  loss_mask: 0.04048  loss_mask_affinity: 0.007526    time: 0.8096  last_time: 0.8337  data_time: 0.0149  last_data_time: 0.0168   lr: 0.01  max_mem: 10411M
[32m[06/24 19:27:34 d2.utils.events]: [0m eta: 1:46:11  iter: 10099  total_loss: 1.659  loss_fcos_loc: 0.1953  loss_fcos_ctr: 0.6118  loss_fcos_vfcls: 0.699  loss_prj: 0.08385  loss_pairwise: 0.02931  loss_mask: 0.04129  loss_mask_affinity: 0.00684    time: 0.8096  last_time: 0.7186  data_time: 0.0166  last_data_time: 0.0175   lr: 0.01  max_mem: 10411M
[32m[06/24 19:27:50 d2.utils.events]: [0m eta: 1:46:06  iter: 10119  total_loss: 1.677  loss_fcos_loc: 0.2073  loss_fcos_ctr: 0.6139  loss_fcos_vfcls: 0.6646  loss_prj: 0.09095  loss_pairwise: 0.03109  loss_mask: 0.03976  loss_mask_affinity: 0.007634    time: 0.8096  last_time: 0.7019  data_time: 0.0178  last_data_time: 0.0154   lr: 0.01  max_mem: 10411M
[32m[06/24 19:28:07 d2.utils.events]: [0m eta: 1:45:52  iter: 10139  total_loss: 1.687  loss_fcos_loc: 0.2072  loss_fcos_ctr: 0.6136  loss_fcos_vfcls: 0.6742  loss_prj: 0.08887  loss_pairwise: 0.03022  loss_mask: 0.04129  loss_mask_affinity: 0.007689    time: 0.8096  last_time: 0.8373  data_time: 0.0179  last_data_time: 0.0120   lr: 0.01  max_mem: 10411M
[32m[06/24 19:28:23 d2.utils.events]: [0m eta: 1:45:32  iter: 10159  total_loss: 1.675  loss_fcos_loc: 0.2067  loss_fcos_ctr: 0.6182  loss_fcos_vfcls: 0.6534  loss_prj: 0.09025  loss_pairwise: 0.0305  loss_mask: 0.04349  loss_mask_affinity: 0.007566    time: 0.8096  last_time: 0.7373  data_time: 0.0161  last_data_time: 0.0155   lr: 0.01  max_mem: 10411M
[32m[06/24 19:28:39 d2.utils.events]: [0m eta: 1:45:21  iter: 10179  total_loss: 1.683  loss_fcos_loc: 0.2065  loss_fcos_ctr: 0.6176  loss_fcos_vfcls: 0.6733  loss_prj: 0.0892  loss_pairwise: 0.03288  loss_mask: 0.04133  loss_mask_affinity: 0.007958    time: 0.8096  last_time: 0.7206  data_time: 0.0155  last_data_time: 0.0161   lr: 0.01  max_mem: 10411M
[32m[06/24 19:28:55 d2.utils.events]: [0m eta: 1:44:57  iter: 10199  total_loss: 1.662  loss_fcos_loc: 0.2005  loss_fcos_ctr: 0.6152  loss_fcos_vfcls: 0.6777  loss_prj: 0.08751  loss_pairwise: 0.03072  loss_mask: 0.04192  loss_mask_affinity: 0.007002    time: 0.8096  last_time: 0.7118  data_time: 0.0155  last_data_time: 0.0144   lr: 0.01  max_mem: 10411M
[32m[06/24 19:29:11 d2.utils.events]: [0m eta: 1:44:35  iter: 10219  total_loss: 1.65  loss_fcos_loc: 0.1884  loss_fcos_ctr: 0.6133  loss_fcos_vfcls: 0.6777  loss_prj: 0.08054  loss_pairwise: 0.0331  loss_mask: 0.04058  loss_mask_affinity: 0.007531    time: 0.8095  last_time: 0.7754  data_time: 0.0173  last_data_time: 0.0197   lr: 0.01  max_mem: 10411M
[32m[06/24 19:29:28 d2.utils.events]: [0m eta: 1:44:21  iter: 10239  total_loss: 1.669  loss_fcos_loc: 0.1906  loss_fcos_ctr: 0.6132  loss_fcos_vfcls: 0.6751  loss_prj: 0.08966  loss_pairwise: 0.03109  loss_mask: 0.04271  loss_mask_affinity: 0.00813    time: 0.8096  last_time: 0.7296  data_time: 0.0155  last_data_time: 0.0080   lr: 0.01  max_mem: 10411M
[32m[06/24 19:29:44 d2.utils.events]: [0m eta: 1:44:04  iter: 10259  total_loss: 1.678  loss_fcos_loc: 0.2002  loss_fcos_ctr: 0.6161  loss_fcos_vfcls: 0.6784  loss_prj: 0.08785  loss_pairwise: 0.03307  loss_mask: 0.04098  loss_mask_affinity: 0.007351    time: 0.8096  last_time: 0.8631  data_time: 0.0164  last_data_time: 0.0161   lr: 0.01  max_mem: 10411M
[32m[06/24 19:30:00 d2.utils.events]: [0m eta: 1:43:47  iter: 10279  total_loss: 1.657  loss_fcos_loc: 0.214  loss_fcos_ctr: 0.6139  loss_fcos_vfcls: 0.6799  loss_prj: 0.09142  loss_pairwise: 0.03187  loss_mask: 0.04347  loss_mask_affinity: 0.007775    time: 0.8096  last_time: 0.8300  data_time: 0.0196  last_data_time: 0.0271   lr: 0.01  max_mem: 10411M
[32m[06/24 19:30:17 d2.utils.events]: [0m eta: 1:43:27  iter: 10299  total_loss: 1.663  loss_fcos_loc: 0.2043  loss_fcos_ctr: 0.614  loss_fcos_vfcls: 0.6915  loss_prj: 0.09226  loss_pairwise: 0.03001  loss_mask: 0.04405  loss_mask_affinity: 0.00722    time: 0.8096  last_time: 0.7966  data_time: 0.0161  last_data_time: 0.0300   lr: 0.01  max_mem: 10411M
[32m[06/24 19:30:33 d2.utils.events]: [0m eta: 1:43:09  iter: 10319  total_loss: 1.65  loss_fcos_loc: 0.1934  loss_fcos_ctr: 0.6135  loss_fcos_vfcls: 0.6606  loss_prj: 0.08311  loss_pairwise: 0.03252  loss_mask: 0.04522  loss_mask_affinity: 0.00788    time: 0.8096  last_time: 0.8056  data_time: 0.0157  last_data_time: 0.0168   lr: 0.01  max_mem: 10411M
[32m[06/24 19:30:49 d2.utils.events]: [0m eta: 1:42:54  iter: 10339  total_loss: 1.66  loss_fcos_loc: 0.2062  loss_fcos_ctr: 0.6137  loss_fcos_vfcls: 0.6694  loss_prj: 0.0845  loss_pairwise: 0.03008  loss_mask: 0.04358  loss_mask_affinity: 0.007052    time: 0.8096  last_time: 0.7540  data_time: 0.0169  last_data_time: 0.0148   lr: 0.01  max_mem: 10411M
[32m[06/24 19:31:05 d2.utils.events]: [0m eta: 1:42:34  iter: 10359  total_loss: 1.631  loss_fcos_loc: 0.1959  loss_fcos_ctr: 0.6152  loss_fcos_vfcls: 0.6549  loss_prj: 0.08156  loss_pairwise: 0.03091  loss_mask: 0.0425  loss_mask_affinity: 0.007267    time: 0.8096  last_time: 0.7560  data_time: 0.0159  last_data_time: 0.0126   lr: 0.01  max_mem: 10411M
[32m[06/24 19:31:21 d2.utils.events]: [0m eta: 1:42:14  iter: 10379  total_loss: 1.664  loss_fcos_loc: 0.2054  loss_fcos_ctr: 0.6144  loss_fcos_vfcls: 0.6783  loss_prj: 0.08428  loss_pairwise: 0.02765  loss_mask: 0.03886  loss_mask_affinity: 0.007572    time: 0.8096  last_time: 0.7164  data_time: 0.0159  last_data_time: 0.0182   lr: 0.01  max_mem: 10411M
[32m[06/24 19:31:38 d2.utils.events]: [0m eta: 1:41:48  iter: 10399  total_loss: 1.662  loss_fcos_loc: 0.2012  loss_fcos_ctr: 0.6138  loss_fcos_vfcls: 0.6856  loss_prj: 0.08801  loss_pairwise: 0.03088  loss_mask: 0.04345  loss_mask_affinity: 0.007259    time: 0.8096  last_time: 0.9518  data_time: 0.0172  last_data_time: 0.0157   lr: 0.01  max_mem: 10411M
[32m[06/24 19:31:54 d2.utils.events]: [0m eta: 1:41:27  iter: 10419  total_loss: 1.654  loss_fcos_loc: 0.1981  loss_fcos_ctr: 0.6131  loss_fcos_vfcls: 0.6523  loss_prj: 0.08525  loss_pairwise: 0.03298  loss_mask: 0.03831  loss_mask_affinity: 0.007777    time: 0.8096  last_time: 0.7653  data_time: 0.0168  last_data_time: 0.0249   lr: 0.01  max_mem: 10411M
[32m[06/24 19:32:10 d2.utils.events]: [0m eta: 1:41:10  iter: 10439  total_loss: 1.653  loss_fcos_loc: 0.202  loss_fcos_ctr: 0.6147  loss_fcos_vfcls: 0.6642  loss_prj: 0.08181  loss_pairwise: 0.03453  loss_mask: 0.03955  loss_mask_affinity: 0.007778    time: 0.8095  last_time: 0.8769  data_time: 0.0167  last_data_time: 0.0160   lr: 0.01  max_mem: 10411M
[32m[06/24 19:32:25 d2.utils.events]: [0m eta: 1:40:57  iter: 10459  total_loss: 1.654  loss_fcos_loc: 0.2086  loss_fcos_ctr: 0.6132  loss_fcos_vfcls: 0.6595  loss_prj: 0.08698  loss_pairwise: 0.0313  loss_mask: 0.04052  loss_mask_affinity: 0.00754    time: 0.8095  last_time: 0.8160  data_time: 0.0176  last_data_time: 0.0291   lr: 0.01  max_mem: 10411M
[32m[06/24 19:32:42 d2.utils.events]: [0m eta: 1:40:38  iter: 10479  total_loss: 1.635  loss_fcos_loc: 0.2003  loss_fcos_ctr: 0.6144  loss_fcos_vfcls: 0.6438  loss_prj: 0.08601  loss_pairwise: 0.03196  loss_mask: 0.04067  loss_mask_affinity: 0.008015    time: 0.8095  last_time: 0.8339  data_time: 0.0154  last_data_time: 0.0202   lr: 0.01  max_mem: 10411M
[32m[06/24 19:32:58 d2.utils.events]: [0m eta: 1:40:22  iter: 10499  total_loss: 1.639  loss_fcos_loc: 0.197  loss_fcos_ctr: 0.6133  loss_fcos_vfcls: 0.663  loss_prj: 0.08469  loss_pairwise: 0.02915  loss_mask: 0.03929  loss_mask_affinity: 0.007492    time: 0.8095  last_time: 0.9360  data_time: 0.0170  last_data_time: 0.0140   lr: 0.01  max_mem: 10411M
[32m[06/24 19:33:14 d2.utils.events]: [0m eta: 1:40:05  iter: 10519  total_loss: 1.624  loss_fcos_loc: 0.1941  loss_fcos_ctr: 0.6116  loss_fcos_vfcls: 0.6604  loss_prj: 0.0788  loss_pairwise: 0.03153  loss_mask: 0.03903  loss_mask_affinity: 0.007941    time: 0.8095  last_time: 0.8664  data_time: 0.0191  last_data_time: 0.0296   lr: 0.01  max_mem: 10411M
[32m[06/24 19:33:30 d2.utils.events]: [0m eta: 1:39:46  iter: 10539  total_loss: 1.638  loss_fcos_loc: 0.198  loss_fcos_ctr: 0.615  loss_fcos_vfcls: 0.6477  loss_prj: 0.08798  loss_pairwise: 0.02973  loss_mask: 0.04295  loss_mask_affinity: 0.007452    time: 0.8095  last_time: 0.7815  data_time: 0.0204  last_data_time: 0.0308   lr: 0.01  max_mem: 10411M
[32m[06/24 19:33:47 d2.utils.events]: [0m eta: 1:39:36  iter: 10559  total_loss: 1.621  loss_fcos_loc: 0.1981  loss_fcos_ctr: 0.6098  loss_fcos_vfcls: 0.6548  loss_prj: 0.0799  loss_pairwise: 0.03254  loss_mask: 0.03981  loss_mask_affinity: 0.007263    time: 0.8095  last_time: 0.8099  data_time: 0.0175  last_data_time: 0.0110   lr: 0.01  max_mem: 10411M
[32m[06/24 19:34:03 d2.utils.events]: [0m eta: 1:39:27  iter: 10579  total_loss: 1.676  loss_fcos_loc: 0.2078  loss_fcos_ctr: 0.6137  loss_fcos_vfcls: 0.6736  loss_prj: 0.09534  loss_pairwise: 0.03216  loss_mask: 0.04484  loss_mask_affinity: 0.007986    time: 0.8096  last_time: 0.8326  data_time: 0.0191  last_data_time: 0.0197   lr: 0.01  max_mem: 10411M
[32m[06/24 19:34:20 d2.utils.events]: [0m eta: 1:39:13  iter: 10599  total_loss: 1.666  loss_fcos_loc: 0.2074  loss_fcos_ctr: 0.6148  loss_fcos_vfcls: 0.6752  loss_prj: 0.08988  loss_pairwise: 0.03223  loss_mask: 0.04017  loss_mask_affinity: 0.007235    time: 0.8095  last_time: 0.8553  data_time: 0.0157  last_data_time: 0.0050   lr: 0.01  max_mem: 10411M
[32m[06/24 19:34:36 d2.utils.events]: [0m eta: 1:38:58  iter: 10619  total_loss: 1.62  loss_fcos_loc: 0.195  loss_fcos_ctr: 0.6124  loss_fcos_vfcls: 0.6529  loss_prj: 0.08399  loss_pairwise: 0.03141  loss_mask: 0.04004  loss_mask_affinity: 0.007456    time: 0.8096  last_time: 0.8895  data_time: 0.0169  last_data_time: 0.0137   lr: 0.01  max_mem: 10411M
[32m[06/24 19:34:52 d2.utils.events]: [0m eta: 1:38:41  iter: 10639  total_loss: 1.64  loss_fcos_loc: 0.2027  loss_fcos_ctr: 0.6144  loss_fcos_vfcls: 0.6352  loss_prj: 0.08537  loss_pairwise: 0.03246  loss_mask: 0.04189  loss_mask_affinity: 0.00729    time: 0.8095  last_time: 0.7545  data_time: 0.0169  last_data_time: 0.0305   lr: 0.01  max_mem: 10411M
[32m[06/24 19:35:08 d2.utils.events]: [0m eta: 1:38:25  iter: 10659  total_loss: 1.618  loss_fcos_loc: 0.19  loss_fcos_ctr: 0.6133  loss_fcos_vfcls: 0.6489  loss_prj: 0.08179  loss_pairwise: 0.02908  loss_mask: 0.03698  loss_mask_affinity: 0.007279    time: 0.8095  last_time: 0.7469  data_time: 0.0177  last_data_time: 0.0182   lr: 0.01  max_mem: 10411M
[32m[06/24 19:35:25 d2.utils.events]: [0m eta: 1:38:12  iter: 10679  total_loss: 1.703  loss_fcos_loc: 0.201  loss_fcos_ctr: 0.6135  loss_fcos_vfcls: 0.7023  loss_prj: 0.08464  loss_pairwise: 0.03153  loss_mask: 0.04376  loss_mask_affinity: 0.007275    time: 0.8095  last_time: 0.8578  data_time: 0.0147  last_data_time: 0.0119   lr: 0.01  max_mem: 10411M
[32m[06/24 19:35:40 d2.utils.events]: [0m eta: 1:37:56  iter: 10699  total_loss: 1.655  loss_fcos_loc: 0.1941  loss_fcos_ctr: 0.6121  loss_fcos_vfcls: 0.6857  loss_prj: 0.08235  loss_pairwise: 0.02629  loss_mask: 0.03797  loss_mask_affinity: 0.007413    time: 0.8095  last_time: 0.8088  data_time: 0.0163  last_data_time: 0.0124   lr: 0.01  max_mem: 10411M
[32m[06/24 19:35:56 d2.utils.events]: [0m eta: 1:37:38  iter: 10719  total_loss: 1.642  loss_fcos_loc: 0.1943  loss_fcos_ctr: 0.6151  loss_fcos_vfcls: 0.6672  loss_prj: 0.08549  loss_pairwise: 0.03041  loss_mask: 0.03954  loss_mask_affinity: 0.007671    time: 0.8095  last_time: 0.8158  data_time: 0.0166  last_data_time: 0.0104   lr: 0.01  max_mem: 10411M
[32m[06/24 19:36:13 d2.utils.events]: [0m eta: 1:37:22  iter: 10739  total_loss: 1.655  loss_fcos_loc: 0.1978  loss_fcos_ctr: 0.6143  loss_fcos_vfcls: 0.6822  loss_prj: 0.08431  loss_pairwise: 0.0261  loss_mask: 0.0386  loss_mask_affinity: 0.008245    time: 0.8095  last_time: 0.7877  data_time: 0.0165  last_data_time: 0.0136   lr: 0.01  max_mem: 10411M
[32m[06/24 19:36:29 d2.utils.events]: [0m eta: 1:37:01  iter: 10759  total_loss: 1.618  loss_fcos_loc: 0.189  loss_fcos_ctr: 0.6106  loss_fcos_vfcls: 0.6516  loss_prj: 0.07776  loss_pairwise: 0.02948  loss_mask: 0.03731  loss_mask_affinity: 0.00731    time: 0.8095  last_time: 0.7683  data_time: 0.0147  last_data_time: 0.0106   lr: 0.01  max_mem: 10411M
[32m[06/24 19:36:45 d2.utils.events]: [0m eta: 1:36:40  iter: 10779  total_loss: 1.639  loss_fcos_loc: 0.2015  loss_fcos_ctr: 0.6164  loss_fcos_vfcls: 0.6744  loss_prj: 0.08523  loss_pairwise: 0.02801  loss_mask: 0.03863  loss_mask_affinity: 0.007271    time: 0.8095  last_time: 0.8396  data_time: 0.0174  last_data_time: 0.0142   lr: 0.01  max_mem: 10411M
[32m[06/24 19:37:01 d2.utils.events]: [0m eta: 1:36:26  iter: 10799  total_loss: 1.614  loss_fcos_loc: 0.1942  loss_fcos_ctr: 0.6129  loss_fcos_vfcls: 0.6709  loss_prj: 0.083  loss_pairwise: 0.02627  loss_mask: 0.03846  loss_mask_affinity: 0.007568    time: 0.8094  last_time: 0.8128  data_time: 0.0170  last_data_time: 0.0187   lr: 0.01  max_mem: 10411M
[32m[06/24 19:37:17 d2.utils.events]: [0m eta: 1:36:04  iter: 10819  total_loss: 1.622  loss_fcos_loc: 0.1941  loss_fcos_ctr: 0.6093  loss_fcos_vfcls: 0.6601  loss_prj: 0.08438  loss_pairwise: 0.02902  loss_mask: 0.03704  loss_mask_affinity: 0.007372    time: 0.8094  last_time: 0.7739  data_time: 0.0183  last_data_time: 0.0085   lr: 0.01  max_mem: 10411M
[32m[06/24 19:37:33 d2.utils.events]: [0m eta: 1:35:48  iter: 10839  total_loss: 1.657  loss_fcos_loc: 0.2017  loss_fcos_ctr: 0.6157  loss_fcos_vfcls: 0.671  loss_prj: 0.08511  loss_pairwise: 0.02974  loss_mask: 0.04282  loss_mask_affinity: 0.007759    time: 0.8094  last_time: 0.7280  data_time: 0.0177  last_data_time: 0.0140   lr: 0.01  max_mem: 10411M
[32m[06/24 19:37:49 d2.utils.events]: [0m eta: 1:35:28  iter: 10859  total_loss: 1.654  loss_fcos_loc: 0.203  loss_fcos_ctr: 0.6129  loss_fcos_vfcls: 0.6746  loss_prj: 0.08581  loss_pairwise: 0.0309  loss_mask: 0.04043  loss_mask_affinity: 0.006986    time: 0.8094  last_time: 0.7433  data_time: 0.0154  last_data_time: 0.0158   lr: 0.01  max_mem: 10411M
[32m[06/24 19:38:05 d2.utils.events]: [0m eta: 1:35:13  iter: 10879  total_loss: 1.638  loss_fcos_loc: 0.201  loss_fcos_ctr: 0.6125  loss_fcos_vfcls: 0.659  loss_prj: 0.08817  loss_pairwise: 0.03001  loss_mask: 0.04071  loss_mask_affinity: 0.008019    time: 0.8094  last_time: 0.7761  data_time: 0.0151  last_data_time: 0.0139   lr: 0.01  max_mem: 10411M
[32m[06/24 19:38:21 d2.utils.events]: [0m eta: 1:34:55  iter: 10899  total_loss: 1.63  loss_fcos_loc: 0.1981  loss_fcos_ctr: 0.615  loss_fcos_vfcls: 0.657  loss_prj: 0.08662  loss_pairwise: 0.02894  loss_mask: 0.04116  loss_mask_affinity: 0.007493    time: 0.8094  last_time: 0.8151  data_time: 0.0173  last_data_time: 0.0158   lr: 0.01  max_mem: 10411M
[32m[06/24 19:38:38 d2.utils.events]: [0m eta: 1:34:45  iter: 10919  total_loss: 1.664  loss_fcos_loc: 0.2065  loss_fcos_ctr: 0.6164  loss_fcos_vfcls: 0.6693  loss_prj: 0.09111  loss_pairwise: 0.03294  loss_mask: 0.04277  loss_mask_affinity: 0.00792    time: 0.8094  last_time: 0.7171  data_time: 0.0138  last_data_time: 0.0133   lr: 0.01  max_mem: 10411M
[32m[06/24 19:38:53 d2.utils.events]: [0m eta: 1:34:23  iter: 10939  total_loss: 1.645  loss_fcos_loc: 0.189  loss_fcos_ctr: 0.6133  loss_fcos_vfcls: 0.6679  loss_prj: 0.07898  loss_pairwise: 0.02705  loss_mask: 0.03606  loss_mask_affinity: 0.007192    time: 0.8093  last_time: 0.7239  data_time: 0.0159  last_data_time: 0.0173   lr: 0.01  max_mem: 10411M
[32m[06/24 19:39:10 d2.utils.events]: [0m eta: 1:34:09  iter: 10959  total_loss: 1.636  loss_fcos_loc: 0.2023  loss_fcos_ctr: 0.6171  loss_fcos_vfcls: 0.6538  loss_prj: 0.09104  loss_pairwise: 0.0286  loss_mask: 0.0408  loss_mask_affinity: 0.007733    time: 0.8093  last_time: 0.7615  data_time: 0.0197  last_data_time: 0.0139   lr: 0.01  max_mem: 10411M
[32m[06/24 19:39:26 d2.utils.events]: [0m eta: 1:33:51  iter: 10979  total_loss: 1.652  loss_fcos_loc: 0.1918  loss_fcos_ctr: 0.6143  loss_fcos_vfcls: 0.6887  loss_prj: 0.08641  loss_pairwise: 0.02809  loss_mask: 0.03961  loss_mask_affinity: 0.007647    time: 0.8093  last_time: 0.8677  data_time: 0.0159  last_data_time: 0.0134   lr: 0.01  max_mem: 10411M
[32m[06/24 19:39:42 d2.utils.events]: [0m eta: 1:33:34  iter: 10999  total_loss: 1.643  loss_fcos_loc: 0.1957  loss_fcos_ctr: 0.6176  loss_fcos_vfcls: 0.6758  loss_prj: 0.08385  loss_pairwise: 0.03011  loss_mask: 0.03989  loss_mask_affinity: 0.007892    time: 0.8093  last_time: 0.7463  data_time: 0.0160  last_data_time: 0.0124   lr: 0.01  max_mem: 10411M
[32m[06/24 19:39:58 d2.utils.events]: [0m eta: 1:33:19  iter: 11019  total_loss: 1.611  loss_fcos_loc: 0.1895  loss_fcos_ctr: 0.6114  loss_fcos_vfcls: 0.6821  loss_prj: 0.07858  loss_pairwise: 0.02651  loss_mask: 0.03884  loss_mask_affinity: 0.007254    time: 0.8093  last_time: 0.7689  data_time: 0.0165  last_data_time: 0.0169   lr: 0.01  max_mem: 10411M
[32m[06/24 19:40:14 d2.utils.events]: [0m eta: 1:33:00  iter: 11039  total_loss: 1.688  loss_fcos_loc: 0.2004  loss_fcos_ctr: 0.6145  loss_fcos_vfcls: 0.6971  loss_prj: 0.09067  loss_pairwise: 0.03031  loss_mask: 0.0417  loss_mask_affinity: 0.007148    time: 0.8093  last_time: 0.7259  data_time: 0.0164  last_data_time: 0.0157   lr: 0.01  max_mem: 10411M
[32m[06/24 19:40:31 d2.utils.events]: [0m eta: 1:32:44  iter: 11059  total_loss: 1.624  loss_fcos_loc: 0.1905  loss_fcos_ctr: 0.6127  loss_fcos_vfcls: 0.6614  loss_prj: 0.08023  loss_pairwise: 0.03149  loss_mask: 0.04025  loss_mask_affinity: 0.007609    time: 0.8093  last_time: 0.7577  data_time: 0.0159  last_data_time: 0.0135   lr: 0.01  max_mem: 10411M
[32m[06/24 19:40:47 d2.utils.events]: [0m eta: 1:32:36  iter: 11079  total_loss: 1.668  loss_fcos_loc: 0.1957  loss_fcos_ctr: 0.6144  loss_fcos_vfcls: 0.6674  loss_prj: 0.08693  loss_pairwise: 0.03199  loss_mask: 0.042  loss_mask_affinity: 0.007662    time: 0.8093  last_time: 0.7873  data_time: 0.0173  last_data_time: 0.0150   lr: 0.01  max_mem: 10411M
[32m[06/24 19:41:03 d2.utils.events]: [0m eta: 1:32:34  iter: 11099  total_loss: 1.64  loss_fcos_loc: 0.1964  loss_fcos_ctr: 0.6152  loss_fcos_vfcls: 0.6525  loss_prj: 0.08577  loss_pairwise: 0.03005  loss_mask: 0.03708  loss_mask_affinity: 0.00762    time: 0.8093  last_time: 0.6967  data_time: 0.0171  last_data_time: 0.0085   lr: 0.01  max_mem: 10411M
[32m[06/24 19:41:20 d2.utils.events]: [0m eta: 1:32:17  iter: 11119  total_loss: 1.622  loss_fcos_loc: 0.1953  loss_fcos_ctr: 0.6089  loss_fcos_vfcls: 0.6564  loss_prj: 0.0833  loss_pairwise: 0.03186  loss_mask: 0.04078  loss_mask_affinity: 0.008054    time: 0.8093  last_time: 0.9515  data_time: 0.0194  last_data_time: 0.0255   lr: 0.01  max_mem: 10411M
[32m[06/24 19:41:36 d2.utils.events]: [0m eta: 1:31:52  iter: 11139  total_loss: 1.629  loss_fcos_loc: 0.1867  loss_fcos_ctr: 0.6096  loss_fcos_vfcls: 0.6599  loss_prj: 0.07653  loss_pairwise: 0.02997  loss_mask: 0.03948  loss_mask_affinity: 0.007356    time: 0.8093  last_time: 0.7875  data_time: 0.0149  last_data_time: 0.0137   lr: 0.01  max_mem: 10411M
[32m[06/24 19:41:53 d2.utils.events]: [0m eta: 1:31:39  iter: 11159  total_loss: 1.646  loss_fcos_loc: 0.1943  loss_fcos_ctr: 0.6136  loss_fcos_vfcls: 0.6883  loss_prj: 0.08071  loss_pairwise: 0.03155  loss_mask: 0.04015  loss_mask_affinity: 0.007293    time: 0.8093  last_time: 0.8658  data_time: 0.0177  last_data_time: 0.0089   lr: 0.01  max_mem: 10411M
[32m[06/24 19:42:10 d2.utils.events]: [0m eta: 1:31:19  iter: 11179  total_loss: 1.662  loss_fcos_loc: 0.198  loss_fcos_ctr: 0.614  loss_fcos_vfcls: 0.6808  loss_prj: 0.08235  loss_pairwise: 0.02915  loss_mask: 0.03877  loss_mask_affinity: 0.007452    time: 0.8094  last_time: 0.7863  data_time: 0.0152  last_data_time: 0.0138   lr: 0.01  max_mem: 10411M
[32m[06/24 19:42:26 d2.utils.events]: [0m eta: 1:31:03  iter: 11199  total_loss: 1.634  loss_fcos_loc: 0.1915  loss_fcos_ctr: 0.612  loss_fcos_vfcls: 0.6606  loss_prj: 0.08413  loss_pairwise: 0.02898  loss_mask: 0.03867  loss_mask_affinity: 0.007952    time: 0.8094  last_time: 0.8069  data_time: 0.0171  last_data_time: 0.0176   lr: 0.01  max_mem: 10411M
[32m[06/24 19:42:42 d2.utils.events]: [0m eta: 1:30:54  iter: 11219  total_loss: 1.667  loss_fcos_loc: 0.196  loss_fcos_ctr: 0.6132  loss_fcos_vfcls: 0.6712  loss_prj: 0.0851  loss_pairwise: 0.03354  loss_mask: 0.04311  loss_mask_affinity: 0.007852    time: 0.8094  last_time: 0.8163  data_time: 0.0168  last_data_time: 0.0172   lr: 0.01  max_mem: 10411M
[32m[06/24 19:42:58 d2.utils.events]: [0m eta: 1:30:41  iter: 11239  total_loss: 1.683  loss_fcos_loc: 0.2077  loss_fcos_ctr: 0.6155  loss_fcos_vfcls: 0.6846  loss_prj: 0.09145  loss_pairwise: 0.02702  loss_mask: 0.03937  loss_mask_affinity: 0.00766    time: 0.8094  last_time: 0.7823  data_time: 0.0158  last_data_time: 0.0152   lr: 0.01  max_mem: 10411M
[32m[06/24 19:43:15 d2.utils.events]: [0m eta: 1:30:29  iter: 11259  total_loss: 1.654  loss_fcos_loc: 0.1999  loss_fcos_ctr: 0.6129  loss_fcos_vfcls: 0.6844  loss_prj: 0.081  loss_pairwise: 0.03003  loss_mask: 0.0394  loss_mask_affinity: 0.007146    time: 0.8094  last_time: 0.8679  data_time: 0.0177  last_data_time: 0.0128   lr: 0.01  max_mem: 10411M
[32m[06/24 19:43:31 d2.utils.events]: [0m eta: 1:30:09  iter: 11279  total_loss: 1.643  loss_fcos_loc: 0.1984  loss_fcos_ctr: 0.6121  loss_fcos_vfcls: 0.6707  loss_prj: 0.0869  loss_pairwise: 0.03028  loss_mask: 0.04532  loss_mask_affinity: 0.007111    time: 0.8094  last_time: 0.7680  data_time: 0.0157  last_data_time: 0.0108   lr: 0.01  max_mem: 10411M
[32m[06/24 19:43:47 d2.utils.events]: [0m eta: 1:29:51  iter: 11299  total_loss: 1.62  loss_fcos_loc: 0.1888  loss_fcos_ctr: 0.6125  loss_fcos_vfcls: 0.6618  loss_prj: 0.07828  loss_pairwise: 0.02786  loss_mask: 0.03956  loss_mask_affinity: 0.007098    time: 0.8094  last_time: 0.7580  data_time: 0.0171  last_data_time: 0.0315   lr: 0.01  max_mem: 10411M
[32m[06/24 19:44:04 d2.utils.events]: [0m eta: 1:29:33  iter: 11319  total_loss: 1.66  loss_fcos_loc: 0.2021  loss_fcos_ctr: 0.6151  loss_fcos_vfcls: 0.6728  loss_prj: 0.08857  loss_pairwise: 0.03034  loss_mask: 0.04164  loss_mask_affinity: 0.007659    time: 0.8094  last_time: 0.7655  data_time: 0.0166  last_data_time: 0.0145   lr: 0.01  max_mem: 10411M
[32m[06/24 19:44:20 d2.utils.events]: [0m eta: 1:29:17  iter: 11339  total_loss: 1.681  loss_fcos_loc: 0.2087  loss_fcos_ctr: 0.6152  loss_fcos_vfcls: 0.6792  loss_prj: 0.09119  loss_pairwise: 0.02891  loss_mask: 0.04124  loss_mask_affinity: 0.007274    time: 0.8094  last_time: 0.8369  data_time: 0.0165  last_data_time: 0.0141   lr: 0.01  max_mem: 10411M
[32m[06/24 19:44:36 d2.utils.events]: [0m eta: 1:29:15  iter: 11359  total_loss: 1.657  loss_fcos_loc: 0.1921  loss_fcos_ctr: 0.6112  loss_fcos_vfcls: 0.6766  loss_prj: 0.08363  loss_pairwise: 0.03141  loss_mask: 0.04058  loss_mask_affinity: 0.007679    time: 0.8095  last_time: 0.7058  data_time: 0.0164  last_data_time: 0.0123   lr: 0.01  max_mem: 10411M
[32m[06/24 19:44:52 d2.utils.events]: [0m eta: 1:28:57  iter: 11379  total_loss: 1.694  loss_fcos_loc: 0.2062  loss_fcos_ctr: 0.6118  loss_fcos_vfcls: 0.6712  loss_prj: 0.08677  loss_pairwise: 0.03358  loss_mask: 0.04196  loss_mask_affinity: 0.007873    time: 0.8095  last_time: 0.8440  data_time: 0.0150  last_data_time: 0.0147   lr: 0.01  max_mem: 10411M
[32m[06/24 19:45:09 d2.utils.events]: [0m eta: 1:28:41  iter: 11399  total_loss: 1.607  loss_fcos_loc: 0.1981  loss_fcos_ctr: 0.612  loss_fcos_vfcls: 0.6543  loss_prj: 0.08591  loss_pairwise: 0.03026  loss_mask: 0.04124  loss_mask_affinity: 0.00742    time: 0.8095  last_time: 0.8406  data_time: 0.0166  last_data_time: 0.0122   lr: 0.01  max_mem: 10411M
[32m[06/24 19:45:25 d2.utils.events]: [0m eta: 1:28:30  iter: 11419  total_loss: 1.633  loss_fcos_loc: 0.205  loss_fcos_ctr: 0.6145  loss_fcos_vfcls: 0.6577  loss_prj: 0.08399  loss_pairwise: 0.0296  loss_mask: 0.03793  loss_mask_affinity: 0.006918    time: 0.8095  last_time: 0.7991  data_time: 0.0165  last_data_time: 0.0345   lr: 0.01  max_mem: 10411M
[32m[06/24 19:45:41 d2.utils.events]: [0m eta: 1:28:10  iter: 11439  total_loss: 1.628  loss_fcos_loc: 0.196  loss_fcos_ctr: 0.615  loss_fcos_vfcls: 0.6561  loss_prj: 0.08122  loss_pairwise: 0.02828  loss_mask: 0.04276  loss_mask_affinity: 0.007616    time: 0.8095  last_time: 0.8297  data_time: 0.0180  last_data_time: 0.0194   lr: 0.01  max_mem: 10411M
[32m[06/24 19:45:57 d2.utils.events]: [0m eta: 1:27:54  iter: 11459  total_loss: 1.641  loss_fcos_loc: 0.1996  loss_fcos_ctr: 0.6163  loss_fcos_vfcls: 0.6748  loss_prj: 0.08748  loss_pairwise: 0.03037  loss_mask: 0.04161  loss_mask_affinity: 0.007551    time: 0.8094  last_time: 0.7599  data_time: 0.0153  last_data_time: 0.0128   lr: 0.01  max_mem: 10411M
[32m[06/24 19:46:14 d2.utils.events]: [0m eta: 1:27:40  iter: 11479  total_loss: 1.644  loss_fcos_loc: 0.1991  loss_fcos_ctr: 0.6168  loss_fcos_vfcls: 0.645  loss_prj: 0.08818  loss_pairwise: 0.03106  loss_mask: 0.03949  loss_mask_affinity: 0.007744    time: 0.8095  last_time: 0.8233  data_time: 0.0147  last_data_time: 0.0154   lr: 0.01  max_mem: 10411M
[32m[06/24 19:46:30 d2.utils.events]: [0m eta: 1:27:20  iter: 11499  total_loss: 1.66  loss_fcos_loc: 0.2067  loss_fcos_ctr: 0.6161  loss_fcos_vfcls: 0.6505  loss_prj: 0.08757  loss_pairwise: 0.03044  loss_mask: 0.04041  loss_mask_affinity: 0.007388    time: 0.8095  last_time: 0.7341  data_time: 0.0160  last_data_time: 0.0160   lr: 0.01  max_mem: 10411M
[32m[06/24 19:46:46 d2.utils.events]: [0m eta: 1:27:00  iter: 11519  total_loss: 1.619  loss_fcos_loc: 0.1848  loss_fcos_ctr: 0.6146  loss_fcos_vfcls: 0.643  loss_prj: 0.07408  loss_pairwise: 0.02647  loss_mask: 0.03586  loss_mask_affinity: 0.007191    time: 0.8094  last_time: 0.6690  data_time: 0.0163  last_data_time: 0.0141   lr: 0.01  max_mem: 10411M
[32m[06/24 19:47:02 d2.utils.events]: [0m eta: 1:26:44  iter: 11539  total_loss: 1.668  loss_fcos_loc: 0.206  loss_fcos_ctr: 0.6149  loss_fcos_vfcls: 0.6977  loss_prj: 0.08868  loss_pairwise: 0.02891  loss_mask: 0.04195  loss_mask_affinity: 0.007798    time: 0.8094  last_time: 0.9131  data_time: 0.0167  last_data_time: 0.0157   lr: 0.01  max_mem: 10411M
[32m[06/24 19:47:18 d2.utils.events]: [0m eta: 1:26:28  iter: 11559  total_loss: 1.659  loss_fcos_loc: 0.1981  loss_fcos_ctr: 0.6142  loss_fcos_vfcls: 0.6804  loss_prj: 0.08329  loss_pairwise: 0.02683  loss_mask: 0.03729  loss_mask_affinity: 0.007257    time: 0.8094  last_time: 0.8218  data_time: 0.0167  last_data_time: 0.0175   lr: 0.01  max_mem: 10411M
[32m[06/24 19:47:35 d2.utils.events]: [0m eta: 1:26:15  iter: 11579  total_loss: 1.633  loss_fcos_loc: 0.195  loss_fcos_ctr: 0.615  loss_fcos_vfcls: 0.6578  loss_prj: 0.08695  loss_pairwise: 0.03464  loss_mask: 0.04165  loss_mask_affinity: 0.007407    time: 0.8095  last_time: 0.8090  data_time: 0.0161  last_data_time: 0.0188   lr: 0.01  max_mem: 10411M
[32m[06/24 19:47:51 d2.utils.events]: [0m eta: 1:26:01  iter: 11599  total_loss: 1.641  loss_fcos_loc: 0.198  loss_fcos_ctr: 0.617  loss_fcos_vfcls: 0.6474  loss_prj: 0.08326  loss_pairwise: 0.03073  loss_mask: 0.03872  loss_mask_affinity: 0.007542    time: 0.8095  last_time: 0.6932  data_time: 0.0149  last_data_time: 0.0131   lr: 0.01  max_mem: 10411M
[32m[06/24 19:48:08 d2.utils.events]: [0m eta: 1:25:44  iter: 11619  total_loss: 1.63  loss_fcos_loc: 0.1911  loss_fcos_ctr: 0.6136  loss_fcos_vfcls: 0.6667  loss_prj: 0.08435  loss_pairwise: 0.02936  loss_mask: 0.03903  loss_mask_affinity: 0.007821    time: 0.8095  last_time: 0.7733  data_time: 0.0170  last_data_time: 0.0110   lr: 0.01  max_mem: 10411M
[32m[06/24 19:48:24 d2.utils.events]: [0m eta: 1:25:32  iter: 11639  total_loss: 1.654  loss_fcos_loc: 0.199  loss_fcos_ctr: 0.6145  loss_fcos_vfcls: 0.6611  loss_prj: 0.08908  loss_pairwise: 0.03165  loss_mask: 0.0425  loss_mask_affinity: 0.00745    time: 0.8095  last_time: 0.8745  data_time: 0.0163  last_data_time: 0.0316   lr: 0.01  max_mem: 10411M
[32m[06/24 19:48:40 d2.utils.events]: [0m eta: 1:25:14  iter: 11659  total_loss: 1.606  loss_fcos_loc: 0.1904  loss_fcos_ctr: 0.6096  loss_fcos_vfcls: 0.6448  loss_prj: 0.07929  loss_pairwise: 0.03211  loss_mask: 0.03715  loss_mask_affinity: 0.007715    time: 0.8095  last_time: 0.7872  data_time: 0.0154  last_data_time: 0.0171   lr: 0.01  max_mem: 10411M
[32m[06/24 19:48:57 d2.utils.events]: [0m eta: 1:24:57  iter: 11679  total_loss: 1.636  loss_fcos_loc: 0.2028  loss_fcos_ctr: 0.6124  loss_fcos_vfcls: 0.6512  loss_prj: 0.08572  loss_pairwise: 0.0286  loss_mask: 0.03943  loss_mask_affinity: 0.007927    time: 0.8095  last_time: 0.7991  data_time: 0.0188  last_data_time: 0.0210   lr: 0.01  max_mem: 10411M
[32m[06/24 19:49:13 d2.utils.events]: [0m eta: 1:24:42  iter: 11699  total_loss: 1.638  loss_fcos_loc: 0.2002  loss_fcos_ctr: 0.6127  loss_fcos_vfcls: 0.6708  loss_prj: 0.09271  loss_pairwise: 0.026  loss_mask: 0.04183  loss_mask_affinity: 0.007394    time: 0.8095  last_time: 0.7899  data_time: 0.0164  last_data_time: 0.0187   lr: 0.01  max_mem: 10411M
[32m[06/24 19:49:29 d2.utils.events]: [0m eta: 1:24:27  iter: 11719  total_loss: 1.635  loss_fcos_loc: 0.197  loss_fcos_ctr: 0.6119  loss_fcos_vfcls: 0.6684  loss_prj: 0.07929  loss_pairwise: 0.03274  loss_mask: 0.03974  loss_mask_affinity: 0.007505    time: 0.8095  last_time: 0.8600  data_time: 0.0152  last_data_time: 0.0149   lr: 0.01  max_mem: 10411M
[32m[06/24 19:49:45 d2.utils.events]: [0m eta: 1:24:12  iter: 11739  total_loss: 1.613  loss_fcos_loc: 0.1993  loss_fcos_ctr: 0.6129  loss_fcos_vfcls: 0.6393  loss_prj: 0.08389  loss_pairwise: 0.03207  loss_mask: 0.03865  loss_mask_affinity: 0.0076    time: 0.8095  last_time: 0.7810  data_time: 0.0179  last_data_time: 0.0129   lr: 0.01  max_mem: 10411M
[32m[06/24 19:50:01 d2.utils.events]: [0m eta: 1:23:55  iter: 11759  total_loss: 1.636  loss_fcos_loc: 0.1982  loss_fcos_ctr: 0.6139  loss_fcos_vfcls: 0.6605  loss_prj: 0.08882  loss_pairwise: 0.02804  loss_mask: 0.03878  loss_mask_affinity: 0.007171    time: 0.8095  last_time: 0.7479  data_time: 0.0154  last_data_time: 0.0243   lr: 0.01  max_mem: 10411M
[32m[06/24 19:50:17 d2.utils.events]: [0m eta: 1:23:39  iter: 11779  total_loss: 1.647  loss_fcos_loc: 0.1976  loss_fcos_ctr: 0.6116  loss_fcos_vfcls: 0.6631  loss_prj: 0.08735  loss_pairwise: 0.03477  loss_mask: 0.04218  loss_mask_affinity: 0.00709    time: 0.8095  last_time: 0.8636  data_time: 0.0171  last_data_time: 0.0149   lr: 0.01  max_mem: 10411M
[32m[06/24 19:50:33 d2.utils.events]: [0m eta: 1:23:22  iter: 11799  total_loss: 1.625  loss_fcos_loc: 0.194  loss_fcos_ctr: 0.6121  loss_fcos_vfcls: 0.6505  loss_prj: 0.08057  loss_pairwise: 0.02699  loss_mask: 0.03831  loss_mask_affinity: 0.007538    time: 0.8095  last_time: 0.8066  data_time: 0.0181  last_data_time: 0.0149   lr: 0.01  max_mem: 10411M
[32m[06/24 19:50:50 d2.utils.events]: [0m eta: 1:23:09  iter: 11819  total_loss: 1.652  loss_fcos_loc: 0.1928  loss_fcos_ctr: 0.6118  loss_fcos_vfcls: 0.6813  loss_prj: 0.08321  loss_pairwise: 0.03099  loss_mask: 0.03753  loss_mask_affinity: 0.007603    time: 0.8095  last_time: 0.8232  data_time: 0.0158  last_data_time: 0.0149   lr: 0.01  max_mem: 10411M
[32m[06/24 19:51:06 d2.utils.events]: [0m eta: 1:22:51  iter: 11839  total_loss: 1.619  loss_fcos_loc: 0.1954  loss_fcos_ctr: 0.6122  loss_fcos_vfcls: 0.6675  loss_prj: 0.08253  loss_pairwise: 0.02899  loss_mask: 0.04266  loss_mask_affinity: 0.007389    time: 0.8095  last_time: 0.9101  data_time: 0.0162  last_data_time: 0.0138   lr: 0.01  max_mem: 10411M
[32m[06/24 19:51:23 d2.utils.events]: [0m eta: 1:22:44  iter: 11859  total_loss: 1.625  loss_fcos_loc: 0.1979  loss_fcos_ctr: 0.6107  loss_fcos_vfcls: 0.6622  loss_prj: 0.08114  loss_pairwise: 0.03147  loss_mask: 0.03801  loss_mask_affinity: 0.0076    time: 0.8096  last_time: 0.7484  data_time: 0.0183  last_data_time: 0.0238   lr: 0.01  max_mem: 10411M
[32m[06/24 19:51:39 d2.utils.events]: [0m eta: 1:22:23  iter: 11879  total_loss: 1.623  loss_fcos_loc: 0.1916  loss_fcos_ctr: 0.6107  loss_fcos_vfcls: 0.6502  loss_prj: 0.08242  loss_pairwise: 0.02932  loss_mask: 0.03697  loss_mask_affinity: 0.007772    time: 0.8095  last_time: 0.7099  data_time: 0.0179  last_data_time: 0.0388   lr: 0.01  max_mem: 10411M
[32m[06/24 19:51:55 d2.utils.events]: [0m eta: 1:22:11  iter: 11899  total_loss: 1.612  loss_fcos_loc: 0.1883  loss_fcos_ctr: 0.6105  loss_fcos_vfcls: 0.6646  loss_prj: 0.08261  loss_pairwise: 0.03128  loss_mask: 0.04013  loss_mask_affinity: 0.007252    time: 0.8095  last_time: 0.7611  data_time: 0.0167  last_data_time: 0.0127   lr: 0.01  max_mem: 10411M
[32m[06/24 19:52:11 d2.utils.events]: [0m eta: 1:21:52  iter: 11919  total_loss: 1.616  loss_fcos_loc: 0.2006  loss_fcos_ctr: 0.6143  loss_fcos_vfcls: 0.6589  loss_prj: 0.08342  loss_pairwise: 0.03002  loss_mask: 0.0384  loss_mask_affinity: 0.007739    time: 0.8095  last_time: 0.7807  data_time: 0.0154  last_data_time: 0.0089   lr: 0.01  max_mem: 10411M
[32m[06/24 19:52:28 d2.utils.events]: [0m eta: 1:21:41  iter: 11939  total_loss: 1.637  loss_fcos_loc: 0.1967  loss_fcos_ctr: 0.6138  loss_fcos_vfcls: 0.6789  loss_prj: 0.08349  loss_pairwise: 0.02752  loss_mask: 0.03961  loss_mask_affinity: 0.007194    time: 0.8096  last_time: 0.8887  data_time: 0.0177  last_data_time: 0.0163   lr: 0.01  max_mem: 10411M
[32m[06/24 19:52:44 d2.utils.events]: [0m eta: 1:21:25  iter: 11959  total_loss: 1.645  loss_fcos_loc: 0.2012  loss_fcos_ctr: 0.6117  loss_fcos_vfcls: 0.6638  loss_prj: 0.08544  loss_pairwise: 0.03113  loss_mask: 0.03956  loss_mask_affinity: 0.007696    time: 0.8096  last_time: 0.8245  data_time: 0.0176  last_data_time: 0.0303   lr: 0.01  max_mem: 10411M
[32m[06/24 19:53:00 d2.utils.events]: [0m eta: 1:21:10  iter: 11979  total_loss: 1.62  loss_fcos_loc: 0.1908  loss_fcos_ctr: 0.6113  loss_fcos_vfcls: 0.6519  loss_prj: 0.07872  loss_pairwise: 0.02924  loss_mask: 0.03742  loss_mask_affinity: 0.007005    time: 0.8095  last_time: 0.8878  data_time: 0.0157  last_data_time: 0.0137   lr: 0.01  max_mem: 10411M
[32m[06/24 19:53:17 d2.utils.events]: [0m eta: 1:21:01  iter: 11999  total_loss: 1.647  loss_fcos_loc: 0.2055  loss_fcos_ctr: 0.6164  loss_fcos_vfcls: 0.6536  loss_prj: 0.08129  loss_pairwise: 0.03165  loss_mask: 0.04048  loss_mask_affinity: 0.00728    time: 0.8096  last_time: 0.8628  data_time: 0.0162  last_data_time: 0.0138   lr: 0.01  max_mem: 10411M
[32m[06/24 19:53:33 d2.utils.events]: [0m eta: 1:20:47  iter: 12019  total_loss: 1.643  loss_fcos_loc: 0.1969  loss_fcos_ctr: 0.6148  loss_fcos_vfcls: 0.631  loss_prj: 0.0851  loss_pairwise: 0.03108  loss_mask: 0.04162  loss_mask_affinity: 0.007586    time: 0.8096  last_time: 0.8729  data_time: 0.0161  last_data_time: 0.0154   lr: 0.001  max_mem: 10411M
[32m[06/24 19:53:50 d2.utils.events]: [0m eta: 1:20:33  iter: 12039  total_loss: 1.575  loss_fcos_loc: 0.1806  loss_fcos_ctr: 0.6115  loss_fcos_vfcls: 0.6148  loss_prj: 0.08082  loss_pairwise: 0.02846  loss_mask: 0.03895  loss_mask_affinity: 0.007073    time: 0.8096  last_time: 0.7195  data_time: 0.0159  last_data_time: 0.0153   lr: 0.001  max_mem: 10411M
[32m[06/24 19:54:06 d2.utils.events]: [0m eta: 1:20:17  iter: 12059  total_loss: 1.586  loss_fcos_loc: 0.1854  loss_fcos_ctr: 0.6116  loss_fcos_vfcls: 0.63  loss_prj: 0.07818  loss_pairwise: 0.02738  loss_mask: 0.0352  loss_mask_affinity: 0.006914    time: 0.8096  last_time: 0.7881  data_time: 0.0177  last_data_time: 0.0180   lr: 0.001  max_mem: 10411M
[32m[06/24 19:54:23 d2.utils.events]: [0m eta: 1:20:00  iter: 12079  total_loss: 1.577  loss_fcos_loc: 0.1753  loss_fcos_ctr: 0.6111  loss_fcos_vfcls: 0.6312  loss_prj: 0.07759  loss_pairwise: 0.02809  loss_mask: 0.03733  loss_mask_affinity: 0.007067    time: 0.8097  last_time: 0.9017  data_time: 0.0183  last_data_time: 0.0126   lr: 0.001  max_mem: 10411M
[32m[06/24 19:54:39 d2.utils.events]: [0m eta: 1:19:43  iter: 12099  total_loss: 1.529  loss_fcos_loc: 0.1702  loss_fcos_ctr: 0.6088  loss_fcos_vfcls: 0.613  loss_prj: 0.0687  loss_pairwise: 0.02789  loss_mask: 0.03316  loss_mask_affinity: 0.00723    time: 0.8097  last_time: 0.8121  data_time: 0.0151  last_data_time: 0.0125   lr: 0.001  max_mem: 10411M
[32m[06/24 19:54:56 d2.utils.events]: [0m eta: 1:19:27  iter: 12119  total_loss: 1.574  loss_fcos_loc: 0.1909  loss_fcos_ctr: 0.6155  loss_fcos_vfcls: 0.6221  loss_prj: 0.08502  loss_pairwise: 0.02824  loss_mask: 0.03422  loss_mask_affinity: 0.007428    time: 0.8097  last_time: 0.8341  data_time: 0.0160  last_data_time: 0.0202   lr: 0.001  max_mem: 10411M
[32m[06/24 19:55:12 d2.utils.events]: [0m eta: 1:19:11  iter: 12139  total_loss: 1.589  loss_fcos_loc: 0.1797  loss_fcos_ctr: 0.6119  loss_fcos_vfcls: 0.6175  loss_prj: 0.08117  loss_pairwise: 0.02967  loss_mask: 0.03918  loss_mask_affinity: 0.006995    time: 0.8097  last_time: 0.8269  data_time: 0.0169  last_data_time: 0.0260   lr: 0.001  max_mem: 10411M
[32m[06/24 19:55:28 d2.utils.events]: [0m eta: 1:18:51  iter: 12159  total_loss: 1.541  loss_fcos_loc: 0.1717  loss_fcos_ctr: 0.6098  loss_fcos_vfcls: 0.6129  loss_prj: 0.07275  loss_pairwise: 0.02847  loss_mask: 0.03631  loss_mask_affinity: 0.006738    time: 0.8097  last_time: 0.7772  data_time: 0.0168  last_data_time: 0.0171   lr: 0.001  max_mem: 10411M
[32m[06/24 19:55:45 d2.utils.events]: [0m eta: 1:18:30  iter: 12179  total_loss: 1.578  loss_fcos_loc: 0.1812  loss_fcos_ctr: 0.6109  loss_fcos_vfcls: 0.6217  loss_prj: 0.07859  loss_pairwise: 0.02832  loss_mask: 0.03823  loss_mask_affinity: 0.006688    time: 0.8097  last_time: 0.7574  data_time: 0.0171  last_data_time: 0.0105   lr: 0.001  max_mem: 10411M
[32m[06/24 19:56:01 d2.utils.events]: [0m eta: 1:18:16  iter: 12199  total_loss: 1.524  loss_fcos_loc: 0.1696  loss_fcos_ctr: 0.6069  loss_fcos_vfcls: 0.5971  loss_prj: 0.07188  loss_pairwise: 0.02841  loss_mask: 0.03264  loss_mask_affinity: 0.006318    time: 0.8097  last_time: 0.7423  data_time: 0.0190  last_data_time: 0.0148   lr: 0.001  max_mem: 10411M
[32m[06/24 19:56:17 d2.utils.events]: [0m eta: 1:18:00  iter: 12219  total_loss: 1.56  loss_fcos_loc: 0.1779  loss_fcos_ctr: 0.6138  loss_fcos_vfcls: 0.6076  loss_prj: 0.08233  loss_pairwise: 0.02773  loss_mask: 0.03797  loss_mask_affinity: 0.007304    time: 0.8097  last_time: 0.8260  data_time: 0.0150  last_data_time: 0.0157   lr: 0.001  max_mem: 10411M
[32m[06/24 19:56:33 d2.utils.events]: [0m eta: 1:17:43  iter: 12239  total_loss: 1.563  loss_fcos_loc: 0.1822  loss_fcos_ctr: 0.6112  loss_fcos_vfcls: 0.6051  loss_prj: 0.07769  loss_pairwise: 0.02893  loss_mask: 0.03547  loss_mask_affinity: 0.007204    time: 0.8097  last_time: 0.7556  data_time: 0.0187  last_data_time: 0.0191   lr: 0.001  max_mem: 10411M
[32m[06/24 19:56:49 d2.utils.events]: [0m eta: 1:17:24  iter: 12259  total_loss: 1.546  loss_fcos_loc: 0.1842  loss_fcos_ctr: 0.6097  loss_fcos_vfcls: 0.6028  loss_prj: 0.07488  loss_pairwise: 0.02927  loss_mask: 0.03519  loss_mask_affinity: 0.006787    time: 0.8097  last_time: 0.7012  data_time: 0.0164  last_data_time: 0.0232   lr: 0.001  max_mem: 10411M
[32m[06/24 19:57:05 d2.utils.events]: [0m eta: 1:17:08  iter: 12279  total_loss: 1.549  loss_fcos_loc: 0.1751  loss_fcos_ctr: 0.6119  loss_fcos_vfcls: 0.6154  loss_prj: 0.06881  loss_pairwise: 0.02838  loss_mask: 0.03223  loss_mask_affinity: 0.007083    time: 0.8097  last_time: 0.8533  data_time: 0.0156  last_data_time: 0.0128   lr: 0.001  max_mem: 10411M
[32m[06/24 19:57:21 d2.utils.events]: [0m eta: 1:16:58  iter: 12299  total_loss: 1.555  loss_fcos_loc: 0.183  loss_fcos_ctr: 0.6127  loss_fcos_vfcls: 0.606  loss_prj: 0.07729  loss_pairwise: 0.02883  loss_mask: 0.03478  loss_mask_affinity: 0.007402    time: 0.8097  last_time: 0.9164  data_time: 0.0158  last_data_time: 0.0196   lr: 0.001  max_mem: 10411M
[32m[06/24 19:57:37 d2.utils.events]: [0m eta: 1:16:45  iter: 12319  total_loss: 1.551  loss_fcos_loc: 0.1778  loss_fcos_ctr: 0.6098  loss_fcos_vfcls: 0.619  loss_prj: 0.0757  loss_pairwise: 0.02743  loss_mask: 0.03516  loss_mask_affinity: 0.007007    time: 0.8097  last_time: 0.7512  data_time: 0.0162  last_data_time: 0.0305   lr: 0.001  max_mem: 10411M
[32m[06/24 19:57:53 d2.utils.events]: [0m eta: 1:16:21  iter: 12339  total_loss: 1.542  loss_fcos_loc: 0.1774  loss_fcos_ctr: 0.6075  loss_fcos_vfcls: 0.6142  loss_prj: 0.07118  loss_pairwise: 0.02705  loss_mask: 0.03268  loss_mask_affinity: 0.00667    time: 0.8096  last_time: 0.7598  data_time: 0.0171  last_data_time: 0.0149   lr: 0.001  max_mem: 10411M
[32m[06/24 19:58:09 d2.utils.events]: [0m eta: 1:16:01  iter: 12359  total_loss: 1.556  loss_fcos_loc: 0.1798  loss_fcos_ctr: 0.6098  loss_fcos_vfcls: 0.6056  loss_prj: 0.07753  loss_pairwise: 0.0316  loss_mask: 0.03425  loss_mask_affinity: 0.007385    time: 0.8096  last_time: 0.6891  data_time: 0.0158  last_data_time: 0.0169   lr: 0.001  max_mem: 10411M
[32m[06/24 19:58:26 d2.utils.events]: [0m eta: 1:15:45  iter: 12379  total_loss: 1.599  loss_fcos_loc: 0.1813  loss_fcos_ctr: 0.6118  loss_fcos_vfcls: 0.6181  loss_prj: 0.07919  loss_pairwise: 0.02833  loss_mask: 0.0368  loss_mask_affinity: 0.007395    time: 0.8096  last_time: 0.8980  data_time: 0.0178  last_data_time: 0.0157   lr: 0.001  max_mem: 10411M
[32m[06/24 19:58:42 d2.utils.events]: [0m eta: 1:15:29  iter: 12399  total_loss: 1.543  loss_fcos_loc: 0.1831  loss_fcos_ctr: 0.6117  loss_fcos_vfcls: 0.6098  loss_prj: 0.07996  loss_pairwise: 0.03078  loss_mask: 0.03714  loss_mask_affinity: 0.007389    time: 0.8096  last_time: 0.7883  data_time: 0.0157  last_data_time: 0.0107   lr: 0.001  max_mem: 10411M
[32m[06/24 19:58:58 d2.utils.events]: [0m eta: 1:15:13  iter: 12419  total_loss: 1.504  loss_fcos_loc: 0.1663  loss_fcos_ctr: 0.6054  loss_fcos_vfcls: 0.5998  loss_prj: 0.06847  loss_pairwise: 0.02606  loss_mask: 0.03335  loss_mask_affinity: 0.00692    time: 0.8096  last_time: 0.8654  data_time: 0.0158  last_data_time: 0.0175   lr: 0.001  max_mem: 10411M
[32m[06/24 19:59:14 d2.utils.events]: [0m eta: 1:14:54  iter: 12439  total_loss: 1.528  loss_fcos_loc: 0.1739  loss_fcos_ctr: 0.6088  loss_fcos_vfcls: 0.5966  loss_prj: 0.0712  loss_pairwise: 0.02849  loss_mask: 0.03308  loss_mask_affinity: 0.007262    time: 0.8096  last_time: 0.8009  data_time: 0.0155  last_data_time: 0.0184   lr: 0.001  max_mem: 10411M
[32m[06/24 19:59:30 d2.utils.events]: [0m eta: 1:14:39  iter: 12459  total_loss: 1.543  loss_fcos_loc: 0.1804  loss_fcos_ctr: 0.6122  loss_fcos_vfcls: 0.605  loss_prj: 0.07835  loss_pairwise: 0.02845  loss_mask: 0.03406  loss_mask_affinity: 0.007382    time: 0.8096  last_time: 0.8480  data_time: 0.0149  last_data_time: 0.0175   lr: 0.001  max_mem: 10411M
[32m[06/24 19:59:46 d2.utils.events]: [0m eta: 1:14:23  iter: 12479  total_loss: 1.529  loss_fcos_loc: 0.1751  loss_fcos_ctr: 0.6104  loss_fcos_vfcls: 0.6025  loss_prj: 0.07251  loss_pairwise: 0.02578  loss_mask: 0.03347  loss_mask_affinity: 0.00656    time: 0.8096  last_time: 0.8260  data_time: 0.0179  last_data_time: 0.0324   lr: 0.001  max_mem: 10411M
[32m[06/24 20:00:03 d2.utils.events]: [0m eta: 1:14:08  iter: 12499  total_loss: 1.538  loss_fcos_loc: 0.1732  loss_fcos_ctr: 0.6069  loss_fcos_vfcls: 0.5812  loss_prj: 0.07519  loss_pairwise: 0.02879  loss_mask: 0.03505  loss_mask_affinity: 0.006955    time: 0.8096  last_time: 0.8001  data_time: 0.0174  last_data_time: 0.0232   lr: 0.001  max_mem: 10411M
[32m[06/24 20:00:19 d2.utils.events]: [0m eta: 1:13:52  iter: 12519  total_loss: 1.528  loss_fcos_loc: 0.1651  loss_fcos_ctr: 0.6097  loss_fcos_vfcls: 0.5875  loss_prj: 0.0717  loss_pairwise: 0.02982  loss_mask: 0.03262  loss_mask_affinity: 0.006726    time: 0.8096  last_time: 0.7187  data_time: 0.0176  last_data_time: 0.0168   lr: 0.001  max_mem: 10411M
[32m[06/24 20:00:35 d2.utils.events]: [0m eta: 1:13:36  iter: 12539  total_loss: 1.509  loss_fcos_loc: 0.1679  loss_fcos_ctr: 0.6086  loss_fcos_vfcls: 0.5881  loss_prj: 0.06829  loss_pairwise: 0.02857  loss_mask: 0.03429  loss_mask_affinity: 0.00643    time: 0.8096  last_time: 0.7640  data_time: 0.0165  last_data_time: 0.0198   lr: 0.001  max_mem: 10411M
[32m[06/24 20:00:51 d2.utils.events]: [0m eta: 1:13:19  iter: 12559  total_loss: 1.516  loss_fcos_loc: 0.1732  loss_fcos_ctr: 0.6096  loss_fcos_vfcls: 0.5834  loss_prj: 0.07406  loss_pairwise: 0.02812  loss_mask: 0.03616  loss_mask_affinity: 0.007135    time: 0.8096  last_time: 0.8144  data_time: 0.0189  last_data_time: 0.0156   lr: 0.001  max_mem: 10411M
[32m[06/24 20:01:08 d2.utils.events]: [0m eta: 1:13:02  iter: 12579  total_loss: 1.522  loss_fcos_loc: 0.1736  loss_fcos_ctr: 0.6114  loss_fcos_vfcls: 0.5705  loss_prj: 0.07917  loss_pairwise: 0.03051  loss_mask: 0.03564  loss_mask_affinity: 0.006738    time: 0.8096  last_time: 0.9240  data_time: 0.0151  last_data_time: 0.0163   lr: 0.001  max_mem: 10411M
[32m[06/24 20:01:24 d2.utils.events]: [0m eta: 1:12:44  iter: 12599  total_loss: 1.506  loss_fcos_loc: 0.1707  loss_fcos_ctr: 0.6093  loss_fcos_vfcls: 0.5908  loss_prj: 0.07391  loss_pairwise: 0.03013  loss_mask: 0.03183  loss_mask_affinity: 0.00684    time: 0.8096  last_time: 0.7054  data_time: 0.0176  last_data_time: 0.0156   lr: 0.001  max_mem: 10411M
[32m[06/24 20:01:40 d2.utils.events]: [0m eta: 1:12:25  iter: 12619  total_loss: 1.513  loss_fcos_loc: 0.1751  loss_fcos_ctr: 0.6106  loss_fcos_vfcls: 0.5896  loss_prj: 0.07493  loss_pairwise: 0.02828  loss_mask: 0.03463  loss_mask_affinity: 0.006904    time: 0.8096  last_time: 0.7255  data_time: 0.0165  last_data_time: 0.0111   lr: 0.001  max_mem: 10411M
[32m[06/24 20:01:55 d2.utils.events]: [0m eta: 1:12:05  iter: 12639  total_loss: 1.502  loss_fcos_loc: 0.1644  loss_fcos_ctr: 0.6069  loss_fcos_vfcls: 0.5911  loss_prj: 0.0688  loss_pairwise: 0.02576  loss_mask: 0.03106  loss_mask_affinity: 0.006442    time: 0.8096  last_time: 0.8016  data_time: 0.0138  last_data_time: 0.0177   lr: 0.001  max_mem: 10411M
[32m[06/24 20:02:12 d2.utils.events]: [0m eta: 1:11:51  iter: 12659  total_loss: 1.535  loss_fcos_loc: 0.1759  loss_fcos_ctr: 0.6099  loss_fcos_vfcls: 0.5879  loss_prj: 0.07452  loss_pairwise: 0.02885  loss_mask: 0.03592  loss_mask_affinity: 0.007127    time: 0.8096  last_time: 0.9126  data_time: 0.0185  last_data_time: 0.0150   lr: 0.001  max_mem: 10411M
[32m[06/24 20:02:28 d2.utils.events]: [0m eta: 1:11:31  iter: 12679  total_loss: 1.499  loss_fcos_loc: 0.1719  loss_fcos_ctr: 0.6088  loss_fcos_vfcls: 0.5931  loss_prj: 0.07076  loss_pairwise: 0.02628  loss_mask: 0.03389  loss_mask_affinity: 0.006579    time: 0.8096  last_time: 0.7453  data_time: 0.0178  last_data_time: 0.0147   lr: 0.001  max_mem: 10411M
[32m[06/24 20:02:45 d2.utils.events]: [0m eta: 1:11:16  iter: 12699  total_loss: 1.506  loss_fcos_loc: 0.1797  loss_fcos_ctr: 0.6092  loss_fcos_vfcls: 0.5964  loss_prj: 0.06711  loss_pairwise: 0.02656  loss_mask: 0.03355  loss_mask_affinity: 0.006277    time: 0.8096  last_time: 0.7777  data_time: 0.0181  last_data_time: 0.0161   lr: 0.001  max_mem: 10411M
[32m[06/24 20:03:01 d2.utils.events]: [0m eta: 1:10:59  iter: 12719  total_loss: 1.529  loss_fcos_loc: 0.1785  loss_fcos_ctr: 0.6109  loss_fcos_vfcls: 0.59  loss_prj: 0.07525  loss_pairwise: 0.02802  loss_mask: 0.03535  loss_mask_affinity: 0.006643    time: 0.8096  last_time: 0.7533  data_time: 0.0174  last_data_time: 0.0142   lr: 0.001  max_mem: 10411M
[32m[06/24 20:03:17 d2.utils.events]: [0m eta: 1:10:44  iter: 12739  total_loss: 1.542  loss_fcos_loc: 0.1813  loss_fcos_ctr: 0.6088  loss_fcos_vfcls: 0.6017  loss_prj: 0.07509  loss_pairwise: 0.02627  loss_mask: 0.03339  loss_mask_affinity: 0.007218    time: 0.8096  last_time: 0.8074  data_time: 0.0166  last_data_time: 0.0166   lr: 0.001  max_mem: 10411M
[32m[06/24 20:03:34 d2.utils.events]: [0m eta: 1:10:29  iter: 12759  total_loss: 1.537  loss_fcos_loc: 0.1801  loss_fcos_ctr: 0.6129  loss_fcos_vfcls: 0.6003  loss_prj: 0.07613  loss_pairwise: 0.02657  loss_mask: 0.03416  loss_mask_affinity: 0.007132    time: 0.8096  last_time: 0.9124  data_time: 0.0180  last_data_time: 0.0249   lr: 0.001  max_mem: 10411M
[32m[06/24 20:03:50 d2.utils.events]: [0m eta: 1:10:12  iter: 12779  total_loss: 1.501  loss_fcos_loc: 0.1647  loss_fcos_ctr: 0.6092  loss_fcos_vfcls: 0.5928  loss_prj: 0.07083  loss_pairwise: 0.02742  loss_mask: 0.03377  loss_mask_affinity: 0.006969    time: 0.8096  last_time: 0.7344  data_time: 0.0166  last_data_time: 0.0253   lr: 0.001  max_mem: 10411M
[32m[06/24 20:04:06 d2.utils.events]: [0m eta: 1:09:52  iter: 12799  total_loss: 1.474  loss_fcos_loc: 0.1632  loss_fcos_ctr: 0.6068  loss_fcos_vfcls: 0.5698  loss_prj: 0.06759  loss_pairwise: 0.02842  loss_mask: 0.03488  loss_mask_affinity: 0.006689    time: 0.8096  last_time: 0.8317  data_time: 0.0157  last_data_time: 0.0174   lr: 0.001  max_mem: 10411M
[32m[06/24 20:04:22 d2.utils.events]: [0m eta: 1:09:35  iter: 12819  total_loss: 1.53  loss_fcos_loc: 0.1691  loss_fcos_ctr: 0.6097  loss_fcos_vfcls: 0.5973  loss_prj: 0.07454  loss_pairwise: 0.02982  loss_mask: 0.03234  loss_mask_affinity: 0.006879    time: 0.8096  last_time: 0.7263  data_time: 0.0173  last_data_time: 0.0197   lr: 0.001  max_mem: 10411M
[32m[06/24 20:04:38 d2.utils.events]: [0m eta: 1:09:18  iter: 12839  total_loss: 1.52  loss_fcos_loc: 0.1719  loss_fcos_ctr: 0.6104  loss_fcos_vfcls: 0.5854  loss_prj: 0.07606  loss_pairwise: 0.02702  loss_mask: 0.0343  loss_mask_affinity: 0.006858    time: 0.8096  last_time: 0.7720  data_time: 0.0171  last_data_time: 0.0162   lr: 0.001  max_mem: 10411M
[32m[06/24 20:04:55 d2.utils.events]: [0m eta: 1:09:00  iter: 12859  total_loss: 1.539  loss_fcos_loc: 0.1818  loss_fcos_ctr: 0.6132  loss_fcos_vfcls: 0.5841  loss_prj: 0.08105  loss_pairwise: 0.02654  loss_mask: 0.03703  loss_mask_affinity: 0.006963    time: 0.8096  last_time: 0.7802  data_time: 0.0143  last_data_time: 0.0084   lr: 0.001  max_mem: 10411M
[32m[06/24 20:05:11 d2.utils.events]: [0m eta: 1:08:46  iter: 12879  total_loss: 1.48  loss_fcos_loc: 0.1686  loss_fcos_ctr: 0.612  loss_fcos_vfcls: 0.5665  loss_prj: 0.0692  loss_pairwise: 0.02507  loss_mask: 0.03149  loss_mask_affinity: 0.00749    time: 0.8096  last_time: 0.7975  data_time: 0.0168  last_data_time: 0.0141   lr: 0.001  max_mem: 10411M
[32m[06/24 20:05:28 d2.utils.events]: [0m eta: 1:08:33  iter: 12899  total_loss: 1.514  loss_fcos_loc: 0.1774  loss_fcos_ctr: 0.614  loss_fcos_vfcls: 0.5739  loss_prj: 0.07568  loss_pairwise: 0.02724  loss_mask: 0.03375  loss_mask_affinity: 0.007138    time: 0.8096  last_time: 0.8548  data_time: 0.0185  last_data_time: 0.0286   lr: 0.001  max_mem: 10411M
[32m[06/24 20:05:44 d2.utils.events]: [0m eta: 1:08:13  iter: 12919  total_loss: 1.475  loss_fcos_loc: 0.1602  loss_fcos_ctr: 0.6104  loss_fcos_vfcls: 0.5744  loss_prj: 0.06812  loss_pairwise: 0.02885  loss_mask: 0.03229  loss_mask_affinity: 0.007021    time: 0.8096  last_time: 0.7345  data_time: 0.0177  last_data_time: 0.0145   lr: 0.001  max_mem: 10411M
[32m[06/24 20:06:01 d2.utils.events]: [0m eta: 1:07:58  iter: 12939  total_loss: 1.508  loss_fcos_loc: 0.176  loss_fcos_ctr: 0.6093  loss_fcos_vfcls: 0.5784  loss_prj: 0.07745  loss_pairwise: 0.02638  loss_mask: 0.03635  loss_mask_affinity: 0.007406    time: 0.8096  last_time: 0.8261  data_time: 0.0160  last_data_time: 0.0145   lr: 0.001  max_mem: 10411M
[32m[06/24 20:06:17 d2.utils.events]: [0m eta: 1:07:46  iter: 12959  total_loss: 1.514  loss_fcos_loc: 0.1747  loss_fcos_ctr: 0.6144  loss_fcos_vfcls: 0.5933  loss_prj: 0.07331  loss_pairwise: 0.02459  loss_mask: 0.03317  loss_mask_affinity: 0.006923    time: 0.8097  last_time: 0.7627  data_time: 0.0155  last_data_time: 0.0191   lr: 0.001  max_mem: 10411M
[32m[06/24 20:06:33 d2.utils.events]: [0m eta: 1:07:26  iter: 12979  total_loss: 1.504  loss_fcos_loc: 0.1724  loss_fcos_ctr: 0.6123  loss_fcos_vfcls: 0.574  loss_prj: 0.07217  loss_pairwise: 0.02573  loss_mask: 0.03179  loss_mask_affinity: 0.007069    time: 0.8096  last_time: 0.7379  data_time: 0.0140  last_data_time: 0.0137   lr: 0.001  max_mem: 10411M
[32m[06/24 20:06:49 d2.utils.events]: [0m eta: 1:07:04  iter: 12999  total_loss: 1.518  loss_fcos_loc: 0.1846  loss_fcos_ctr: 0.612  loss_fcos_vfcls: 0.5737  loss_prj: 0.07786  loss_pairwise: 0.02731  loss_mask: 0.03286  loss_mask_affinity: 0.007203    time: 0.8096  last_time: 0.7875  data_time: 0.0177  last_data_time: 0.0142   lr: 0.001  max_mem: 10411M
[32m[06/24 20:07:05 d2.utils.events]: [0m eta: 1:06:47  iter: 13019  total_loss: 1.497  loss_fcos_loc: 0.1684  loss_fcos_ctr: 0.6099  loss_fcos_vfcls: 0.5894  loss_prj: 0.06951  loss_pairwise: 0.02714  loss_mask: 0.0315  loss_mask_affinity: 0.007495    time: 0.8096  last_time: 0.7253  data_time: 0.0173  last_data_time: 0.0203   lr: 0.001  max_mem: 10411M
[32m[06/24 20:07:21 d2.utils.events]: [0m eta: 1:06:31  iter: 13039  total_loss: 1.49  loss_fcos_loc: 0.1741  loss_fcos_ctr: 0.6124  loss_fcos_vfcls: 0.5775  loss_prj: 0.07657  loss_pairwise: 0.02716  loss_mask: 0.03442  loss_mask_affinity: 0.007102    time: 0.8096  last_time: 0.7916  data_time: 0.0180  last_data_time: 0.0317   lr: 0.001  max_mem: 10411M
[32m[06/24 20:07:39 d2.utils.events]: [0m eta: 1:06:20  iter: 13059  total_loss: 1.517  loss_fcos_loc: 0.1718  loss_fcos_ctr: 0.611  loss_fcos_vfcls: 0.5924  loss_prj: 0.06988  loss_pairwise: 0.03026  loss_mask: 0.03517  loss_mask_affinity: 0.007009    time: 0.8097  last_time: 0.7635  data_time: 0.0197  last_data_time: 0.0363   lr: 0.001  max_mem: 10411M
[32m[06/24 20:07:55 d2.utils.events]: [0m eta: 1:06:05  iter: 13079  total_loss: 1.521  loss_fcos_loc: 0.1728  loss_fcos_ctr: 0.6086  loss_fcos_vfcls: 0.5937  loss_prj: 0.07549  loss_pairwise: 0.02744  loss_mask: 0.03229  loss_mask_affinity: 0.007056    time: 0.8097  last_time: 0.8435  data_time: 0.0154  last_data_time: 0.0117   lr: 0.001  max_mem: 10411M
[32m[06/24 20:08:11 d2.utils.events]: [0m eta: 1:05:52  iter: 13099  total_loss: 1.505  loss_fcos_loc: 0.1727  loss_fcos_ctr: 0.6106  loss_fcos_vfcls: 0.5908  loss_prj: 0.0753  loss_pairwise: 0.0262  loss_mask: 0.03316  loss_mask_affinity: 0.007167    time: 0.8097  last_time: 0.8726  data_time: 0.0168  last_data_time: 0.0179   lr: 0.001  max_mem: 10411M
[32m[06/24 20:08:28 d2.utils.events]: [0m eta: 1:05:34  iter: 13119  total_loss: 1.5  loss_fcos_loc: 0.1649  loss_fcos_ctr: 0.6105  loss_fcos_vfcls: 0.5952  loss_prj: 0.07053  loss_pairwise: 0.02746  loss_mask: 0.0333  loss_mask_affinity: 0.006743    time: 0.8098  last_time: 0.7090  data_time: 0.0175  last_data_time: 0.0204   lr: 0.001  max_mem: 10411M
[32m[06/24 20:08:44 d2.utils.events]: [0m eta: 1:05:19  iter: 13139  total_loss: 1.523  loss_fcos_loc: 0.1734  loss_fcos_ctr: 0.6112  loss_fcos_vfcls: 0.599  loss_prj: 0.07144  loss_pairwise: 0.02784  loss_mask: 0.03309  loss_mask_affinity: 0.006842    time: 0.8098  last_time: 0.7606  data_time: 0.0152  last_data_time: 0.0128   lr: 0.001  max_mem: 10411M
[32m[06/24 20:09:01 d2.utils.events]: [0m eta: 1:05:04  iter: 13159  total_loss: 1.515  loss_fcos_loc: 0.1751  loss_fcos_ctr: 0.6094  loss_fcos_vfcls: 0.5987  loss_prj: 0.0716  loss_pairwise: 0.02756  loss_mask: 0.03547  loss_mask_affinity: 0.006872    time: 0.8098  last_time: 0.8975  data_time: 0.0185  last_data_time: 0.0313   lr: 0.001  max_mem: 10411M
[32m[06/24 20:09:17 d2.utils.events]: [0m eta: 1:04:45  iter: 13179  total_loss: 1.507  loss_fcos_loc: 0.1701  loss_fcos_ctr: 0.6077  loss_fcos_vfcls: 0.5872  loss_prj: 0.07366  loss_pairwise: 0.02616  loss_mask: 0.03158  loss_mask_affinity: 0.00637    time: 0.8098  last_time: 0.7962  data_time: 0.0151  last_data_time: 0.0113   lr: 0.001  max_mem: 10411M
[32m[06/24 20:09:33 d2.utils.events]: [0m eta: 1:04:30  iter: 13199  total_loss: 1.492  loss_fcos_loc: 0.1641  loss_fcos_ctr: 0.6083  loss_fcos_vfcls: 0.5756  loss_prj: 0.06824  loss_pairwise: 0.02625  loss_mask: 0.03061  loss_mask_affinity: 0.006645    time: 0.8098  last_time: 0.7558  data_time: 0.0156  last_data_time: 0.0151   lr: 0.001  max_mem: 10411M
[32m[06/24 20:09:49 d2.utils.events]: [0m eta: 1:04:13  iter: 13219  total_loss: 1.526  loss_fcos_loc: 0.1647  loss_fcos_ctr: 0.6099  loss_fcos_vfcls: 0.5772  loss_prj: 0.07218  loss_pairwise: 0.02727  loss_mask: 0.03281  loss_mask_affinity: 0.006749    time: 0.8098  last_time: 0.7788  data_time: 0.0158  last_data_time: 0.0129   lr: 0.001  max_mem: 10411M
[32m[06/24 20:10:05 d2.utils.events]: [0m eta: 1:03:56  iter: 13239  total_loss: 1.491  loss_fcos_loc: 0.1579  loss_fcos_ctr: 0.6056  loss_fcos_vfcls: 0.5753  loss_prj: 0.06683  loss_pairwise: 0.02597  loss_mask: 0.02838  loss_mask_affinity: 0.006446    time: 0.8098  last_time: 0.8311  data_time: 0.0151  last_data_time: 0.0132   lr: 0.001  max_mem: 10411M
[32m[06/24 20:10:21 d2.utils.events]: [0m eta: 1:03:38  iter: 13259  total_loss: 1.486  loss_fcos_loc: 0.1639  loss_fcos_ctr: 0.6089  loss_fcos_vfcls: 0.5807  loss_prj: 0.06822  loss_pairwise: 0.02652  loss_mask: 0.03329  loss_mask_affinity: 0.006403    time: 0.8097  last_time: 0.8242  data_time: 0.0152  last_data_time: 0.0129   lr: 0.001  max_mem: 10411M
[32m[06/24 20:10:38 d2.utils.events]: [0m eta: 1:03:24  iter: 13279  total_loss: 1.515  loss_fcos_loc: 0.1797  loss_fcos_ctr: 0.6099  loss_fcos_vfcls: 0.586  loss_prj: 0.07674  loss_pairwise: 0.02765  loss_mask: 0.03696  loss_mask_affinity: 0.006888    time: 0.8098  last_time: 0.7426  data_time: 0.0162  last_data_time: 0.0205   lr: 0.001  max_mem: 10411M
[32m[06/24 20:10:53 d2.utils.events]: [0m eta: 1:03:04  iter: 13299  total_loss: 1.518  loss_fcos_loc: 0.1698  loss_fcos_ctr: 0.6096  loss_fcos_vfcls: 0.5827  loss_prj: 0.07069  loss_pairwise: 0.02813  loss_mask: 0.03451  loss_mask_affinity: 0.006824    time: 0.8097  last_time: 0.7930  data_time: 0.0149  last_data_time: 0.0157   lr: 0.001  max_mem: 10411M
[32m[06/24 20:11:10 d2.utils.events]: [0m eta: 1:02:52  iter: 13319  total_loss: 1.522  loss_fcos_loc: 0.1691  loss_fcos_ctr: 0.6089  loss_fcos_vfcls: 0.5911  loss_prj: 0.072  loss_pairwise: 0.02768  loss_mask: 0.03545  loss_mask_affinity: 0.006738    time: 0.8097  last_time: 0.8605  data_time: 0.0179  last_data_time: 0.0400   lr: 0.001  max_mem: 10411M
[32m[06/24 20:11:26 d2.utils.events]: [0m eta: 1:02:34  iter: 13339  total_loss: 1.499  loss_fcos_loc: 0.1688  loss_fcos_ctr: 0.6099  loss_fcos_vfcls: 0.5836  loss_prj: 0.06995  loss_pairwise: 0.0261  loss_mask: 0.03456  loss_mask_affinity: 0.006944    time: 0.8097  last_time: 0.7192  data_time: 0.0178  last_data_time: 0.0188   lr: 0.001  max_mem: 10411M
[32m[06/24 20:11:42 d2.utils.events]: [0m eta: 1:02:19  iter: 13359  total_loss: 1.506  loss_fcos_loc: 0.1738  loss_fcos_ctr: 0.6085  loss_fcos_vfcls: 0.5847  loss_prj: 0.0713  loss_pairwise: 0.02768  loss_mask: 0.03215  loss_mask_affinity: 0.007034    time: 0.8097  last_time: 0.8459  data_time: 0.0154  last_data_time: 0.0195   lr: 0.001  max_mem: 10411M
[32m[06/24 20:11:58 d2.utils.events]: [0m eta: 1:02:02  iter: 13379  total_loss: 1.522  loss_fcos_loc: 0.1725  loss_fcos_ctr: 0.6119  loss_fcos_vfcls: 0.5837  loss_prj: 0.07495  loss_pairwise: 0.02687  loss_mask: 0.03555  loss_mask_affinity: 0.0069    time: 0.8097  last_time: 0.8674  data_time: 0.0142  last_data_time: 0.0096   lr: 0.001  max_mem: 10411M
[32m[06/24 20:12:14 d2.utils.events]: [0m eta: 1:01:46  iter: 13399  total_loss: 1.512  loss_fcos_loc: 0.1734  loss_fcos_ctr: 0.6098  loss_fcos_vfcls: 0.58  loss_prj: 0.07435  loss_pairwise: 0.02735  loss_mask: 0.03371  loss_mask_affinity: 0.006663    time: 0.8097  last_time: 0.8325  data_time: 0.0149  last_data_time: 0.0171   lr: 0.001  max_mem: 10411M
[32m[06/24 20:12:31 d2.utils.events]: [0m eta: 1:01:31  iter: 13419  total_loss: 1.513  loss_fcos_loc: 0.1678  loss_fcos_ctr: 0.6101  loss_fcos_vfcls: 0.599  loss_prj: 0.07314  loss_pairwise: 0.02749  loss_mask: 0.03626  loss_mask_affinity: 0.007412    time: 0.8097  last_time: 0.7904  data_time: 0.0154  last_data_time: 0.0156   lr: 0.001  max_mem: 10411M
[32m[06/24 20:12:47 d2.utils.events]: [0m eta: 1:01:17  iter: 13439  total_loss: 1.519  loss_fcos_loc: 0.181  loss_fcos_ctr: 0.61  loss_fcos_vfcls: 0.573  loss_prj: 0.07401  loss_pairwise: 0.02873  loss_mask: 0.03544  loss_mask_affinity: 0.006878    time: 0.8097  last_time: 0.7777  data_time: 0.0149  last_data_time: 0.0174   lr: 0.001  max_mem: 10411M
[32m[06/24 20:13:03 d2.utils.events]: [0m eta: 1:01:01  iter: 13459  total_loss: 1.529  loss_fcos_loc: 0.1713  loss_fcos_ctr: 0.611  loss_fcos_vfcls: 0.5986  loss_prj: 0.07635  loss_pairwise: 0.0279  loss_mask: 0.03415  loss_mask_affinity: 0.007368    time: 0.8097  last_time: 0.8847  data_time: 0.0158  last_data_time: 0.0147   lr: 0.001  max_mem: 10411M
[32m[06/24 20:13:19 d2.utils.events]: [0m eta: 1:00:43  iter: 13479  total_loss: 1.507  loss_fcos_loc: 0.1721  loss_fcos_ctr: 0.609  loss_fcos_vfcls: 0.5735  loss_prj: 0.07478  loss_pairwise: 0.02601  loss_mask: 0.03292  loss_mask_affinity: 0.007256    time: 0.8097  last_time: 0.8583  data_time: 0.0162  last_data_time: 0.0151   lr: 0.001  max_mem: 10411M
[32m[06/24 20:13:36 d2.utils.events]: [0m eta: 1:00:27  iter: 13499  total_loss: 1.496  loss_fcos_loc: 0.1625  loss_fcos_ctr: 0.61  loss_fcos_vfcls: 0.5731  loss_prj: 0.07174  loss_pairwise: 0.02691  loss_mask: 0.03447  loss_mask_affinity: 0.006558    time: 0.8097  last_time: 0.8589  data_time: 0.0182  last_data_time: 0.0337   lr: 0.001  max_mem: 10411M
[32m[06/24 20:13:52 d2.utils.events]: [0m eta: 1:00:11  iter: 13519  total_loss: 1.525  loss_fcos_loc: 0.1698  loss_fcos_ctr: 0.6104  loss_fcos_vfcls: 0.585  loss_prj: 0.07454  loss_pairwise: 0.02802  loss_mask: 0.03487  loss_mask_affinity: 0.006822    time: 0.8097  last_time: 0.7609  data_time: 0.0184  last_data_time: 0.0283   lr: 0.001  max_mem: 10411M
[32m[06/24 20:14:08 d2.utils.events]: [0m eta: 0:59:55  iter: 13539  total_loss: 1.487  loss_fcos_loc: 0.1639  loss_fcos_ctr: 0.6082  loss_fcos_vfcls: 0.5774  loss_prj: 0.06998  loss_pairwise: 0.02828  loss_mask: 0.03208  loss_mask_affinity: 0.007083    time: 0.8097  last_time: 0.8269  data_time: 0.0139  last_data_time: 0.0091   lr: 0.001  max_mem: 10411M
[32m[06/24 20:14:25 d2.utils.events]: [0m eta: 0:59:39  iter: 13559  total_loss: 1.472  loss_fcos_loc: 0.1607  loss_fcos_ctr: 0.6076  loss_fcos_vfcls: 0.5637  loss_prj: 0.06859  loss_pairwise: 0.0258  loss_mask: 0.03236  loss_mask_affinity: 0.006843    time: 0.8097  last_time: 0.7456  data_time: 0.0182  last_data_time: 0.0131   lr: 0.001  max_mem: 10411M
[32m[06/24 20:14:40 d2.utils.events]: [0m eta: 0:59:13  iter: 13579  total_loss: 1.512  loss_fcos_loc: 0.1782  loss_fcos_ctr: 0.6107  loss_fcos_vfcls: 0.5726  loss_prj: 0.07245  loss_pairwise: 0.02886  loss_mask: 0.0376  loss_mask_affinity: 0.006676    time: 0.8097  last_time: 0.8072  data_time: 0.0184  last_data_time: 0.0123   lr: 0.001  max_mem: 10411M
[32m[06/24 20:14:57 d2.utils.events]: [0m eta: 0:59:01  iter: 13599  total_loss: 1.515  loss_fcos_loc: 0.1664  loss_fcos_ctr: 0.6091  loss_fcos_vfcls: 0.5793  loss_prj: 0.06698  loss_pairwise: 0.02372  loss_mask: 0.03166  loss_mask_affinity: 0.006427    time: 0.8097  last_time: 0.7668  data_time: 0.0158  last_data_time: 0.0081   lr: 0.001  max_mem: 10411M
[32m[06/24 20:15:12 d2.utils.events]: [0m eta: 0:58:45  iter: 13619  total_loss: 1.478  loss_fcos_loc: 0.1677  loss_fcos_ctr: 0.6092  loss_fcos_vfcls: 0.5756  loss_prj: 0.06928  loss_pairwise: 0.02447  loss_mask: 0.03038  loss_mask_affinity: 0.006444    time: 0.8097  last_time: 0.7256  data_time: 0.0166  last_data_time: 0.0138   lr: 0.001  max_mem: 10411M
[32m[06/24 20:15:28 d2.utils.events]: [0m eta: 0:58:34  iter: 13639  total_loss: 1.488  loss_fcos_loc: 0.1643  loss_fcos_ctr: 0.6088  loss_fcos_vfcls: 0.5795  loss_prj: 0.07252  loss_pairwise: 0.02598  loss_mask: 0.03548  loss_mask_affinity: 0.006486    time: 0.8096  last_time: 0.7151  data_time: 0.0159  last_data_time: 0.0090   lr: 0.001  max_mem: 10411M
[32m[06/24 20:15:44 d2.utils.events]: [0m eta: 0:58:11  iter: 13659  total_loss: 1.511  loss_fcos_loc: 0.1644  loss_fcos_ctr: 0.6118  loss_fcos_vfcls: 0.5869  loss_prj: 0.07053  loss_pairwise: 0.02962  loss_mask: 0.03273  loss_mask_affinity: 0.006799    time: 0.8096  last_time: 0.7657  data_time: 0.0137  last_data_time: 0.0136   lr: 0.001  max_mem: 10411M
[32m[06/24 20:16:00 d2.utils.events]: [0m eta: 0:57:56  iter: 13679  total_loss: 1.51  loss_fcos_loc: 0.173  loss_fcos_ctr: 0.6085  loss_fcos_vfcls: 0.5921  loss_prj: 0.0783  loss_pairwise: 0.02562  loss_mask: 0.03928  loss_mask_affinity: 0.007292    time: 0.8096  last_time: 0.8060  data_time: 0.0159  last_data_time: 0.0179   lr: 0.001  max_mem: 10411M
[32m[06/24 20:16:17 d2.utils.events]: [0m eta: 0:57:45  iter: 13699  total_loss: 1.512  loss_fcos_loc: 0.1726  loss_fcos_ctr: 0.6096  loss_fcos_vfcls: 0.5819  loss_prj: 0.0725  loss_pairwise: 0.02808  loss_mask: 0.03515  loss_mask_affinity: 0.007304    time: 0.8096  last_time: 0.9611  data_time: 0.0161  last_data_time: 0.0171   lr: 0.001  max_mem: 10411M
[32m[06/24 20:16:33 d2.utils.events]: [0m eta: 0:57:29  iter: 13719  total_loss: 1.494  loss_fcos_loc: 0.1661  loss_fcos_ctr: 0.6109  loss_fcos_vfcls: 0.5798  loss_prj: 0.06967  loss_pairwise: 0.02595  loss_mask: 0.03346  loss_mask_affinity: 0.007074    time: 0.8096  last_time: 0.8409  data_time: 0.0179  last_data_time: 0.0198   lr: 0.001  max_mem: 10411M
[32m[06/24 20:16:50 d2.utils.events]: [0m eta: 0:57:09  iter: 13739  total_loss: 1.473  loss_fcos_loc: 0.1699  loss_fcos_ctr: 0.6107  loss_fcos_vfcls: 0.5614  loss_prj: 0.07542  loss_pairwise: 0.0267  loss_mask: 0.0291  loss_mask_affinity: 0.007184    time: 0.8096  last_time: 0.7769  data_time: 0.0151  last_data_time: 0.0099   lr: 0.001  max_mem: 10411M
[32m[06/24 20:17:05 d2.utils.events]: [0m eta: 0:56:47  iter: 13759  total_loss: 1.473  loss_fcos_loc: 0.1591  loss_fcos_ctr: 0.6066  loss_fcos_vfcls: 0.5619  loss_prj: 0.0644  loss_pairwise: 0.02777  loss_mask: 0.03069  loss_mask_affinity: 0.006995    time: 0.8096  last_time: 0.7321  data_time: 0.0187  last_data_time: 0.0187   lr: 0.001  max_mem: 10411M
[32m[06/24 20:17:22 d2.utils.events]: [0m eta: 0:56:33  iter: 13779  total_loss: 1.493  loss_fcos_loc: 0.1683  loss_fcos_ctr: 0.6075  loss_fcos_vfcls: 0.5747  loss_prj: 0.06819  loss_pairwise: 0.02812  loss_mask: 0.03312  loss_mask_affinity: 0.006831    time: 0.8096  last_time: 0.8568  data_time: 0.0169  last_data_time: 0.0149   lr: 0.001  max_mem: 10411M
[32m[06/24 20:17:38 d2.utils.events]: [0m eta: 0:56:22  iter: 13799  total_loss: 1.516  loss_fcos_loc: 0.1767  loss_fcos_ctr: 0.6103  loss_fcos_vfcls: 0.5837  loss_prj: 0.07266  loss_pairwise: 0.02968  loss_mask: 0.037  loss_mask_affinity: 0.007041    time: 0.8096  last_time: 0.8127  data_time: 0.0137  last_data_time: 0.0135   lr: 0.001  max_mem: 10411M
[32m[06/24 20:17:54 d2.utils.events]: [0m eta: 0:55:59  iter: 13819  total_loss: 1.509  loss_fcos_loc: 0.1746  loss_fcos_ctr: 0.6101  loss_fcos_vfcls: 0.5802  loss_prj: 0.07361  loss_pairwise: 0.02871  loss_mask: 0.03411  loss_mask_affinity: 0.007226    time: 0.8096  last_time: 0.7987  data_time: 0.0162  last_data_time: 0.0256   lr: 0.001  max_mem: 10411M
[32m[06/24 20:18:10 d2.utils.events]: [0m eta: 0:55:42  iter: 13839  total_loss: 1.487  loss_fcos_loc: 0.1663  loss_fcos_ctr: 0.6093  loss_fcos_vfcls: 0.5799  loss_prj: 0.06862  loss_pairwise: 0.02613  loss_mask: 0.03341  loss_mask_affinity: 0.006891    time: 0.8096  last_time: 0.7246  data_time: 0.0170  last_data_time: 0.0170   lr: 0.001  max_mem: 10411M
[32m[06/24 20:18:27 d2.utils.events]: [0m eta: 0:55:27  iter: 13859  total_loss: 1.535  loss_fcos_loc: 0.1761  loss_fcos_ctr: 0.6137  loss_fcos_vfcls: 0.5808  loss_prj: 0.07322  loss_pairwise: 0.02769  loss_mask: 0.03384  loss_mask_affinity: 0.007396    time: 0.8096  last_time: 0.8922  data_time: 0.0170  last_data_time: 0.0152   lr: 0.001  max_mem: 10411M
[32m[06/24 20:18:43 d2.utils.events]: [0m eta: 0:55:15  iter: 13879  total_loss: 1.534  loss_fcos_loc: 0.1793  loss_fcos_ctr: 0.6119  loss_fcos_vfcls: 0.5896  loss_prj: 0.07957  loss_pairwise: 0.02627  loss_mask: 0.03881  loss_mask_affinity: 0.007494    time: 0.8096  last_time: 0.8812  data_time: 0.0162  last_data_time: 0.0182   lr: 0.001  max_mem: 10411M
[32m[06/24 20:18:59 d2.utils.events]: [0m eta: 0:54:54  iter: 13899  total_loss: 1.498  loss_fcos_loc: 0.1597  loss_fcos_ctr: 0.6073  loss_fcos_vfcls: 0.5857  loss_prj: 0.0658  loss_pairwise: 0.02842  loss_mask: 0.03152  loss_mask_affinity: 0.007448    time: 0.8096  last_time: 0.8103  data_time: 0.0155  last_data_time: 0.0182   lr: 0.001  max_mem: 10411M
[32m[06/24 20:19:16 d2.utils.events]: [0m eta: 0:54:48  iter: 13919  total_loss: 1.506  loss_fcos_loc: 0.1738  loss_fcos_ctr: 0.6111  loss_fcos_vfcls: 0.5754  loss_prj: 0.06892  loss_pairwise: 0.0265  loss_mask: 0.03219  loss_mask_affinity: 0.006677    time: 0.8096  last_time: 0.8414  data_time: 0.0134  last_data_time: 0.0082   lr: 0.001  max_mem: 10411M
[32m[06/24 20:19:32 d2.utils.events]: [0m eta: 0:54:29  iter: 13939  total_loss: 1.546  loss_fcos_loc: 0.178  loss_fcos_ctr: 0.6114  loss_fcos_vfcls: 0.5777  loss_prj: 0.07407  loss_pairwise: 0.02608  loss_mask: 0.03554  loss_mask_affinity: 0.006808    time: 0.8096  last_time: 0.8239  data_time: 0.0161  last_data_time: 0.0175   lr: 0.001  max_mem: 10520M
[32m[06/24 20:19:48 d2.utils.events]: [0m eta: 0:54:09  iter: 13959  total_loss: 1.488  loss_fcos_loc: 0.1678  loss_fcos_ctr: 0.6094  loss_fcos_vfcls: 0.5694  loss_prj: 0.07541  loss_pairwise: 0.02763  loss_mask: 0.03246  loss_mask_affinity: 0.007469    time: 0.8096  last_time: 0.7898  data_time: 0.0167  last_data_time: 0.0167   lr: 0.001  max_mem: 10520M
[32m[06/24 20:20:05 d2.utils.events]: [0m eta: 0:54:01  iter: 13979  total_loss: 1.488  loss_fcos_loc: 0.1586  loss_fcos_ctr: 0.6041  loss_fcos_vfcls: 0.5906  loss_prj: 0.06448  loss_pairwise: 0.02262  loss_mask: 0.02906  loss_mask_affinity: 0.006559    time: 0.8097  last_time: 0.8044  data_time: 0.0168  last_data_time: 0.0131   lr: 0.001  max_mem: 10520M
[32m[06/24 20:20:21 d2.utils.events]: [0m eta: 0:53:49  iter: 13999  total_loss: 1.521  loss_fcos_loc: 0.1762  loss_fcos_ctr: 0.6119  loss_fcos_vfcls: 0.5794  loss_prj: 0.07391  loss_pairwise: 0.02886  loss_mask: 0.03709  loss_mask_affinity: 0.007207    time: 0.8097  last_time: 0.8881  data_time: 0.0188  last_data_time: 0.0259   lr: 0.001  max_mem: 10520M
[32m[06/24 20:20:38 d2.utils.events]: [0m eta: 0:53:33  iter: 14019  total_loss: 1.502  loss_fcos_loc: 0.1712  loss_fcos_ctr: 0.608  loss_fcos_vfcls: 0.5712  loss_prj: 0.07347  loss_pairwise: 0.02645  loss_mask: 0.03294  loss_mask_affinity: 0.007284    time: 0.8097  last_time: 0.8299  data_time: 0.0167  last_data_time: 0.0285   lr: 0.001  max_mem: 10520M
[32m[06/24 20:20:55 d2.utils.events]: [0m eta: 0:53:18  iter: 14039  total_loss: 1.508  loss_fcos_loc: 0.1761  loss_fcos_ctr: 0.6108  loss_fcos_vfcls: 0.5766  loss_prj: 0.07276  loss_pairwise: 0.02679  loss_mask: 0.03375  loss_mask_affinity: 0.00766    time: 0.8097  last_time: 0.6758  data_time: 0.0182  last_data_time: 0.0154   lr: 0.001  max_mem: 10520M
[32m[06/24 20:21:11 d2.utils.events]: [0m eta: 0:53:01  iter: 14059  total_loss: 1.476  loss_fcos_loc: 0.1652  loss_fcos_ctr: 0.6121  loss_fcos_vfcls: 0.5733  loss_prj: 0.07011  loss_pairwise: 0.02343  loss_mask: 0.03166  loss_mask_affinity: 0.006632    time: 0.8098  last_time: 0.7665  data_time: 0.0175  last_data_time: 0.0210   lr: 0.001  max_mem: 10520M
[32m[06/24 20:21:27 d2.utils.events]: [0m eta: 0:52:44  iter: 14079  total_loss: 1.493  loss_fcos_loc: 0.1655  loss_fcos_ctr: 0.6139  loss_fcos_vfcls: 0.5628  loss_prj: 0.07213  loss_pairwise: 0.02535  loss_mask: 0.03222  loss_mask_affinity: 0.006717    time: 0.8098  last_time: 0.6912  data_time: 0.0204  last_data_time: 0.0176   lr: 0.001  max_mem: 10520M
[32m[06/24 20:21:44 d2.utils.events]: [0m eta: 0:52:27  iter: 14099  total_loss: 1.518  loss_fcos_loc: 0.1752  loss_fcos_ctr: 0.6102  loss_fcos_vfcls: 0.5835  loss_prj: 0.07711  loss_pairwise: 0.02602  loss_mask: 0.03359  loss_mask_affinity: 0.006937    time: 0.8098  last_time: 0.8685  data_time: 0.0153  last_data_time: 0.0230   lr: 0.001  max_mem: 10520M
[32m[06/24 20:22:00 d2.utils.events]: [0m eta: 0:52:08  iter: 14119  total_loss: 1.489  loss_fcos_loc: 0.1655  loss_fcos_ctr: 0.6095  loss_fcos_vfcls: 0.5722  loss_prj: 0.06695  loss_pairwise: 0.02694  loss_mask: 0.03079  loss_mask_affinity: 0.006648    time: 0.8097  last_time: 0.9055  data_time: 0.0187  last_data_time: 0.0331   lr: 0.001  max_mem: 10520M
[32m[06/24 20:22:16 d2.utils.events]: [0m eta: 0:51:53  iter: 14139  total_loss: 1.535  loss_fcos_loc: 0.1773  loss_fcos_ctr: 0.6113  loss_fcos_vfcls: 0.5924  loss_prj: 0.07521  loss_pairwise: 0.02793  loss_mask: 0.03574  loss_mask_affinity: 0.006941    time: 0.8098  last_time: 0.8009  data_time: 0.0163  last_data_time: 0.0216   lr: 0.001  max_mem: 10520M
[32m[06/24 20:22:33 d2.utils.events]: [0m eta: 0:51:35  iter: 14159  total_loss: 1.488  loss_fcos_loc: 0.1691  loss_fcos_ctr: 0.6119  loss_fcos_vfcls: 0.5645  loss_prj: 0.07371  loss_pairwise: 0.02515  loss_mask: 0.03277  loss_mask_affinity: 0.006943    time: 0.8098  last_time: 0.7665  data_time: 0.0171  last_data_time: 0.0124   lr: 0.001  max_mem: 10520M
[32m[06/24 20:22:49 d2.utils.events]: [0m eta: 0:51:21  iter: 14179  total_loss: 1.5  loss_fcos_loc: 0.1712  loss_fcos_ctr: 0.6089  loss_fcos_vfcls: 0.5875  loss_prj: 0.07359  loss_pairwise: 0.02726  loss_mask: 0.03208  loss_mask_affinity: 0.006979    time: 0.8098  last_time: 0.7683  data_time: 0.0148  last_data_time: 0.0078   lr: 0.001  max_mem: 10520M
[32m[06/24 20:23:06 d2.utils.events]: [0m eta: 0:51:06  iter: 14199  total_loss: 1.482  loss_fcos_loc: 0.1701  loss_fcos_ctr: 0.6101  loss_fcos_vfcls: 0.5631  loss_prj: 0.07508  loss_pairwise: 0.02861  loss_mask: 0.03168  loss_mask_affinity: 0.007084    time: 0.8098  last_time: 0.7588  data_time: 0.0177  last_data_time: 0.0106   lr: 0.001  max_mem: 10520M
[32m[06/24 20:23:22 d2.utils.events]: [0m eta: 0:50:50  iter: 14219  total_loss: 1.503  loss_fcos_loc: 0.1727  loss_fcos_ctr: 0.6093  loss_fcos_vfcls: 0.5751  loss_prj: 0.07319  loss_pairwise: 0.02755  loss_mask: 0.03479  loss_mask_affinity: 0.007217    time: 0.8098  last_time: 0.8414  data_time: 0.0182  last_data_time: 0.0442   lr: 0.001  max_mem: 10520M
[32m[06/24 20:23:38 d2.utils.events]: [0m eta: 0:50:34  iter: 14239  total_loss: 1.508  loss_fcos_loc: 0.1634  loss_fcos_ctr: 0.6075  loss_fcos_vfcls: 0.597  loss_prj: 0.07107  loss_pairwise: 0.02658  loss_mask: 0.03373  loss_mask_affinity: 0.006481    time: 0.8098  last_time: 0.8015  data_time: 0.0172  last_data_time: 0.0138   lr: 0.001  max_mem: 10520M
[32m[06/24 20:23:54 d2.utils.events]: [0m eta: 0:50:19  iter: 14259  total_loss: 1.519  loss_fcos_loc: 0.1745  loss_fcos_ctr: 0.6111  loss_fcos_vfcls: 0.5822  loss_prj: 0.07171  loss_pairwise: 0.02871  loss_mask: 0.03126  loss_mask_affinity: 0.006792    time: 0.8098  last_time: 0.7968  data_time: 0.0163  last_data_time: 0.0097   lr: 0.001  max_mem: 10520M
[32m[06/24 20:24:10 d2.utils.events]: [0m eta: 0:50:03  iter: 14279  total_loss: 1.479  loss_fcos_loc: 0.167  loss_fcos_ctr: 0.6084  loss_fcos_vfcls: 0.5716  loss_prj: 0.06793  loss_pairwise: 0.02641  loss_mask: 0.0295  loss_mask_affinity: 0.006914    time: 0.8098  last_time: 0.6935  data_time: 0.0196  last_data_time: 0.0251   lr: 0.001  max_mem: 10520M
[32m[06/24 20:24:27 d2.utils.events]: [0m eta: 0:49:48  iter: 14299  total_loss: 1.502  loss_fcos_loc: 0.1623  loss_fcos_ctr: 0.6086  loss_fcos_vfcls: 0.5779  loss_prj: 0.06763  loss_pairwise: 0.02638  loss_mask: 0.03319  loss_mask_affinity: 0.006813    time: 0.8098  last_time: 0.8034  data_time: 0.0173  last_data_time: 0.0153   lr: 0.001  max_mem: 10520M
[32m[06/24 20:24:44 d2.utils.events]: [0m eta: 0:49:33  iter: 14319  total_loss: 1.531  loss_fcos_loc: 0.1763  loss_fcos_ctr: 0.6132  loss_fcos_vfcls: 0.6038  loss_prj: 0.07877  loss_pairwise: 0.02814  loss_mask: 0.03542  loss_mask_affinity: 0.00726    time: 0.8099  last_time: 0.9116  data_time: 0.0169  last_data_time: 0.0169   lr: 0.001  max_mem: 10520M
[32m[06/24 20:25:00 d2.utils.events]: [0m eta: 0:49:20  iter: 14339  total_loss: 1.46  loss_fcos_loc: 0.1614  loss_fcos_ctr: 0.6082  loss_fcos_vfcls: 0.5724  loss_prj: 0.06651  loss_pairwise: 0.02519  loss_mask: 0.03251  loss_mask_affinity: 0.007153    time: 0.8098  last_time: 0.7693  data_time: 0.0165  last_data_time: 0.0166   lr: 0.001  max_mem: 10520M
[32m[06/24 20:25:16 d2.utils.events]: [0m eta: 0:49:05  iter: 14359  total_loss: 1.471  loss_fcos_loc: 0.1691  loss_fcos_ctr: 0.61  loss_fcos_vfcls: 0.5515  loss_prj: 0.06827  loss_pairwise: 0.02337  loss_mask: 0.03217  loss_mask_affinity: 0.006493    time: 0.8099  last_time: 0.9211  data_time: 0.0157  last_data_time: 0.0314   lr: 0.001  max_mem: 10520M
[32m[06/24 20:25:32 d2.utils.events]: [0m eta: 0:48:50  iter: 14379  total_loss: 1.547  loss_fcos_loc: 0.1726  loss_fcos_ctr: 0.6108  loss_fcos_vfcls: 0.5924  loss_prj: 0.07509  loss_pairwise: 0.02627  loss_mask: 0.03648  loss_mask_affinity: 0.007287    time: 0.8098  last_time: 0.8922  data_time: 0.0161  last_data_time: 0.0179   lr: 0.001  max_mem: 10520M
[32m[06/24 20:25:49 d2.utils.events]: [0m eta: 0:48:35  iter: 14399  total_loss: 1.459  loss_fcos_loc: 0.1581  loss_fcos_ctr: 0.6072  loss_fcos_vfcls: 0.5687  loss_prj: 0.06483  loss_pairwise: 0.02706  loss_mask: 0.02962  loss_mask_affinity: 0.006592    time: 0.8099  last_time: 0.8236  data_time: 0.0147  last_data_time: 0.0157   lr: 0.001  max_mem: 10520M
[32m[06/24 20:26:06 d2.utils.events]: [0m eta: 0:48:20  iter: 14419  total_loss: 1.458  loss_fcos_loc: 0.1586  loss_fcos_ctr: 0.6067  loss_fcos_vfcls: 0.5692  loss_prj: 0.06534  loss_pairwise: 0.03002  loss_mask: 0.02987  loss_mask_affinity: 0.006637    time: 0.8099  last_time: 0.8420  data_time: 0.0169  last_data_time: 0.0146   lr: 0.001  max_mem: 10520M
[32m[06/24 20:26:22 d2.utils.events]: [0m eta: 0:48:04  iter: 14439  total_loss: 1.504  loss_fcos_loc: 0.1697  loss_fcos_ctr: 0.6102  loss_fcos_vfcls: 0.5707  loss_prj: 0.07236  loss_pairwise: 0.0283  loss_mask: 0.0332  loss_mask_affinity: 0.007324    time: 0.8099  last_time: 0.7495  data_time: 0.0177  last_data_time: 0.0264   lr: 0.001  max_mem: 10520M
[32m[06/24 20:26:38 d2.utils.events]: [0m eta: 0:47:47  iter: 14459  total_loss: 1.506  loss_fcos_loc: 0.1718  loss_fcos_ctr: 0.6109  loss_fcos_vfcls: 0.5742  loss_prj: 0.07364  loss_pairwise: 0.02612  loss_mask: 0.0337  loss_mask_affinity: 0.006903    time: 0.8099  last_time: 0.7731  data_time: 0.0158  last_data_time: 0.0137   lr: 0.001  max_mem: 10520M
[32m[06/24 20:26:55 d2.utils.events]: [0m eta: 0:47:33  iter: 14479  total_loss: 1.52  loss_fcos_loc: 0.1736  loss_fcos_ctr: 0.6095  loss_fcos_vfcls: 0.5784  loss_prj: 0.07648  loss_pairwise: 0.02746  loss_mask: 0.03647  loss_mask_affinity: 0.006775    time: 0.8100  last_time: 0.8112  data_time: 0.0147  last_data_time: 0.0236   lr: 0.001  max_mem: 10520M
[32m[06/24 20:27:11 d2.utils.events]: [0m eta: 0:47:19  iter: 14499  total_loss: 1.533  loss_fcos_loc: 0.1764  loss_fcos_ctr: 0.6126  loss_fcos_vfcls: 0.5829  loss_prj: 0.07455  loss_pairwise: 0.03043  loss_mask: 0.0354  loss_mask_affinity: 0.006838    time: 0.8100  last_time: 0.8043  data_time: 0.0191  last_data_time: 0.0129   lr: 0.001  max_mem: 10520M
[32m[06/24 20:27:28 d2.utils.events]: [0m eta: 0:47:07  iter: 14519  total_loss: 1.499  loss_fcos_loc: 0.17  loss_fcos_ctr: 0.6111  loss_fcos_vfcls: 0.5693  loss_prj: 0.0681  loss_pairwise: 0.02737  loss_mask: 0.03452  loss_mask_affinity: 0.006951    time: 0.8100  last_time: 0.8498  data_time: 0.0153  last_data_time: 0.0190   lr: 0.001  max_mem: 10520M
[32m[06/24 20:27:44 d2.utils.events]: [0m eta: 0:46:51  iter: 14539  total_loss: 1.509  loss_fcos_loc: 0.1732  loss_fcos_ctr: 0.6111  loss_fcos_vfcls: 0.5702  loss_prj: 0.07387  loss_pairwise: 0.02567  loss_mask: 0.03619  loss_mask_affinity: 0.006688    time: 0.8100  last_time: 0.7908  data_time: 0.0172  last_data_time: 0.0173   lr: 0.001  max_mem: 10520M
[32m[06/24 20:28:01 d2.utils.events]: [0m eta: 0:46:35  iter: 14559  total_loss: 1.491  loss_fcos_loc: 0.1662  loss_fcos_ctr: 0.6099  loss_fcos_vfcls: 0.5854  loss_prj: 0.07231  loss_pairwise: 0.02858  loss_mask: 0.03226  loss_mask_affinity: 0.007135    time: 0.8100  last_time: 0.8734  data_time: 0.0183  last_data_time: 0.0166   lr: 0.001  max_mem: 10520M
[32m[06/24 20:28:17 d2.utils.events]: [0m eta: 0:46:21  iter: 14579  total_loss: 1.475  loss_fcos_loc: 0.1675  loss_fcos_ctr: 0.6104  loss_fcos_vfcls: 0.5749  loss_prj: 0.07421  loss_pairwise: 0.02503  loss_mask: 0.03321  loss_mask_affinity: 0.006873    time: 0.8100  last_time: 0.8733  data_time: 0.0160  last_data_time: 0.0156   lr: 0.001  max_mem: 10520M
[32m[06/24 20:28:33 d2.utils.events]: [0m eta: 0:46:02  iter: 14599  total_loss: 1.509  loss_fcos_loc: 0.1641  loss_fcos_ctr: 0.6087  loss_fcos_vfcls: 0.5827  loss_prj: 0.06764  loss_pairwise: 0.02676  loss_mask: 0.03347  loss_mask_affinity: 0.006845    time: 0.8100  last_time: 0.8867  data_time: 0.0137  last_data_time: 0.0344   lr: 0.001  max_mem: 10520M
[32m[06/24 20:28:50 d2.utils.events]: [0m eta: 0:45:50  iter: 14619  total_loss: 1.498  loss_fcos_loc: 0.1656  loss_fcos_ctr: 0.6092  loss_fcos_vfcls: 0.5749  loss_prj: 0.07177  loss_pairwise: 0.02675  loss_mask: 0.0299  loss_mask_affinity: 0.007039    time: 0.8101  last_time: 0.8935  data_time: 0.0175  last_data_time: 0.0189   lr: 0.001  max_mem: 10520M
[32m[06/24 20:29:06 d2.utils.events]: [0m eta: 0:45:36  iter: 14639  total_loss: 1.495  loss_fcos_loc: 0.1643  loss_fcos_ctr: 0.608  loss_fcos_vfcls: 0.5743  loss_prj: 0.07265  loss_pairwise: 0.02705  loss_mask: 0.03402  loss_mask_affinity: 0.006757    time: 0.8101  last_time: 0.8897  data_time: 0.0153  last_data_time: 0.0142   lr: 0.001  max_mem: 10520M
[32m[06/24 20:29:22 d2.utils.events]: [0m eta: 0:45:19  iter: 14659  total_loss: 1.481  loss_fcos_loc: 0.1586  loss_fcos_ctr: 0.6082  loss_fcos_vfcls: 0.5655  loss_prj: 0.06549  loss_pairwise: 0.02942  loss_mask: 0.03012  loss_mask_affinity: 0.00654    time: 0.8100  last_time: 0.8848  data_time: 0.0165  last_data_time: 0.0208   lr: 0.001  max_mem: 10520M
[32m[06/24 20:29:38 d2.utils.events]: [0m eta: 0:45:05  iter: 14679  total_loss: 1.501  loss_fcos_loc: 0.1638  loss_fcos_ctr: 0.6073  loss_fcos_vfcls: 0.5836  loss_prj: 0.07213  loss_pairwise: 0.02701  loss_mask: 0.03404  loss_mask_affinity: 0.007022    time: 0.8100  last_time: 0.8596  data_time: 0.0160  last_data_time: 0.0190   lr: 0.001  max_mem: 10520M
[32m[06/24 20:29:54 d2.utils.events]: [0m eta: 0:44:46  iter: 14699  total_loss: 1.465  loss_fcos_loc: 0.1564  loss_fcos_ctr: 0.6067  loss_fcos_vfcls: 0.5671  loss_prj: 0.06722  loss_pairwise: 0.02656  loss_mask: 0.03081  loss_mask_affinity: 0.006133    time: 0.8100  last_time: 0.8657  data_time: 0.0169  last_data_time: 0.0230   lr: 0.001  max_mem: 10520M
[32m[06/24 20:30:10 d2.utils.events]: [0m eta: 0:44:29  iter: 14719  total_loss: 1.482  loss_fcos_loc: 0.17  loss_fcos_ctr: 0.6103  loss_fcos_vfcls: 0.5589  loss_prj: 0.07002  loss_pairwise: 0.02769  loss_mask: 0.03079  loss_mask_affinity: 0.007153    time: 0.8100  last_time: 0.7576  data_time: 0.0194  last_data_time: 0.0130   lr: 0.001  max_mem: 10520M
[32m[06/24 20:30:27 d2.utils.events]: [0m eta: 0:44:14  iter: 14739  total_loss: 1.494  loss_fcos_loc: 0.1646  loss_fcos_ctr: 0.604  loss_fcos_vfcls: 0.5768  loss_prj: 0.06648  loss_pairwise: 0.02667  loss_mask: 0.03364  loss_mask_affinity: 0.006724    time: 0.8100  last_time: 0.7867  data_time: 0.0176  last_data_time: 0.0340   lr: 0.001  max_mem: 10520M
[32m[06/24 20:30:43 d2.utils.events]: [0m eta: 0:44:00  iter: 14759  total_loss: 1.459  loss_fcos_loc: 0.1688  loss_fcos_ctr: 0.6101  loss_fcos_vfcls: 0.5614  loss_prj: 0.06799  loss_pairwise: 0.02515  loss_mask: 0.03263  loss_mask_affinity: 0.007424    time: 0.8100  last_time: 0.8029  data_time: 0.0175  last_data_time: 0.0115   lr: 0.001  max_mem: 10520M
[32m[06/24 20:30:59 d2.utils.events]: [0m eta: 0:43:45  iter: 14779  total_loss: 1.483  loss_fcos_loc: 0.1626  loss_fcos_ctr: 0.6082  loss_fcos_vfcls: 0.5852  loss_prj: 0.0652  loss_pairwise: 0.02569  loss_mask: 0.03045  loss_mask_affinity: 0.006397    time: 0.8100  last_time: 0.7702  data_time: 0.0169  last_data_time: 0.0166   lr: 0.001  max_mem: 10520M
[32m[06/24 20:31:15 d2.utils.events]: [0m eta: 0:43:29  iter: 14799  total_loss: 1.476  loss_fcos_loc: 0.1553  loss_fcos_ctr: 0.6088  loss_fcos_vfcls: 0.5792  loss_prj: 0.06305  loss_pairwise: 0.02393  loss_mask: 0.02834  loss_mask_affinity: 0.00696    time: 0.8100  last_time: 0.7934  data_time: 0.0172  last_data_time: 0.0094   lr: 0.001  max_mem: 10520M
[32m[06/24 20:31:33 d2.utils.events]: [0m eta: 0:43:14  iter: 14819  total_loss: 1.502  loss_fcos_loc: 0.1702  loss_fcos_ctr: 0.6087  loss_fcos_vfcls: 0.5786  loss_prj: 0.0742  loss_pairwise: 0.02476  loss_mask: 0.03312  loss_mask_affinity: 0.007077    time: 0.8101  last_time: 0.8907  data_time: 0.0173  last_data_time: 0.0125   lr: 0.001  max_mem: 10520M
[32m[06/24 20:31:49 d2.utils.events]: [0m eta: 0:43:01  iter: 14839  total_loss: 1.503  loss_fcos_loc: 0.1732  loss_fcos_ctr: 0.6151  loss_fcos_vfcls: 0.5764  loss_prj: 0.07276  loss_pairwise: 0.02714  loss_mask: 0.03527  loss_mask_affinity: 0.006973    time: 0.8101  last_time: 0.8341  data_time: 0.0157  last_data_time: 0.0146   lr: 0.001  max_mem: 10520M
[32m[06/24 20:32:05 d2.utils.events]: [0m eta: 0:42:43  iter: 14859  total_loss: 1.497  loss_fcos_loc: 0.1649  loss_fcos_ctr: 0.61  loss_fcos_vfcls: 0.5695  loss_prj: 0.07136  loss_pairwise: 0.02665  loss_mask: 0.03039  loss_mask_affinity: 0.007022    time: 0.8101  last_time: 0.7974  data_time: 0.0174  last_data_time: 0.0157   lr: 0.001  max_mem: 10520M
[32m[06/24 20:32:21 d2.utils.events]: [0m eta: 0:42:25  iter: 14879  total_loss: 1.466  loss_fcos_loc: 0.1658  loss_fcos_ctr: 0.6079  loss_fcos_vfcls: 0.5609  loss_prj: 0.07335  loss_pairwise: 0.0292  loss_mask: 0.03491  loss_mask_affinity: 0.007278    time: 0.8101  last_time: 0.8324  data_time: 0.0158  last_data_time: 0.0135   lr: 0.001  max_mem: 10520M
[32m[06/24 20:32:37 d2.utils.events]: [0m eta: 0:42:08  iter: 14899  total_loss: 1.482  loss_fcos_loc: 0.1643  loss_fcos_ctr: 0.6087  loss_fcos_vfcls: 0.569  loss_prj: 0.07354  loss_pairwise: 0.0265  loss_mask: 0.03381  loss_mask_affinity: 0.006752    time: 0.8101  last_time: 0.7106  data_time: 0.0158  last_data_time: 0.0217   lr: 0.001  max_mem: 10520M
[32m[06/24 20:32:54 d2.utils.events]: [0m eta: 0:41:52  iter: 14919  total_loss: 1.499  loss_fcos_loc: 0.1654  loss_fcos_ctr: 0.6085  loss_fcos_vfcls: 0.5652  loss_prj: 0.07446  loss_pairwise: 0.02613  loss_mask: 0.03277  loss_mask_affinity: 0.007294    time: 0.8101  last_time: 0.9200  data_time: 0.0154  last_data_time: 0.0254   lr: 0.001  max_mem: 10520M
[32m[06/24 20:33:10 d2.utils.events]: [0m eta: 0:41:34  iter: 14939  total_loss: 1.505  loss_fcos_loc: 0.1649  loss_fcos_ctr: 0.6092  loss_fcos_vfcls: 0.5862  loss_prj: 0.07158  loss_pairwise: 0.02629  loss_mask: 0.03356  loss_mask_affinity: 0.007057    time: 0.8101  last_time: 0.8866  data_time: 0.0172  last_data_time: 0.0156   lr: 0.001  max_mem: 10520M
[32m[06/24 20:33:27 d2.utils.events]: [0m eta: 0:41:19  iter: 14959  total_loss: 1.533  loss_fcos_loc: 0.1714  loss_fcos_ctr: 0.6108  loss_fcos_vfcls: 0.5909  loss_prj: 0.0741  loss_pairwise: 0.02948  loss_mask: 0.03086  loss_mask_affinity: 0.007218    time: 0.8101  last_time: 0.8215  data_time: 0.0169  last_data_time: 0.0197   lr: 0.001  max_mem: 10520M
[32m[06/24 20:33:43 d2.utils.events]: [0m eta: 0:41:02  iter: 14979  total_loss: 1.481  loss_fcos_loc: 0.1701  loss_fcos_ctr: 0.6118  loss_fcos_vfcls: 0.5653  loss_prj: 0.07232  loss_pairwise: 0.02403  loss_mask: 0.03156  loss_mask_affinity: 0.007382    time: 0.8101  last_time: 0.7767  data_time: 0.0168  last_data_time: 0.0327   lr: 0.001  max_mem: 10520M
[32m[06/24 20:34:00 fvcore.common.checkpoint]: [0mSaving checkpoint to /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_1x/model_0014999.pth
[32m[06/24 20:34:00 d2.utils.events]: [0m eta: 0:40:46  iter: 14999  total_loss: 1.499  loss_fcos_loc: 0.1736  loss_fcos_ctr: 0.6088  loss_fcos_vfcls: 0.5676  loss_prj: 0.07036  loss_pairwise: 0.02895  loss_mask: 0.03327  loss_mask_affinity: 0.007311    time: 0.8101  last_time: 0.7971  data_time: 0.0178  last_data_time: 0.0156   lr: 0.001  max_mem: 10520M
[32m[06/24 20:34:17 d2.utils.events]: [0m eta: 0:40:30  iter: 15019  total_loss: 1.546  loss_fcos_loc: 0.1852  loss_fcos_ctr: 0.6102  loss_fcos_vfcls: 0.6017  loss_prj: 0.07818  loss_pairwise: 0.02857  loss_mask: 0.03825  loss_mask_affinity: 0.00718    time: 0.8102  last_time: 0.8538  data_time: 0.0179  last_data_time: 0.0079   lr: 0.001  max_mem: 10520M
[32m[06/24 20:34:33 d2.utils.events]: [0m eta: 0:40:13  iter: 15039  total_loss: 1.497  loss_fcos_loc: 0.1737  loss_fcos_ctr: 0.6104  loss_fcos_vfcls: 0.5781  loss_prj: 0.07197  loss_pairwise: 0.02538  loss_mask: 0.03455  loss_mask_affinity: 0.006958    time: 0.8102  last_time: 0.7522  data_time: 0.0169  last_data_time: 0.0126   lr: 0.001  max_mem: 10520M
[32m[06/24 20:34:49 d2.utils.events]: [0m eta: 0:39:53  iter: 15059  total_loss: 1.462  loss_fcos_loc: 0.1579  loss_fcos_ctr: 0.6086  loss_fcos_vfcls: 0.5647  loss_prj: 0.06434  loss_pairwise: 0.02799  loss_mask: 0.03144  loss_mask_affinity: 0.006586    time: 0.8101  last_time: 0.7748  data_time: 0.0172  last_data_time: 0.0173   lr: 0.001  max_mem: 10520M
[32m[06/24 20:35:05 d2.utils.events]: [0m eta: 0:39:36  iter: 15079  total_loss: 1.504  loss_fcos_loc: 0.1677  loss_fcos_ctr: 0.6082  loss_fcos_vfcls: 0.5698  loss_prj: 0.06976  loss_pairwise: 0.02717  loss_mask: 0.03339  loss_mask_affinity: 0.006922    time: 0.8101  last_time: 0.8050  data_time: 0.0154  last_data_time: 0.0172   lr: 0.001  max_mem: 10520M
[32m[06/24 20:35:21 d2.utils.events]: [0m eta: 0:39:19  iter: 15099  total_loss: 1.495  loss_fcos_loc: 0.1726  loss_fcos_ctr: 0.6102  loss_fcos_vfcls: 0.5728  loss_prj: 0.07148  loss_pairwise: 0.02956  loss_mask: 0.03689  loss_mask_affinity: 0.00701    time: 0.8101  last_time: 0.8063  data_time: 0.0168  last_data_time: 0.0297   lr: 0.001  max_mem: 10520M
[32m[06/24 20:35:37 d2.utils.events]: [0m eta: 0:39:02  iter: 15119  total_loss: 1.471  loss_fcos_loc: 0.161  loss_fcos_ctr: 0.6078  loss_fcos_vfcls: 0.5724  loss_prj: 0.06872  loss_pairwise: 0.02711  loss_mask: 0.03399  loss_mask_affinity: 0.006691    time: 0.8101  last_time: 0.8167  data_time: 0.0187  last_data_time: 0.0193   lr: 0.001  max_mem: 10520M
[32m[06/24 20:35:54 d2.utils.events]: [0m eta: 0:38:47  iter: 15139  total_loss: 1.521  loss_fcos_loc: 0.1726  loss_fcos_ctr: 0.6091  loss_fcos_vfcls: 0.5857  loss_prj: 0.07265  loss_pairwise: 0.02706  loss_mask: 0.03544  loss_mask_affinity: 0.00737    time: 0.8102  last_time: 0.8501  data_time: 0.0147  last_data_time: 0.0136   lr: 0.001  max_mem: 10520M
[32m[06/24 20:36:11 d2.utils.events]: [0m eta: 0:38:31  iter: 15159  total_loss: 1.5  loss_fcos_loc: 0.1759  loss_fcos_ctr: 0.6091  loss_fcos_vfcls: 0.5674  loss_prj: 0.0673  loss_pairwise: 0.02573  loss_mask: 0.03351  loss_mask_affinity: 0.006051    time: 0.8102  last_time: 0.7167  data_time: 0.0161  last_data_time: 0.0194   lr: 0.001  max_mem: 10520M
[32m[06/24 20:36:27 d2.utils.events]: [0m eta: 0:38:15  iter: 15179  total_loss: 1.495  loss_fcos_loc: 0.1635  loss_fcos_ctr: 0.6106  loss_fcos_vfcls: 0.5792  loss_prj: 0.0688  loss_pairwise: 0.0252  loss_mask: 0.03183  loss_mask_affinity: 0.006764    time: 0.8102  last_time: 0.7537  data_time: 0.0155  last_data_time: 0.0259   lr: 0.001  max_mem: 10520M
[32m[06/24 20:36:43 d2.utils.events]: [0m eta: 0:37:58  iter: 15199  total_loss: 1.512  loss_fcos_loc: 0.1704  loss_fcos_ctr: 0.6082  loss_fcos_vfcls: 0.5931  loss_prj: 0.07749  loss_pairwise: 0.02793  loss_mask: 0.0367  loss_mask_affinity: 0.007122    time: 0.8102  last_time: 0.8626  data_time: 0.0142  last_data_time: 0.0170   lr: 0.001  max_mem: 10520M
[32m[06/24 20:37:01 d2.utils.events]: [0m eta: 0:37:43  iter: 15219  total_loss: 1.534  loss_fcos_loc: 0.1799  loss_fcos_ctr: 0.6111  loss_fcos_vfcls: 0.585  loss_prj: 0.07775  loss_pairwise: 0.02991  loss_mask: 0.03662  loss_mask_affinity: 0.00741    time: 0.8102  last_time: 0.9079  data_time: 0.0150  last_data_time: 0.0146   lr: 0.001  max_mem: 10520M
[32m[06/24 20:37:17 d2.utils.events]: [0m eta: 0:37:31  iter: 15239  total_loss: 1.472  loss_fcos_loc: 0.1704  loss_fcos_ctr: 0.6121  loss_fcos_vfcls: 0.554  loss_prj: 0.07392  loss_pairwise: 0.02807  loss_mask: 0.03272  loss_mask_affinity: 0.007859    time: 0.8103  last_time: 0.8515  data_time: 0.0144  last_data_time: 0.0127   lr: 0.001  max_mem: 10520M
[32m[06/24 20:37:33 d2.utils.events]: [0m eta: 0:37:14  iter: 15259  total_loss: 1.502  loss_fcos_loc: 0.1737  loss_fcos_ctr: 0.6101  loss_fcos_vfcls: 0.5654  loss_prj: 0.076  loss_pairwise: 0.02754  loss_mask: 0.03553  loss_mask_affinity: 0.007071    time: 0.8102  last_time: 0.7289  data_time: 0.0179  last_data_time: 0.0173   lr: 0.001  max_mem: 10520M
[32m[06/24 20:37:49 d2.utils.events]: [0m eta: 0:36:53  iter: 15279  total_loss: 1.48  loss_fcos_loc: 0.1639  loss_fcos_ctr: 0.607  loss_fcos_vfcls: 0.569  loss_prj: 0.07154  loss_pairwise: 0.02471  loss_mask: 0.03257  loss_mask_affinity: 0.006821    time: 0.8102  last_time: 0.8105  data_time: 0.0150  last_data_time: 0.0107   lr: 0.001  max_mem: 10520M
[32m[06/24 20:38:05 d2.utils.events]: [0m eta: 0:36:36  iter: 15299  total_loss: 1.485  loss_fcos_loc: 0.1627  loss_fcos_ctr: 0.6104  loss_fcos_vfcls: 0.568  loss_prj: 0.06749  loss_pairwise: 0.03006  loss_mask: 0.03305  loss_mask_affinity: 0.007031    time: 0.8102  last_time: 0.8921  data_time: 0.0163  last_data_time: 0.0177   lr: 0.001  max_mem: 10520M
[32m[06/24 20:38:21 d2.utils.events]: [0m eta: 0:36:20  iter: 15319  total_loss: 1.527  loss_fcos_loc: 0.1846  loss_fcos_ctr: 0.6101  loss_fcos_vfcls: 0.5805  loss_prj: 0.07617  loss_pairwise: 0.02879  loss_mask: 0.03106  loss_mask_affinity: 0.007745    time: 0.8102  last_time: 0.8047  data_time: 0.0163  last_data_time: 0.0181   lr: 0.001  max_mem: 10520M
[32m[06/24 20:38:38 d2.utils.events]: [0m eta: 0:36:04  iter: 15339  total_loss: 1.516  loss_fcos_loc: 0.1675  loss_fcos_ctr: 0.6124  loss_fcos_vfcls: 0.5799  loss_prj: 0.06707  loss_pairwise: 0.02387  loss_mask: 0.03385  loss_mask_affinity: 0.006831    time: 0.8102  last_time: 0.7229  data_time: 0.0190  last_data_time: 0.0199   lr: 0.001  max_mem: 10520M
[32m[06/24 20:38:54 d2.utils.events]: [0m eta: 0:35:48  iter: 15359  total_loss: 1.489  loss_fcos_loc: 0.1658  loss_fcos_ctr: 0.6093  loss_fcos_vfcls: 0.5653  loss_prj: 0.06987  loss_pairwise: 0.02554  loss_mask: 0.03162  loss_mask_affinity: 0.006885    time: 0.8102  last_time: 0.8322  data_time: 0.0165  last_data_time: 0.0102   lr: 0.001  max_mem: 10520M
[32m[06/24 20:39:10 d2.utils.events]: [0m eta: 0:35:31  iter: 15379  total_loss: 1.464  loss_fcos_loc: 0.1643  loss_fcos_ctr: 0.6098  loss_fcos_vfcls: 0.5606  loss_prj: 0.06799  loss_pairwise: 0.0292  loss_mask: 0.031  loss_mask_affinity: 0.007616    time: 0.8102  last_time: 0.8549  data_time: 0.0178  last_data_time: 0.0159   lr: 0.001  max_mem: 10520M
[32m[06/24 20:39:26 d2.utils.events]: [0m eta: 0:35:12  iter: 15399  total_loss: 1.457  loss_fcos_loc: 0.1563  loss_fcos_ctr: 0.606  loss_fcos_vfcls: 0.5701  loss_prj: 0.06577  loss_pairwise: 0.02556  loss_mask: 0.03179  loss_mask_affinity: 0.006653    time: 0.8102  last_time: 0.7653  data_time: 0.0174  last_data_time: 0.0107   lr: 0.001  max_mem: 10520M
[32m[06/24 20:39:42 d2.utils.events]: [0m eta: 0:34:54  iter: 15419  total_loss: 1.483  loss_fcos_loc: 0.1617  loss_fcos_ctr: 0.6081  loss_fcos_vfcls: 0.5671  loss_prj: 0.06589  loss_pairwise: 0.02724  loss_mask: 0.03104  loss_mask_affinity: 0.006697    time: 0.8102  last_time: 0.7583  data_time: 0.0146  last_data_time: 0.0100   lr: 0.001  max_mem: 10520M
[32m[06/24 20:39:59 d2.utils.events]: [0m eta: 0:34:39  iter: 15439  total_loss: 1.495  loss_fcos_loc: 0.1685  loss_fcos_ctr: 0.6071  loss_fcos_vfcls: 0.5822  loss_prj: 0.07392  loss_pairwise: 0.02747  loss_mask: 0.03223  loss_mask_affinity: 0.007256    time: 0.8102  last_time: 0.7808  data_time: 0.0188  last_data_time: 0.0217   lr: 0.001  max_mem: 10520M
[32m[06/24 20:40:15 d2.utils.events]: [0m eta: 0:34:23  iter: 15459  total_loss: 1.495  loss_fcos_loc: 0.1701  loss_fcos_ctr: 0.6063  loss_fcos_vfcls: 0.5715  loss_prj: 0.07205  loss_pairwise: 0.02846  loss_mask: 0.03255  loss_mask_affinity: 0.007148    time: 0.8102  last_time: 0.8747  data_time: 0.0155  last_data_time: 0.0171   lr: 0.001  max_mem: 10520M
[32m[06/24 20:40:31 d2.utils.events]: [0m eta: 0:34:04  iter: 15479  total_loss: 1.482  loss_fcos_loc: 0.1577  loss_fcos_ctr: 0.6078  loss_fcos_vfcls: 0.5706  loss_prj: 0.07029  loss_pairwise: 0.02499  loss_mask: 0.03129  loss_mask_affinity: 0.006973    time: 0.8102  last_time: 0.7577  data_time: 0.0160  last_data_time: 0.0086   lr: 0.001  max_mem: 10520M
[32m[06/24 20:40:47 d2.utils.events]: [0m eta: 0:33:48  iter: 15499  total_loss: 1.464  loss_fcos_loc: 0.17  loss_fcos_ctr: 0.6093  loss_fcos_vfcls: 0.563  loss_prj: 0.06838  loss_pairwise: 0.02344  loss_mask: 0.03013  loss_mask_affinity: 0.006663    time: 0.8102  last_time: 0.8663  data_time: 0.0167  last_data_time: 0.0084   lr: 0.001  max_mem: 10520M
[32m[06/24 20:41:04 d2.utils.events]: [0m eta: 0:33:29  iter: 15519  total_loss: 1.508  loss_fcos_loc: 0.171  loss_fcos_ctr: 0.612  loss_fcos_vfcls: 0.5741  loss_prj: 0.07326  loss_pairwise: 0.0285  loss_mask: 0.03179  loss_mask_affinity: 0.007458    time: 0.8102  last_time: 0.8280  data_time: 0.0191  last_data_time: 0.0261   lr: 0.001  max_mem: 10520M
[32m[06/24 20:41:21 d2.utils.events]: [0m eta: 0:33:14  iter: 15539  total_loss: 1.48  loss_fcos_loc: 0.1655  loss_fcos_ctr: 0.6075  loss_fcos_vfcls: 0.5765  loss_prj: 0.07107  loss_pairwise: 0.02787  loss_mask: 0.03627  loss_mask_affinity: 0.006541    time: 0.8102  last_time: 0.8445  data_time: 0.0179  last_data_time: 0.0142   lr: 0.001  max_mem: 10520M
[32m[06/24 20:41:37 d2.utils.events]: [0m eta: 0:32:57  iter: 15559  total_loss: 1.479  loss_fcos_loc: 0.1754  loss_fcos_ctr: 0.6101  loss_fcos_vfcls: 0.5615  loss_prj: 0.07536  loss_pairwise: 0.02478  loss_mask: 0.03036  loss_mask_affinity: 0.006891    time: 0.8102  last_time: 0.7505  data_time: 0.0167  last_data_time: 0.0182   lr: 0.001  max_mem: 10520M
[32m[06/24 20:41:53 d2.utils.events]: [0m eta: 0:32:41  iter: 15579  total_loss: 1.479  loss_fcos_loc: 0.1706  loss_fcos_ctr: 0.6079  loss_fcos_vfcls: 0.5589  loss_prj: 0.06943  loss_pairwise: 0.02842  loss_mask: 0.03235  loss_mask_affinity: 0.00722    time: 0.8103  last_time: 0.8936  data_time: 0.0164  last_data_time: 0.0137   lr: 0.001  max_mem: 10520M
[32m[06/24 20:42:10 d2.utils.events]: [0m eta: 0:32:26  iter: 15599  total_loss: 1.448  loss_fcos_loc: 0.1575  loss_fcos_ctr: 0.6069  loss_fcos_vfcls: 0.5406  loss_prj: 0.06312  loss_pairwise: 0.02438  loss_mask: 0.03119  loss_mask_affinity: 0.006893    time: 0.8103  last_time: 0.6773  data_time: 0.0159  last_data_time: 0.0180   lr: 0.001  max_mem: 10520M
[32m[06/24 20:42:26 d2.utils.events]: [0m eta: 0:32:06  iter: 15619  total_loss: 1.514  loss_fcos_loc: 0.1672  loss_fcos_ctr: 0.6073  loss_fcos_vfcls: 0.583  loss_prj: 0.07335  loss_pairwise: 0.02577  loss_mask: 0.03359  loss_mask_affinity: 0.006951    time: 0.8102  last_time: 0.8573  data_time: 0.0145  last_data_time: 0.0131   lr: 0.001  max_mem: 10520M
[32m[06/24 20:42:42 d2.utils.events]: [0m eta: 0:31:52  iter: 15639  total_loss: 1.476  loss_fcos_loc: 0.163  loss_fcos_ctr: 0.6096  loss_fcos_vfcls: 0.5651  loss_prj: 0.06762  loss_pairwise: 0.02805  loss_mask: 0.03167  loss_mask_affinity: 0.006997    time: 0.8102  last_time: 0.8585  data_time: 0.0186  last_data_time: 0.0129   lr: 0.001  max_mem: 10520M
[32m[06/24 20:42:58 d2.utils.events]: [0m eta: 0:31:35  iter: 15659  total_loss: 1.501  loss_fcos_loc: 0.1688  loss_fcos_ctr: 0.6108  loss_fcos_vfcls: 0.5731  loss_prj: 0.07245  loss_pairwise: 0.02637  loss_mask: 0.03242  loss_mask_affinity: 0.007325    time: 0.8102  last_time: 0.8071  data_time: 0.0174  last_data_time: 0.0111   lr: 0.001  max_mem: 10520M
[32m[06/24 20:43:14 d2.utils.events]: [0m eta: 0:31:20  iter: 15679  total_loss: 1.477  loss_fcos_loc: 0.1611  loss_fcos_ctr: 0.6084  loss_fcos_vfcls: 0.5662  loss_prj: 0.06796  loss_pairwise: 0.02637  loss_mask: 0.0313  loss_mask_affinity: 0.006754    time: 0.8103  last_time: 0.7833  data_time: 0.0189  last_data_time: 0.0127   lr: 0.001  max_mem: 10520M
[32m[06/24 20:43:30 d2.utils.events]: [0m eta: 0:31:03  iter: 15699  total_loss: 1.475  loss_fcos_loc: 0.1584  loss_fcos_ctr: 0.6075  loss_fcos_vfcls: 0.5552  loss_prj: 0.06669  loss_pairwise: 0.0276  loss_mask: 0.03048  loss_mask_affinity: 0.006456    time: 0.8102  last_time: 0.8152  data_time: 0.0182  last_data_time: 0.0143   lr: 0.001  max_mem: 10520M
[32m[06/24 20:43:47 d2.utils.events]: [0m eta: 0:30:47  iter: 15719  total_loss: 1.484  loss_fcos_loc: 0.1682  loss_fcos_ctr: 0.6105  loss_fcos_vfcls: 0.5685  loss_prj: 0.06738  loss_pairwise: 0.02499  loss_mask: 0.03213  loss_mask_affinity: 0.006764    time: 0.8103  last_time: 0.8425  data_time: 0.0171  last_data_time: 0.0157   lr: 0.001  max_mem: 10520M
[32m[06/24 20:44:04 d2.utils.events]: [0m eta: 0:30:32  iter: 15739  total_loss: 1.475  loss_fcos_loc: 0.162  loss_fcos_ctr: 0.6097  loss_fcos_vfcls: 0.5753  loss_prj: 0.06973  loss_pairwise: 0.02846  loss_mask: 0.03218  loss_mask_affinity: 0.007429    time: 0.8103  last_time: 0.8254  data_time: 0.0165  last_data_time: 0.0162   lr: 0.001  max_mem: 10520M
[32m[06/24 20:44:20 d2.utils.events]: [0m eta: 0:30:16  iter: 15759  total_loss: 1.451  loss_fcos_loc: 0.1658  loss_fcos_ctr: 0.6094  loss_fcos_vfcls: 0.5708  loss_prj: 0.06769  loss_pairwise: 0.02779  loss_mask: 0.03005  loss_mask_affinity: 0.007021    time: 0.8103  last_time: 0.7556  data_time: 0.0180  last_data_time: 0.0119   lr: 0.001  max_mem: 10952M
[32m[06/24 20:44:37 d2.utils.events]: [0m eta: 0:29:59  iter: 15779  total_loss: 1.471  loss_fcos_loc: 0.1687  loss_fcos_ctr: 0.6092  loss_fcos_vfcls: 0.5549  loss_prj: 0.07286  loss_pairwise: 0.02683  loss_mask: 0.03506  loss_mask_affinity: 0.00724    time: 0.8103  last_time: 0.8041  data_time: 0.0160  last_data_time: 0.0164   lr: 0.001  max_mem: 10952M
[32m[06/24 20:44:53 d2.utils.events]: [0m eta: 0:29:43  iter: 15799  total_loss: 1.46  loss_fcos_loc: 0.1671  loss_fcos_ctr: 0.6089  loss_fcos_vfcls: 0.5629  loss_prj: 0.07288  loss_pairwise: 0.02581  loss_mask: 0.03331  loss_mask_affinity: 0.006996    time: 0.8104  last_time: 0.8100  data_time: 0.0135  last_data_time: 0.0294   lr: 0.001  max_mem: 10952M
[32m[06/24 20:45:10 d2.utils.events]: [0m eta: 0:29:26  iter: 15819  total_loss: 1.483  loss_fcos_loc: 0.1627  loss_fcos_ctr: 0.6111  loss_fcos_vfcls: 0.5668  loss_prj: 0.07412  loss_pairwise: 0.02854  loss_mask: 0.03302  loss_mask_affinity: 0.007156    time: 0.8104  last_time: 0.7618  data_time: 0.0166  last_data_time: 0.0125   lr: 0.001  max_mem: 10952M
[32m[06/24 20:45:26 d2.utils.events]: [0m eta: 0:29:08  iter: 15839  total_loss: 1.458  loss_fcos_loc: 0.1589  loss_fcos_ctr: 0.6062  loss_fcos_vfcls: 0.5626  loss_prj: 0.06544  loss_pairwise: 0.02508  loss_mask: 0.03007  loss_mask_affinity: 0.006869    time: 0.8104  last_time: 0.7906  data_time: 0.0147  last_data_time: 0.0158   lr: 0.001  max_mem: 10952M
[32m[06/24 20:45:42 d2.utils.events]: [0m eta: 0:28:54  iter: 15859  total_loss: 1.474  loss_fcos_loc: 0.1587  loss_fcos_ctr: 0.6089  loss_fcos_vfcls: 0.5613  loss_prj: 0.07047  loss_pairwise: 0.02526  loss_mask: 0.03241  loss_mask_affinity: 0.007038    time: 0.8104  last_time: 0.7190  data_time: 0.0174  last_data_time: 0.0118   lr: 0.001  max_mem: 10952M
[32m[06/24 20:45:59 d2.utils.events]: [0m eta: 0:28:38  iter: 15879  total_loss: 1.481  loss_fcos_loc: 0.1653  loss_fcos_ctr: 0.6097  loss_fcos_vfcls: 0.5664  loss_prj: 0.07119  loss_pairwise: 0.02674  loss_mask: 0.03195  loss_mask_affinity: 0.007247    time: 0.8104  last_time: 0.8337  data_time: 0.0162  last_data_time: 0.0103   lr: 0.001  max_mem: 10952M
[32m[06/24 20:46:15 d2.utils.events]: [0m eta: 0:28:22  iter: 15899  total_loss: 1.496  loss_fcos_loc: 0.1755  loss_fcos_ctr: 0.6117  loss_fcos_vfcls: 0.5588  loss_prj: 0.07414  loss_pairwise: 0.02536  loss_mask: 0.03395  loss_mask_affinity: 0.006632    time: 0.8104  last_time: 0.7518  data_time: 0.0175  last_data_time: 0.0102   lr: 0.001  max_mem: 10952M
[32m[06/24 20:46:31 d2.utils.events]: [0m eta: 0:28:06  iter: 15919  total_loss: 1.501  loss_fcos_loc: 0.1698  loss_fcos_ctr: 0.6062  loss_fcos_vfcls: 0.5858  loss_prj: 0.07222  loss_pairwise: 0.02651  loss_mask: 0.03394  loss_mask_affinity: 0.006798    time: 0.8104  last_time: 0.7714  data_time: 0.0156  last_data_time: 0.0165   lr: 0.001  max_mem: 10952M
[32m[06/24 20:46:48 d2.utils.events]: [0m eta: 0:27:49  iter: 15939  total_loss: 1.481  loss_fcos_loc: 0.1609  loss_fcos_ctr: 0.61  loss_fcos_vfcls: 0.5767  loss_prj: 0.07007  loss_pairwise: 0.02521  loss_mask: 0.03068  loss_mask_affinity: 0.00725    time: 0.8104  last_time: 0.8360  data_time: 0.0163  last_data_time: 0.0146   lr: 0.001  max_mem: 10952M
[32m[06/24 20:47:05 d2.utils.events]: [0m eta: 0:27:33  iter: 15959  total_loss: 1.477  loss_fcos_loc: 0.1662  loss_fcos_ctr: 0.608  loss_fcos_vfcls: 0.5699  loss_prj: 0.06921  loss_pairwise: 0.0257  loss_mask: 0.02918  loss_mask_affinity: 0.006648    time: 0.8104  last_time: 0.7941  data_time: 0.0171  last_data_time: 0.0169   lr: 0.001  max_mem: 10952M
[32m[06/24 20:47:21 d2.utils.events]: [0m eta: 0:27:17  iter: 15979  total_loss: 1.461  loss_fcos_loc: 0.1606  loss_fcos_ctr: 0.6088  loss_fcos_vfcls: 0.559  loss_prj: 0.06695  loss_pairwise: 0.02754  loss_mask: 0.03146  loss_mask_affinity: 0.006819    time: 0.8104  last_time: 0.8304  data_time: 0.0163  last_data_time: 0.0165   lr: 0.001  max_mem: 10952M
[32m[06/24 20:47:37 d2.utils.events]: [0m eta: 0:26:59  iter: 15999  total_loss: 1.507  loss_fcos_loc: 0.1743  loss_fcos_ctr: 0.6097  loss_fcos_vfcls: 0.5699  loss_prj: 0.07244  loss_pairwise: 0.02855  loss_mask: 0.0367  loss_mask_affinity: 0.007047    time: 0.8104  last_time: 0.8007  data_time: 0.0157  last_data_time: 0.0135   lr: 0.001  max_mem: 10952M
[32m[06/24 20:47:54 d2.utils.events]: [0m eta: 0:26:42  iter: 16019  total_loss: 1.485  loss_fcos_loc: 0.1657  loss_fcos_ctr: 0.6067  loss_fcos_vfcls: 0.5655  loss_prj: 0.07054  loss_pairwise: 0.03091  loss_mask: 0.0326  loss_mask_affinity: 0.007062    time: 0.8104  last_time: 0.8087  data_time: 0.0159  last_data_time: 0.0123   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:48:10 d2.utils.events]: [0m eta: 0:26:26  iter: 16039  total_loss: 1.45  loss_fcos_loc: 0.1509  loss_fcos_ctr: 0.6082  loss_fcos_vfcls: 0.5535  loss_prj: 0.06547  loss_pairwise: 0.02569  loss_mask: 0.02883  loss_mask_affinity: 0.006808    time: 0.8104  last_time: 0.7825  data_time: 0.0170  last_data_time: 0.0152   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:48:26 d2.utils.events]: [0m eta: 0:26:11  iter: 16059  total_loss: 1.493  loss_fcos_loc: 0.1749  loss_fcos_ctr: 0.6096  loss_fcos_vfcls: 0.5694  loss_prj: 0.07436  loss_pairwise: 0.02722  loss_mask: 0.03242  loss_mask_affinity: 0.00731    time: 0.8104  last_time: 0.8122  data_time: 0.0145  last_data_time: 0.0131   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:48:42 d2.utils.events]: [0m eta: 0:25:55  iter: 16079  total_loss: 1.495  loss_fcos_loc: 0.1711  loss_fcos_ctr: 0.611  loss_fcos_vfcls: 0.5569  loss_prj: 0.07247  loss_pairwise: 0.0272  loss_mask: 0.03171  loss_mask_affinity: 0.007463    time: 0.8104  last_time: 0.7500  data_time: 0.0157  last_data_time: 0.0155   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:48:58 d2.utils.events]: [0m eta: 0:25:40  iter: 16099  total_loss: 1.463  loss_fcos_loc: 0.1689  loss_fcos_ctr: 0.6093  loss_fcos_vfcls: 0.5584  loss_prj: 0.06979  loss_pairwise: 0.02607  loss_mask: 0.03156  loss_mask_affinity: 0.007409    time: 0.8104  last_time: 0.8535  data_time: 0.0149  last_data_time: 0.0142   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:49:15 d2.utils.events]: [0m eta: 0:25:24  iter: 16119  total_loss: 1.481  loss_fcos_loc: 0.1693  loss_fcos_ctr: 0.6093  loss_fcos_vfcls: 0.5651  loss_prj: 0.07149  loss_pairwise: 0.02678  loss_mask: 0.0324  loss_mask_affinity: 0.00728    time: 0.8104  last_time: 0.8859  data_time: 0.0147  last_data_time: 0.0097   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:49:31 d2.utils.events]: [0m eta: 0:25:07  iter: 16139  total_loss: 1.488  loss_fcos_loc: 0.1755  loss_fcos_ctr: 0.6135  loss_fcos_vfcls: 0.5657  loss_prj: 0.07406  loss_pairwise: 0.02814  loss_mask: 0.03118  loss_mask_affinity: 0.006707    time: 0.8105  last_time: 0.8942  data_time: 0.0148  last_data_time: 0.0149   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:49:48 d2.utils.events]: [0m eta: 0:24:51  iter: 16159  total_loss: 1.513  loss_fcos_loc: 0.1726  loss_fcos_ctr: 0.6094  loss_fcos_vfcls: 0.5733  loss_prj: 0.07075  loss_pairwise: 0.0287  loss_mask: 0.03391  loss_mask_affinity: 0.007094    time: 0.8105  last_time: 0.9018  data_time: 0.0164  last_data_time: 0.0113   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:50:04 d2.utils.events]: [0m eta: 0:24:35  iter: 16179  total_loss: 1.49  loss_fcos_loc: 0.1688  loss_fcos_ctr: 0.6095  loss_fcos_vfcls: 0.5795  loss_prj: 0.06488  loss_pairwise: 0.02488  loss_mask: 0.0311  loss_mask_affinity: 0.006634    time: 0.8105  last_time: 0.7339  data_time: 0.0176  last_data_time: 0.0107   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:50:20 d2.utils.events]: [0m eta: 0:24:19  iter: 16199  total_loss: 1.482  loss_fcos_loc: 0.1667  loss_fcos_ctr: 0.6096  loss_fcos_vfcls: 0.5597  loss_prj: 0.07236  loss_pairwise: 0.02554  loss_mask: 0.03364  loss_mask_affinity: 0.006913    time: 0.8105  last_time: 0.7465  data_time: 0.0160  last_data_time: 0.0125   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:50:37 d2.utils.events]: [0m eta: 0:24:02  iter: 16219  total_loss: 1.507  loss_fcos_loc: 0.1774  loss_fcos_ctr: 0.609  loss_fcos_vfcls: 0.5763  loss_prj: 0.07177  loss_pairwise: 0.02976  loss_mask: 0.03401  loss_mask_affinity: 0.007502    time: 0.8105  last_time: 0.9229  data_time: 0.0163  last_data_time: 0.0192   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:50:54 d2.utils.events]: [0m eta: 0:23:46  iter: 16239  total_loss: 1.47  loss_fcos_loc: 0.1646  loss_fcos_ctr: 0.6099  loss_fcos_vfcls: 0.5645  loss_prj: 0.07082  loss_pairwise: 0.02533  loss_mask: 0.03302  loss_mask_affinity: 0.007047    time: 0.8105  last_time: 0.8347  data_time: 0.0170  last_data_time: 0.0136   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:51:10 d2.utils.events]: [0m eta: 0:23:31  iter: 16259  total_loss: 1.471  loss_fcos_loc: 0.1701  loss_fcos_ctr: 0.6064  loss_fcos_vfcls: 0.5603  loss_prj: 0.07296  loss_pairwise: 0.02305  loss_mask: 0.03364  loss_mask_affinity: 0.006656    time: 0.8105  last_time: 0.8185  data_time: 0.0190  last_data_time: 0.0286   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:51:26 d2.utils.events]: [0m eta: 0:23:15  iter: 16279  total_loss: 1.483  loss_fcos_loc: 0.1643  loss_fcos_ctr: 0.6084  loss_fcos_vfcls: 0.5634  loss_prj: 0.07173  loss_pairwise: 0.02578  loss_mask: 0.03187  loss_mask_affinity: 0.006588    time: 0.8105  last_time: 0.8216  data_time: 0.0153  last_data_time: 0.0125   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:51:42 d2.utils.events]: [0m eta: 0:22:59  iter: 16299  total_loss: 1.476  loss_fcos_loc: 0.1649  loss_fcos_ctr: 0.6091  loss_fcos_vfcls: 0.5523  loss_prj: 0.07259  loss_pairwise: 0.02737  loss_mask: 0.03004  loss_mask_affinity: 0.007347    time: 0.8105  last_time: 0.8087  data_time: 0.0167  last_data_time: 0.0137   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:51:58 d2.utils.events]: [0m eta: 0:22:42  iter: 16319  total_loss: 1.488  loss_fcos_loc: 0.1636  loss_fcos_ctr: 0.6076  loss_fcos_vfcls: 0.5515  loss_prj: 0.07054  loss_pairwise: 0.02544  loss_mask: 0.02967  loss_mask_affinity: 0.006677    time: 0.8105  last_time: 0.8174  data_time: 0.0138  last_data_time: 0.0193   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:52:14 d2.utils.events]: [0m eta: 0:22:26  iter: 16339  total_loss: 1.465  loss_fcos_loc: 0.159  loss_fcos_ctr: 0.6064  loss_fcos_vfcls: 0.5547  loss_prj: 0.0662  loss_pairwise: 0.02637  loss_mask: 0.03228  loss_mask_affinity: 0.006614    time: 0.8105  last_time: 0.8261  data_time: 0.0159  last_data_time: 0.0171   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:52:30 d2.utils.events]: [0m eta: 0:22:10  iter: 16359  total_loss: 1.456  loss_fcos_loc: 0.1576  loss_fcos_ctr: 0.609  loss_fcos_vfcls: 0.5443  loss_prj: 0.06938  loss_pairwise: 0.02354  loss_mask: 0.03256  loss_mask_affinity: 0.006476    time: 0.8105  last_time: 0.8588  data_time: 0.0132  last_data_time: 0.0128   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:52:47 d2.utils.events]: [0m eta: 0:21:54  iter: 16379  total_loss: 1.494  loss_fcos_loc: 0.173  loss_fcos_ctr: 0.6079  loss_fcos_vfcls: 0.5777  loss_prj: 0.0734  loss_pairwise: 0.02638  loss_mask: 0.03508  loss_mask_affinity: 0.007009    time: 0.8105  last_time: 0.7813  data_time: 0.0160  last_data_time: 0.0164   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:53:03 d2.utils.events]: [0m eta: 0:21:38  iter: 16399  total_loss: 1.468  loss_fcos_loc: 0.16  loss_fcos_ctr: 0.6073  loss_fcos_vfcls: 0.5602  loss_prj: 0.06695  loss_pairwise: 0.0255  loss_mask: 0.02937  loss_mask_affinity: 0.006902    time: 0.8105  last_time: 0.8820  data_time: 0.0193  last_data_time: 0.0286   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:53:19 d2.utils.events]: [0m eta: 0:21:21  iter: 16419  total_loss: 1.502  loss_fcos_loc: 0.1652  loss_fcos_ctr: 0.6077  loss_fcos_vfcls: 0.5795  loss_prj: 0.0693  loss_pairwise: 0.02593  loss_mask: 0.03614  loss_mask_affinity: 0.006694    time: 0.8105  last_time: 0.8733  data_time: 0.0169  last_data_time: 0.0110   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:53:35 d2.utils.events]: [0m eta: 0:21:05  iter: 16439  total_loss: 1.489  loss_fcos_loc: 0.1719  loss_fcos_ctr: 0.6102  loss_fcos_vfcls: 0.5647  loss_prj: 0.07723  loss_pairwise: 0.02903  loss_mask: 0.03715  loss_mask_affinity: 0.007489    time: 0.8105  last_time: 0.7733  data_time: 0.0171  last_data_time: 0.0182   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:53:51 d2.utils.events]: [0m eta: 0:20:49  iter: 16459  total_loss: 1.48  loss_fcos_loc: 0.1659  loss_fcos_ctr: 0.6104  loss_fcos_vfcls: 0.5598  loss_prj: 0.07025  loss_pairwise: 0.02469  loss_mask: 0.03387  loss_mask_affinity: 0.007446    time: 0.8105  last_time: 0.7438  data_time: 0.0173  last_data_time: 0.0223   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:54:08 d2.utils.events]: [0m eta: 0:20:33  iter: 16479  total_loss: 1.451  loss_fcos_loc: 0.1656  loss_fcos_ctr: 0.6092  loss_fcos_vfcls: 0.5491  loss_prj: 0.06094  loss_pairwise: 0.02617  loss_mask: 0.03247  loss_mask_affinity: 0.006606    time: 0.8105  last_time: 0.7908  data_time: 0.0155  last_data_time: 0.0157   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:54:24 d2.utils.events]: [0m eta: 0:20:16  iter: 16499  total_loss: 1.47  loss_fcos_loc: 0.1671  loss_fcos_ctr: 0.609  loss_fcos_vfcls: 0.5634  loss_prj: 0.07277  loss_pairwise: 0.03247  loss_mask: 0.03184  loss_mask_affinity: 0.007384    time: 0.8105  last_time: 0.7945  data_time: 0.0171  last_data_time: 0.0149   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:54:41 d2.utils.events]: [0m eta: 0:20:00  iter: 16519  total_loss: 1.484  loss_fcos_loc: 0.1614  loss_fcos_ctr: 0.608  loss_fcos_vfcls: 0.5813  loss_prj: 0.07284  loss_pairwise: 0.02633  loss_mask: 0.0325  loss_mask_affinity: 0.00723    time: 0.8105  last_time: 0.7892  data_time: 0.0154  last_data_time: 0.0148   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:54:58 d2.utils.events]: [0m eta: 0:19:44  iter: 16539  total_loss: 1.46  loss_fcos_loc: 0.164  loss_fcos_ctr: 0.61  loss_fcos_vfcls: 0.5661  loss_prj: 0.06821  loss_pairwise: 0.02776  loss_mask: 0.02927  loss_mask_affinity: 0.00675    time: 0.8106  last_time: 0.7460  data_time: 0.0168  last_data_time: 0.0178   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:55:14 d2.utils.events]: [0m eta: 0:19:29  iter: 16559  total_loss: 1.471  loss_fcos_loc: 0.1643  loss_fcos_ctr: 0.6077  loss_fcos_vfcls: 0.5626  loss_prj: 0.06795  loss_pairwise: 0.0277  loss_mask: 0.03156  loss_mask_affinity: 0.006932    time: 0.8106  last_time: 0.7420  data_time: 0.0148  last_data_time: 0.0141   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:55:30 d2.utils.events]: [0m eta: 0:19:13  iter: 16579  total_loss: 1.435  loss_fcos_loc: 0.1568  loss_fcos_ctr: 0.6075  loss_fcos_vfcls: 0.5529  loss_prj: 0.06728  loss_pairwise: 0.02633  loss_mask: 0.03115  loss_mask_affinity: 0.00696    time: 0.8105  last_time: 0.7317  data_time: 0.0160  last_data_time: 0.0147   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:55:46 d2.utils.events]: [0m eta: 0:18:57  iter: 16599  total_loss: 1.48  loss_fcos_loc: 0.175  loss_fcos_ctr: 0.6124  loss_fcos_vfcls: 0.569  loss_prj: 0.07356  loss_pairwise: 0.02431  loss_mask: 0.03224  loss_mask_affinity: 0.006931    time: 0.8106  last_time: 0.8521  data_time: 0.0157  last_data_time: 0.0133   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:56:03 d2.utils.events]: [0m eta: 0:18:41  iter: 16619  total_loss: 1.488  loss_fcos_loc: 0.1746  loss_fcos_ctr: 0.6107  loss_fcos_vfcls: 0.5653  loss_prj: 0.07089  loss_pairwise: 0.02423  loss_mask: 0.03415  loss_mask_affinity: 0.006582    time: 0.8106  last_time: 0.9003  data_time: 0.0147  last_data_time: 0.0159   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:56:19 d2.utils.events]: [0m eta: 0:18:25  iter: 16639  total_loss: 1.508  loss_fcos_loc: 0.1658  loss_fcos_ctr: 0.6092  loss_fcos_vfcls: 0.5748  loss_prj: 0.07093  loss_pairwise: 0.02986  loss_mask: 0.03339  loss_mask_affinity: 0.006717    time: 0.8106  last_time: 0.7746  data_time: 0.0172  last_data_time: 0.0096   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:56:36 d2.utils.events]: [0m eta: 0:18:09  iter: 16659  total_loss: 1.488  loss_fcos_loc: 0.1599  loss_fcos_ctr: 0.6089  loss_fcos_vfcls: 0.565  loss_prj: 0.06696  loss_pairwise: 0.02668  loss_mask: 0.0338  loss_mask_affinity: 0.006847    time: 0.8106  last_time: 0.7708  data_time: 0.0168  last_data_time: 0.0164   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:56:53 d2.utils.events]: [0m eta: 0:17:53  iter: 16679  total_loss: 1.477  loss_fcos_loc: 0.1662  loss_fcos_ctr: 0.6077  loss_fcos_vfcls: 0.5532  loss_prj: 0.07421  loss_pairwise: 0.02511  loss_mask: 0.03318  loss_mask_affinity: 0.007196    time: 0.8106  last_time: 0.8133  data_time: 0.0169  last_data_time: 0.0120   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:57:09 d2.utils.events]: [0m eta: 0:17:38  iter: 16699  total_loss: 1.476  loss_fcos_loc: 0.1645  loss_fcos_ctr: 0.6073  loss_fcos_vfcls: 0.5523  loss_prj: 0.06942  loss_pairwise: 0.02716  loss_mask: 0.03261  loss_mask_affinity: 0.00705    time: 0.8107  last_time: 0.7974  data_time: 0.0175  last_data_time: 0.0155   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:57:26 d2.utils.events]: [0m eta: 0:17:21  iter: 16719  total_loss: 1.467  loss_fcos_loc: 0.1595  loss_fcos_ctr: 0.607  loss_fcos_vfcls: 0.558  loss_prj: 0.0661  loss_pairwise: 0.02502  loss_mask: 0.03125  loss_mask_affinity: 0.006412    time: 0.8107  last_time: 0.9492  data_time: 0.0175  last_data_time: 0.0132   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:57:42 d2.utils.events]: [0m eta: 0:17:04  iter: 16739  total_loss: 1.476  loss_fcos_loc: 0.1619  loss_fcos_ctr: 0.6079  loss_fcos_vfcls: 0.5756  loss_prj: 0.06436  loss_pairwise: 0.0264  loss_mask: 0.03107  loss_mask_affinity: 0.006219    time: 0.8107  last_time: 0.8097  data_time: 0.0172  last_data_time: 0.0126   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:57:58 d2.utils.events]: [0m eta: 0:16:47  iter: 16759  total_loss: 1.453  loss_fcos_loc: 0.1612  loss_fcos_ctr: 0.6082  loss_fcos_vfcls: 0.5498  loss_prj: 0.06552  loss_pairwise: 0.02781  loss_mask: 0.02923  loss_mask_affinity: 0.006624    time: 0.8107  last_time: 0.9079  data_time: 0.0158  last_data_time: 0.0206   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:58:15 d2.utils.events]: [0m eta: 0:16:30  iter: 16779  total_loss: 1.466  loss_fcos_loc: 0.1603  loss_fcos_ctr: 0.6054  loss_fcos_vfcls: 0.5715  loss_prj: 0.06823  loss_pairwise: 0.02624  loss_mask: 0.02897  loss_mask_affinity: 0.006466    time: 0.8107  last_time: 0.9401  data_time: 0.0178  last_data_time: 0.0166   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:58:30 d2.utils.events]: [0m eta: 0:16:13  iter: 16799  total_loss: 1.479  loss_fcos_loc: 0.1685  loss_fcos_ctr: 0.6106  loss_fcos_vfcls: 0.5462  loss_prj: 0.0761  loss_pairwise: 0.02866  loss_mask: 0.03471  loss_mask_affinity: 0.007311    time: 0.8106  last_time: 0.7740  data_time: 0.0177  last_data_time: 0.0194   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:58:47 d2.utils.events]: [0m eta: 0:15:58  iter: 16819  total_loss: 1.484  loss_fcos_loc: 0.168  loss_fcos_ctr: 0.6079  loss_fcos_vfcls: 0.565  loss_prj: 0.0681  loss_pairwise: 0.02537  loss_mask: 0.03033  loss_mask_affinity: 0.006968    time: 0.8107  last_time: 0.8980  data_time: 0.0164  last_data_time: 0.0169   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:59:03 d2.utils.events]: [0m eta: 0:15:42  iter: 16839  total_loss: 1.461  loss_fcos_loc: 0.165  loss_fcos_ctr: 0.6068  loss_fcos_vfcls: 0.551  loss_prj: 0.07113  loss_pairwise: 0.02807  loss_mask: 0.03055  loss_mask_affinity: 0.006678    time: 0.8107  last_time: 0.8405  data_time: 0.0166  last_data_time: 0.0149   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:59:19 d2.utils.events]: [0m eta: 0:15:26  iter: 16859  total_loss: 1.475  loss_fcos_loc: 0.1641  loss_fcos_ctr: 0.6105  loss_fcos_vfcls: 0.5565  loss_prj: 0.07098  loss_pairwise: 0.02581  loss_mask: 0.03069  loss_mask_affinity: 0.006835    time: 0.8107  last_time: 0.7478  data_time: 0.0156  last_data_time: 0.0318   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:59:36 d2.utils.events]: [0m eta: 0:15:10  iter: 16879  total_loss: 1.487  loss_fcos_loc: 0.1656  loss_fcos_ctr: 0.6091  loss_fcos_vfcls: 0.5786  loss_prj: 0.0673  loss_pairwise: 0.02612  loss_mask: 0.03269  loss_mask_affinity: 0.006857    time: 0.8107  last_time: 0.8696  data_time: 0.0183  last_data_time: 0.0377   lr: 0.0001  max_mem: 10952M
[32m[06/24 20:59:52 d2.utils.events]: [0m eta: 0:14:53  iter: 16899  total_loss: 1.48  loss_fcos_loc: 0.1636  loss_fcos_ctr: 0.6078  loss_fcos_vfcls: 0.5607  loss_prj: 0.07187  loss_pairwise: 0.02968  loss_mask: 0.03308  loss_mask_affinity: 0.007296    time: 0.8107  last_time: 0.8336  data_time: 0.0154  last_data_time: 0.0172   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:00:09 d2.utils.events]: [0m eta: 0:14:37  iter: 16919  total_loss: 1.483  loss_fcos_loc: 0.1686  loss_fcos_ctr: 0.6131  loss_fcos_vfcls: 0.5616  loss_prj: 0.06938  loss_pairwise: 0.025  loss_mask: 0.03028  loss_mask_affinity: 0.006958    time: 0.8107  last_time: 0.8071  data_time: 0.0161  last_data_time: 0.0170   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:00:25 d2.utils.events]: [0m eta: 0:14:21  iter: 16939  total_loss: 1.462  loss_fcos_loc: 0.1623  loss_fcos_ctr: 0.6071  loss_fcos_vfcls: 0.571  loss_prj: 0.06297  loss_pairwise: 0.02545  loss_mask: 0.02937  loss_mask_affinity: 0.006258    time: 0.8107  last_time: 0.8349  data_time: 0.0162  last_data_time: 0.0390   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:00:42 d2.utils.events]: [0m eta: 0:14:05  iter: 16959  total_loss: 1.479  loss_fcos_loc: 0.1636  loss_fcos_ctr: 0.6101  loss_fcos_vfcls: 0.5477  loss_prj: 0.07166  loss_pairwise: 0.02468  loss_mask: 0.0299  loss_mask_affinity: 0.007653    time: 0.8107  last_time: 0.8035  data_time: 0.0163  last_data_time: 0.0239   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:00:58 d2.utils.events]: [0m eta: 0:13:50  iter: 16979  total_loss: 1.449  loss_fcos_loc: 0.1638  loss_fcos_ctr: 0.6079  loss_fcos_vfcls: 0.5565  loss_prj: 0.07352  loss_pairwise: 0.02881  loss_mask: 0.03203  loss_mask_affinity: 0.006901    time: 0.8108  last_time: 0.8989  data_time: 0.0170  last_data_time: 0.0138   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:01:15 d2.utils.events]: [0m eta: 0:13:33  iter: 16999  total_loss: 1.485  loss_fcos_loc: 0.1706  loss_fcos_ctr: 0.61  loss_fcos_vfcls: 0.5527  loss_prj: 0.07488  loss_pairwise: 0.02838  loss_mask: 0.03369  loss_mask_affinity: 0.006996    time: 0.8108  last_time: 0.7293  data_time: 0.0174  last_data_time: 0.0147   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:01:30 d2.utils.events]: [0m eta: 0:13:16  iter: 17019  total_loss: 1.455  loss_fcos_loc: 0.158  loss_fcos_ctr: 0.6067  loss_fcos_vfcls: 0.5412  loss_prj: 0.06563  loss_pairwise: 0.02588  loss_mask: 0.0318  loss_mask_affinity: 0.006272    time: 0.8107  last_time: 0.8973  data_time: 0.0142  last_data_time: 0.0113   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:01:47 d2.utils.events]: [0m eta: 0:13:00  iter: 17039  total_loss: 1.492  loss_fcos_loc: 0.171  loss_fcos_ctr: 0.609  loss_fcos_vfcls: 0.5774  loss_prj: 0.06997  loss_pairwise: 0.02667  loss_mask: 0.03167  loss_mask_affinity: 0.007226    time: 0.8107  last_time: 0.8498  data_time: 0.0168  last_data_time: 0.0162   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:02:03 d2.utils.events]: [0m eta: 0:12:44  iter: 17059  total_loss: 1.471  loss_fcos_loc: 0.1596  loss_fcos_ctr: 0.6085  loss_fcos_vfcls: 0.5682  loss_prj: 0.06831  loss_pairwise: 0.02918  loss_mask: 0.03247  loss_mask_affinity: 0.007267    time: 0.8108  last_time: 0.7477  data_time: 0.0170  last_data_time: 0.0127   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:02:20 d2.utils.events]: [0m eta: 0:12:29  iter: 17079  total_loss: 1.482  loss_fcos_loc: 0.1714  loss_fcos_ctr: 0.6108  loss_fcos_vfcls: 0.5492  loss_prj: 0.06942  loss_pairwise: 0.0254  loss_mask: 0.02902  loss_mask_affinity: 0.007455    time: 0.8108  last_time: 0.7685  data_time: 0.0166  last_data_time: 0.0132   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:02:36 d2.utils.events]: [0m eta: 0:12:12  iter: 17099  total_loss: 1.486  loss_fcos_loc: 0.1712  loss_fcos_ctr: 0.6098  loss_fcos_vfcls: 0.5652  loss_prj: 0.07281  loss_pairwise: 0.02766  loss_mask: 0.03304  loss_mask_affinity: 0.006706    time: 0.8108  last_time: 0.8837  data_time: 0.0153  last_data_time: 0.0093   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:02:53 d2.utils.events]: [0m eta: 0:11:57  iter: 17119  total_loss: 1.513  loss_fcos_loc: 0.178  loss_fcos_ctr: 0.6132  loss_fcos_vfcls: 0.5731  loss_prj: 0.07963  loss_pairwise: 0.02973  loss_mask: 0.03259  loss_mask_affinity: 0.007387    time: 0.8108  last_time: 0.8737  data_time: 0.0146  last_data_time: 0.0181   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:03:10 d2.utils.events]: [0m eta: 0:11:40  iter: 17139  total_loss: 1.47  loss_fcos_loc: 0.1661  loss_fcos_ctr: 0.6107  loss_fcos_vfcls: 0.5597  loss_prj: 0.0707  loss_pairwise: 0.02632  loss_mask: 0.03483  loss_mask_affinity: 0.006921    time: 0.8108  last_time: 0.8346  data_time: 0.0160  last_data_time: 0.0117   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:03:26 d2.utils.events]: [0m eta: 0:11:23  iter: 17159  total_loss: 1.47  loss_fcos_loc: 0.1605  loss_fcos_ctr: 0.6096  loss_fcos_vfcls: 0.5714  loss_prj: 0.06883  loss_pairwise: 0.02528  loss_mask: 0.029  loss_mask_affinity: 0.006916    time: 0.8108  last_time: 0.8653  data_time: 0.0179  last_data_time: 0.0328   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:03:41 d2.utils.events]: [0m eta: 0:11:06  iter: 17179  total_loss: 1.481  loss_fcos_loc: 0.16  loss_fcos_ctr: 0.6095  loss_fcos_vfcls: 0.55  loss_prj: 0.07084  loss_pairwise: 0.02728  loss_mask: 0.03483  loss_mask_affinity: 0.00726    time: 0.8108  last_time: 0.7765  data_time: 0.0165  last_data_time: 0.0191   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:03:58 d2.utils.events]: [0m eta: 0:10:50  iter: 17199  total_loss: 1.501  loss_fcos_loc: 0.1709  loss_fcos_ctr: 0.6124  loss_fcos_vfcls: 0.5692  loss_prj: 0.07593  loss_pairwise: 0.02929  loss_mask: 0.03595  loss_mask_affinity: 0.00697    time: 0.8108  last_time: 0.7787  data_time: 0.0154  last_data_time: 0.0234   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:04:14 d2.utils.events]: [0m eta: 0:10:34  iter: 17219  total_loss: 1.445  loss_fcos_loc: 0.1481  loss_fcos_ctr: 0.6055  loss_fcos_vfcls: 0.5602  loss_prj: 0.06182  loss_pairwise: 0.02866  loss_mask: 0.0304  loss_mask_affinity: 0.006915    time: 0.8108  last_time: 0.8466  data_time: 0.0176  last_data_time: 0.0123   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:04:30 d2.utils.events]: [0m eta: 0:10:16  iter: 17239  total_loss: 1.442  loss_fcos_loc: 0.1622  loss_fcos_ctr: 0.6076  loss_fcos_vfcls: 0.5434  loss_prj: 0.06893  loss_pairwise: 0.02618  loss_mask: 0.03018  loss_mask_affinity: 0.007173    time: 0.8108  last_time: 0.9766  data_time: 0.0153  last_data_time: 0.0169   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:04:46 d2.utils.events]: [0m eta: 0:09:59  iter: 17259  total_loss: 1.488  loss_fcos_loc: 0.1693  loss_fcos_ctr: 0.6093  loss_fcos_vfcls: 0.558  loss_prj: 0.07177  loss_pairwise: 0.02431  loss_mask: 0.03344  loss_mask_affinity: 0.007052    time: 0.8108  last_time: 0.8170  data_time: 0.0166  last_data_time: 0.0156   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:05:02 d2.utils.events]: [0m eta: 0:09:43  iter: 17279  total_loss: 1.49  loss_fcos_loc: 0.1642  loss_fcos_ctr: 0.6056  loss_fcos_vfcls: 0.5701  loss_prj: 0.06709  loss_pairwise: 0.02856  loss_mask: 0.03231  loss_mask_affinity: 0.00687    time: 0.8108  last_time: 0.8025  data_time: 0.0176  last_data_time: 0.0192   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:05:19 d2.utils.events]: [0m eta: 0:09:27  iter: 17299  total_loss: 1.475  loss_fcos_loc: 0.1602  loss_fcos_ctr: 0.6089  loss_fcos_vfcls: 0.5677  loss_prj: 0.07178  loss_pairwise: 0.02539  loss_mask: 0.03188  loss_mask_affinity: 0.006796    time: 0.8108  last_time: 0.8529  data_time: 0.0164  last_data_time: 0.0143   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:05:35 d2.utils.events]: [0m eta: 0:09:11  iter: 17319  total_loss: 1.481  loss_fcos_loc: 0.1712  loss_fcos_ctr: 0.6096  loss_fcos_vfcls: 0.5614  loss_prj: 0.0745  loss_pairwise: 0.02833  loss_mask: 0.03608  loss_mask_affinity: 0.006735    time: 0.8108  last_time: 0.7414  data_time: 0.0162  last_data_time: 0.0147   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:05:51 d2.utils.events]: [0m eta: 0:08:55  iter: 17339  total_loss: 1.438  loss_fcos_loc: 0.1525  loss_fcos_ctr: 0.605  loss_fcos_vfcls: 0.556  loss_prj: 0.06456  loss_pairwise: 0.02527  loss_mask: 0.0289  loss_mask_affinity: 0.006565    time: 0.8107  last_time: 0.7475  data_time: 0.0172  last_data_time: 0.0184   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:06:07 d2.utils.events]: [0m eta: 0:08:38  iter: 17359  total_loss: 1.477  loss_fcos_loc: 0.16  loss_fcos_ctr: 0.6043  loss_fcos_vfcls: 0.5645  loss_prj: 0.06359  loss_pairwise: 0.0257  loss_mask: 0.03288  loss_mask_affinity: 0.006857    time: 0.8107  last_time: 0.7586  data_time: 0.0164  last_data_time: 0.0230   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:06:23 d2.utils.events]: [0m eta: 0:08:22  iter: 17379  total_loss: 1.454  loss_fcos_loc: 0.1597  loss_fcos_ctr: 0.6083  loss_fcos_vfcls: 0.533  loss_prj: 0.06952  loss_pairwise: 0.02592  loss_mask: 0.03314  loss_mask_affinity: 0.006966    time: 0.8107  last_time: 0.9228  data_time: 0.0164  last_data_time: 0.0112   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:06:39 d2.utils.events]: [0m eta: 0:08:06  iter: 17399  total_loss: 1.5  loss_fcos_loc: 0.1626  loss_fcos_ctr: 0.6119  loss_fcos_vfcls: 0.5591  loss_prj: 0.06871  loss_pairwise: 0.02802  loss_mask: 0.03383  loss_mask_affinity: 0.006565    time: 0.8107  last_time: 0.7933  data_time: 0.0146  last_data_time: 0.0147   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:06:55 d2.utils.events]: [0m eta: 0:07:50  iter: 17419  total_loss: 1.491  loss_fcos_loc: 0.1564  loss_fcos_ctr: 0.61  loss_fcos_vfcls: 0.572  loss_prj: 0.06614  loss_pairwise: 0.02644  loss_mask: 0.03113  loss_mask_affinity: 0.007276    time: 0.8107  last_time: 0.7595  data_time: 0.0155  last_data_time: 0.0145   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:07:11 d2.utils.events]: [0m eta: 0:07:33  iter: 17439  total_loss: 1.439  loss_fcos_loc: 0.1593  loss_fcos_ctr: 0.6089  loss_fcos_vfcls: 0.5533  loss_prj: 0.0661  loss_pairwise: 0.0249  loss_mask: 0.03175  loss_mask_affinity: 0.00668    time: 0.8107  last_time: 0.8707  data_time: 0.0157  last_data_time: 0.0147   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:07:27 d2.utils.events]: [0m eta: 0:07:17  iter: 17459  total_loss: 1.463  loss_fcos_loc: 0.1581  loss_fcos_ctr: 0.6082  loss_fcos_vfcls: 0.5591  loss_prj: 0.07154  loss_pairwise: 0.02804  loss_mask: 0.03371  loss_mask_affinity: 0.007091    time: 0.8107  last_time: 0.8619  data_time: 0.0161  last_data_time: 0.0167   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:07:43 d2.utils.events]: [0m eta: 0:07:01  iter: 17479  total_loss: 1.452  loss_fcos_loc: 0.1646  loss_fcos_ctr: 0.607  loss_fcos_vfcls: 0.5419  loss_prj: 0.07168  loss_pairwise: 0.02664  loss_mask: 0.03072  loss_mask_affinity: 0.006873    time: 0.8107  last_time: 0.8915  data_time: 0.0167  last_data_time: 0.0169   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:08:00 d2.utils.events]: [0m eta: 0:06:45  iter: 17499  total_loss: 1.473  loss_fcos_loc: 0.1705  loss_fcos_ctr: 0.6107  loss_fcos_vfcls: 0.5593  loss_prj: 0.06895  loss_pairwise: 0.02707  loss_mask: 0.03325  loss_mask_affinity: 0.006878    time: 0.8107  last_time: 0.6837  data_time: 0.0158  last_data_time: 0.0314   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:08:17 d2.utils.events]: [0m eta: 0:06:29  iter: 17519  total_loss: 1.457  loss_fcos_loc: 0.1563  loss_fcos_ctr: 0.6098  loss_fcos_vfcls: 0.5564  loss_prj: 0.06896  loss_pairwise: 0.02845  loss_mask: 0.03309  loss_mask_affinity: 0.006836    time: 0.8107  last_time: 0.7219  data_time: 0.0153  last_data_time: 0.0144   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:08:33 d2.utils.events]: [0m eta: 0:06:12  iter: 17539  total_loss: 1.45  loss_fcos_loc: 0.1627  loss_fcos_ctr: 0.6081  loss_fcos_vfcls: 0.5402  loss_prj: 0.06813  loss_pairwise: 0.02313  loss_mask: 0.03457  loss_mask_affinity: 0.00669    time: 0.8107  last_time: 0.7929  data_time: 0.0159  last_data_time: 0.0223   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:08:50 d2.utils.events]: [0m eta: 0:05:56  iter: 17559  total_loss: 1.48  loss_fcos_loc: 0.1696  loss_fcos_ctr: 0.6101  loss_fcos_vfcls: 0.5672  loss_prj: 0.07242  loss_pairwise: 0.02587  loss_mask: 0.03383  loss_mask_affinity: 0.007019    time: 0.8107  last_time: 0.7471  data_time: 0.0180  last_data_time: 0.0337   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:09:06 d2.utils.events]: [0m eta: 0:05:40  iter: 17579  total_loss: 1.523  loss_fcos_loc: 0.1798  loss_fcos_ctr: 0.6108  loss_fcos_vfcls: 0.5782  loss_prj: 0.07916  loss_pairwise: 0.02632  loss_mask: 0.03728  loss_mask_affinity: 0.006966    time: 0.8108  last_time: 0.8001  data_time: 0.0176  last_data_time: 0.0202   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:09:23 d2.utils.events]: [0m eta: 0:05:23  iter: 17599  total_loss: 1.461  loss_fcos_loc: 0.158  loss_fcos_ctr: 0.6081  loss_fcos_vfcls: 0.5658  loss_prj: 0.06906  loss_pairwise: 0.02479  loss_mask: 0.03181  loss_mask_affinity: 0.007448    time: 0.8108  last_time: 0.8028  data_time: 0.0158  last_data_time: 0.0180   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:09:39 d2.utils.events]: [0m eta: 0:05:07  iter: 17619  total_loss: 1.477  loss_fcos_loc: 0.167  loss_fcos_ctr: 0.6108  loss_fcos_vfcls: 0.5525  loss_prj: 0.07017  loss_pairwise: 0.02835  loss_mask: 0.03389  loss_mask_affinity: 0.007234    time: 0.8108  last_time: 0.8798  data_time: 0.0143  last_data_time: 0.0082   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:09:55 d2.utils.events]: [0m eta: 0:04:51  iter: 17639  total_loss: 1.476  loss_fcos_loc: 0.1689  loss_fcos_ctr: 0.6108  loss_fcos_vfcls: 0.5652  loss_prj: 0.07456  loss_pairwise: 0.02633  loss_mask: 0.03223  loss_mask_affinity: 0.006672    time: 0.8108  last_time: 0.8603  data_time: 0.0160  last_data_time: 0.0100   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:10:12 d2.utils.events]: [0m eta: 0:04:35  iter: 17659  total_loss: 1.474  loss_fcos_loc: 0.1608  loss_fcos_ctr: 0.6071  loss_fcos_vfcls: 0.5715  loss_prj: 0.06556  loss_pairwise: 0.02828  loss_mask: 0.03126  loss_mask_affinity: 0.00663    time: 0.8108  last_time: 0.7184  data_time: 0.0164  last_data_time: 0.0141   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:10:28 d2.utils.events]: [0m eta: 0:04:18  iter: 17679  total_loss: 1.472  loss_fcos_loc: 0.1605  loss_fcos_ctr: 0.606  loss_fcos_vfcls: 0.5584  loss_prj: 0.06744  loss_pairwise: 0.0274  loss_mask: 0.03124  loss_mask_affinity: 0.006768    time: 0.8108  last_time: 0.7867  data_time: 0.0176  last_data_time: 0.0157   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:10:44 d2.utils.events]: [0m eta: 0:04:02  iter: 17699  total_loss: 1.451  loss_fcos_loc: 0.1581  loss_fcos_ctr: 0.6084  loss_fcos_vfcls: 0.56  loss_prj: 0.06427  loss_pairwise: 0.02234  loss_mask: 0.0321  loss_mask_affinity: 0.006756    time: 0.8108  last_time: 0.7758  data_time: 0.0159  last_data_time: 0.0177   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:11:00 d2.utils.events]: [0m eta: 0:03:46  iter: 17719  total_loss: 1.456  loss_fcos_loc: 0.1555  loss_fcos_ctr: 0.6063  loss_fcos_vfcls: 0.5621  loss_prj: 0.06237  loss_pairwise: 0.02561  loss_mask: 0.031  loss_mask_affinity: 0.006793    time: 0.8108  last_time: 0.7861  data_time: 0.0172  last_data_time: 0.0266   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:11:17 d2.utils.events]: [0m eta: 0:03:30  iter: 17739  total_loss: 1.461  loss_fcos_loc: 0.1596  loss_fcos_ctr: 0.606  loss_fcos_vfcls: 0.5635  loss_prj: 0.0657  loss_pairwise: 0.02589  loss_mask: 0.03106  loss_mask_affinity: 0.006817    time: 0.8108  last_time: 0.7227  data_time: 0.0197  last_data_time: 0.0178   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:11:33 d2.utils.events]: [0m eta: 0:03:14  iter: 17759  total_loss: 1.46  loss_fcos_loc: 0.1634  loss_fcos_ctr: 0.6103  loss_fcos_vfcls: 0.5598  loss_prj: 0.06853  loss_pairwise: 0.02757  loss_mask: 0.02939  loss_mask_affinity: 0.006611    time: 0.8108  last_time: 0.8874  data_time: 0.0177  last_data_time: 0.0151   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:11:49 d2.utils.events]: [0m eta: 0:02:57  iter: 17779  total_loss: 1.509  loss_fcos_loc: 0.1651  loss_fcos_ctr: 0.61  loss_fcos_vfcls: 0.5743  loss_prj: 0.07249  loss_pairwise: 0.02757  loss_mask: 0.03309  loss_mask_affinity: 0.007051    time: 0.8108  last_time: 0.8806  data_time: 0.0169  last_data_time: 0.0212   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:12:06 d2.utils.events]: [0m eta: 0:02:41  iter: 17799  total_loss: 1.475  loss_fcos_loc: 0.1627  loss_fcos_ctr: 0.6099  loss_fcos_vfcls: 0.5701  loss_prj: 0.07176  loss_pairwise: 0.02709  loss_mask: 0.03359  loss_mask_affinity: 0.007314    time: 0.8108  last_time: 0.9031  data_time: 0.0167  last_data_time: 0.0177   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:12:22 d2.utils.events]: [0m eta: 0:02:25  iter: 17819  total_loss: 1.456  loss_fcos_loc: 0.158  loss_fcos_ctr: 0.6068  loss_fcos_vfcls: 0.5546  loss_prj: 0.0648  loss_pairwise: 0.02691  loss_mask: 0.03093  loss_mask_affinity: 0.006381    time: 0.8108  last_time: 0.8171  data_time: 0.0188  last_data_time: 0.0190   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:12:38 d2.utils.events]: [0m eta: 0:02:09  iter: 17839  total_loss: 1.465  loss_fcos_loc: 0.1615  loss_fcos_ctr: 0.6075  loss_fcos_vfcls: 0.5676  loss_prj: 0.06998  loss_pairwise: 0.02524  loss_mask: 0.03294  loss_mask_affinity: 0.006437    time: 0.8108  last_time: 0.8116  data_time: 0.0165  last_data_time: 0.0158   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:12:55 d2.utils.events]: [0m eta: 0:01:53  iter: 17859  total_loss: 1.462  loss_fcos_loc: 0.1555  loss_fcos_ctr: 0.6079  loss_fcos_vfcls: 0.5563  loss_prj: 0.06121  loss_pairwise: 0.02807  loss_mask: 0.02771  loss_mask_affinity: 0.006815    time: 0.8108  last_time: 0.8324  data_time: 0.0159  last_data_time: 0.0086   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:13:11 d2.utils.events]: [0m eta: 0:01:36  iter: 17879  total_loss: 1.46  loss_fcos_loc: 0.158  loss_fcos_ctr: 0.6081  loss_fcos_vfcls: 0.571  loss_prj: 0.06816  loss_pairwise: 0.02766  loss_mask: 0.03158  loss_mask_affinity: 0.006771    time: 0.8108  last_time: 0.7336  data_time: 0.0191  last_data_time: 0.0296   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:13:27 d2.utils.events]: [0m eta: 0:01:20  iter: 17899  total_loss: 1.454  loss_fcos_loc: 0.1575  loss_fcos_ctr: 0.6073  loss_fcos_vfcls: 0.562  loss_prj: 0.06261  loss_pairwise: 0.02663  loss_mask: 0.03053  loss_mask_affinity: 0.006605    time: 0.8108  last_time: 0.8644  data_time: 0.0172  last_data_time: 0.0163   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:13:43 d2.utils.events]: [0m eta: 0:01:04  iter: 17919  total_loss: 1.466  loss_fcos_loc: 0.1602  loss_fcos_ctr: 0.6066  loss_fcos_vfcls: 0.5692  loss_prj: 0.06385  loss_pairwise: 0.02682  loss_mask: 0.03061  loss_mask_affinity: 0.006559    time: 0.8108  last_time: 0.8346  data_time: 0.0158  last_data_time: 0.0136   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:13:59 d2.utils.events]: [0m eta: 0:00:48  iter: 17939  total_loss: 1.473  loss_fcos_loc: 0.1643  loss_fcos_ctr: 0.608  loss_fcos_vfcls: 0.5673  loss_prj: 0.06885  loss_pairwise: 0.02287  loss_mask: 0.03119  loss_mask_affinity: 0.006882    time: 0.8108  last_time: 0.7907  data_time: 0.0195  last_data_time: 0.0125   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:14:15 d2.utils.events]: [0m eta: 0:00:32  iter: 17959  total_loss: 1.485  loss_fcos_loc: 0.1684  loss_fcos_ctr: 0.6111  loss_fcos_vfcls: 0.5642  loss_prj: 0.07072  loss_pairwise: 0.02752  loss_mask: 0.034  loss_mask_affinity: 0.007292    time: 0.8108  last_time: 0.7914  data_time: 0.0174  last_data_time: 0.0139   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:14:32 d2.utils.events]: [0m eta: 0:00:16  iter: 17979  total_loss: 1.45  loss_fcos_loc: 0.1565  loss_fcos_ctr: 0.6075  loss_fcos_vfcls: 0.5525  loss_prj: 0.06585  loss_pairwise: 0.02986  loss_mask: 0.03202  loss_mask_affinity: 0.007245    time: 0.8108  last_time: 0.7581  data_time: 0.0180  last_data_time: 0.0178   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:14:49 fvcore.common.checkpoint]: [0mSaving checkpoint to /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_1x/model_final.pth
[32m[06/24 21:14:50 d2.utils.events]: [0m eta: 0:00:00  iter: 17999  total_loss: 1.484  loss_fcos_loc: 0.1627  loss_fcos_ctr: 0.6078  loss_fcos_vfcls: 0.5774  loss_prj: 0.07028  loss_pairwise: 0.02774  loss_mask: 0.03203  loss_mask_affinity: 0.007342    time: 0.8108  last_time: 0.8366  data_time: 0.0155  last_data_time: 0.0076   lr: 0.0001  max_mem: 10952M
[32m[06/24 21:14:50 d2.engine.hooks]: [0mOverall training speed: 17997 iterations in 4:03:13 (0.8109 s / it)
[32m[06/24 21:14:50 d2.engine.hooks]: [0mTotal training time: 4:06:53 (0:03:40 on hooks)
[32m[06/24 21:14:51 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[06/24 21:14:51 d2.data.common]: [0mSerializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[32m[06/24 21:14:51 d2.data.common]: [0mSerializing 4952 elements to byte tensors and concatenating them all ...
[32m[06/24 21:14:51 d2.data.common]: [0mSerialized dataset takes 2.22 MiB
[32m[06/24 21:14:51 d2.evaluation.evaluator]: [0mStart inference on 1238 batches
[32m[06/24 21:14:55 d2.evaluation.evaluator]: [0mInference done 11/1238. Dataloading: 0.0006 s/iter. Inference: 0.0493 s/iter. Eval: 0.0051 s/iter. Total: 0.0551 s/iter. ETA=0:01:07
[32m[06/24 21:15:00 d2.evaluation.evaluator]: [0mInference done 104/1238. Dataloading: 0.0012 s/iter. Inference: 0.0478 s/iter. Eval: 0.0051 s/iter. Total: 0.0541 s/iter. ETA=0:01:01
[32m[06/24 21:15:05 d2.evaluation.evaluator]: [0mInference done 195/1238. Dataloading: 0.0013 s/iter. Inference: 0.0482 s/iter. Eval: 0.0052 s/iter. Total: 0.0547 s/iter. ETA=0:00:57
[32m[06/24 21:15:10 d2.evaluation.evaluator]: [0mInference done 289/1238. Dataloading: 0.0013 s/iter. Inference: 0.0480 s/iter. Eval: 0.0050 s/iter. Total: 0.0544 s/iter. ETA=0:00:51
[32m[06/24 21:15:15 d2.evaluation.evaluator]: [0mInference done 382/1238. Dataloading: 0.0013 s/iter. Inference: 0.0480 s/iter. Eval: 0.0050 s/iter. Total: 0.0543 s/iter. ETA=0:00:46
[32m[06/24 21:15:20 d2.evaluation.evaluator]: [0mInference done 474/1238. Dataloading: 0.0013 s/iter. Inference: 0.0480 s/iter. Eval: 0.0050 s/iter. Total: 0.0543 s/iter. ETA=0:00:41
[32m[06/24 21:15:25 d2.evaluation.evaluator]: [0mInference done 567/1238. Dataloading: 0.0013 s/iter. Inference: 0.0480 s/iter. Eval: 0.0050 s/iter. Total: 0.0543 s/iter. ETA=0:00:36
[32m[06/24 21:15:30 d2.evaluation.evaluator]: [0mInference done 658/1238. Dataloading: 0.0013 s/iter. Inference: 0.0481 s/iter. Eval: 0.0050 s/iter. Total: 0.0544 s/iter. ETA=0:00:31
[32m[06/24 21:15:35 d2.evaluation.evaluator]: [0mInference done 748/1238. Dataloading: 0.0013 s/iter. Inference: 0.0481 s/iter. Eval: 0.0051 s/iter. Total: 0.0546 s/iter. ETA=0:00:26
[32m[06/24 21:15:40 d2.evaluation.evaluator]: [0mInference done 839/1238. Dataloading: 0.0013 s/iter. Inference: 0.0482 s/iter. Eval: 0.0051 s/iter. Total: 0.0546 s/iter. ETA=0:00:21
[32m[06/24 21:15:45 d2.evaluation.evaluator]: [0mInference done 930/1238. Dataloading: 0.0013 s/iter. Inference: 0.0482 s/iter. Eval: 0.0051 s/iter. Total: 0.0547 s/iter. ETA=0:00:16
[32m[06/24 21:15:50 d2.evaluation.evaluator]: [0mInference done 1022/1238. Dataloading: 0.0013 s/iter. Inference: 0.0482 s/iter. Eval: 0.0051 s/iter. Total: 0.0547 s/iter. ETA=0:00:11
[32m[06/24 21:15:55 d2.evaluation.evaluator]: [0mInference done 1117/1238. Dataloading: 0.0013 s/iter. Inference: 0.0482 s/iter. Eval: 0.0050 s/iter. Total: 0.0545 s/iter. ETA=0:00:06
[32m[06/24 21:16:00 d2.evaluation.evaluator]: [0mInference done 1212/1238. Dataloading: 0.0013 s/iter. Inference: 0.0481 s/iter. Eval: 0.0049 s/iter. Total: 0.0544 s/iter. ETA=0:00:01
[32m[06/24 21:16:02 d2.evaluation.evaluator]: [0mTotal inference time: 0:01:07.634988 (0.054854 s / iter per device, on 4 devices)
[32m[06/24 21:16:02 d2.evaluation.evaluator]: [0mTotal inference pure compute time: 0:00:59 (0.048110 s / iter per device, on 4 devices)
[32m[06/24 21:16:03 d2.evaluation.pascal_voc_evaluation]: [0mEvaluating voc_2007_test using 2007 metric. Note that results do not use the official Matlab API.
[32m[06/24 21:17:26 d2.engine.defaults]: [0mEvaluation results for voc_2007_test in csv format:
[32m[06/24 21:17:26 d2.evaluation.testing]: [0mcopypaste: Task: bbox
[32m[06/24 21:17:26 d2.evaluation.testing]: [0mcopypaste: AP,AP50,AP75
[32m[06/24 21:17:26 d2.evaluation.testing]: [0mcopypaste: 57.4788,80.6044,63.3276
[32m[06/24 21:17:26 d2.utils.events]: [0m eta: 0:00:00  iter: 17999  total_loss: 1.484  loss_fcos_loc: 0.1627  loss_fcos_ctr: 0.6078  loss_fcos_vfcls: 0.5774  loss_prj: 0.07028  loss_pairwise: 0.02774  loss_mask: 0.03203  loss_mask_affinity: 0.007342    time: 0.8108  last_time: 0.8366  data_time: 0.0155  last_data_time: 0.0076   lr: 0.0001  max_mem: 10952M
Config '/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r50_1x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
Command Line Args: Namespace(config_file='/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r50_1x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['OUTPUT_DIR', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_1x/test-dev', 'MODEL.WEIGHTS', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_1x/model_final.pth'], resume=False)
aaaaa : 4
[32m[06/24 21:17:31 detectron2]: [0mRank of current process: 0. World size: 1
[32m[06/24 21:17:32 detectron2]: [0mEnvironment info:
-------------------------------  -----------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.12 (default, Nov  1 2021, 17:15:04) [GCC 7.3.0]
numpy                            1.23.4
detectron2                       0.6 @/workspace/detectron2/detectron2
Compiler                         GCC 7.3
CUDA compiler                    CUDA 10.2
detectron2 arch flags            7.0
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          1.10.0+cu102 @/usr/local/python/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1,2,3                      Tesla V100-SXM2-32GB (arch=7.0)
Driver version                   470.182.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.11.0+cu102 @/usr/local/python/lib/python3.8/site-packages/torchvision
torchvision arch flags           3.5, 5.0, 6.0, 7.0, 7.5
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.7.0
-------------------------------  -----------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[32m[06/24 21:17:32 detectron2]: [0mCommand line arguments: Namespace(config_file='/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r50_1x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['OUTPUT_DIR', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_1x/test-dev', 'MODEL.WEIGHTS', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_1x/model_final.pth'], resume=False)
[32m[06/24 21:17:32 detectron2]: [0mContents of args.config_file=/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r50_1x.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m../Voc-BoxSeg.yaml[39m[38;5;186m"[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m/path/workspace/pretrained_models/detectron2/R-50.pkl[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m

[38;5;15m  [39m[38;5;197mPROTO_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m  [39m[38;5;197mWITH_PROTOTYPE_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m  [39m[38;5;197mUSE_VFL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m

[38;5;15m  [39m[38;5;197mCOPYPASTE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m  [39m[38;5;197mCOPYPASTE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186minstance[39m[38;5;186m"[39m

[38;5;15m  [39m[38;5;197mBOX_TEACHER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_BINARY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m    [39m[38;5;197mTEACHER_WITH_NMS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mDYNAMIC_MASK_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m

[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/boxseg_r50_1x[39m[38;5;186m"[39m

[32m[06/24 21:17:32 detectron2]: [0mRunning with full config:
[38;5;197mCUDNN_BENCHMARK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mASPECT_RATIO_GROUPING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mFILTER_EMPTY_ANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m  [39m[38;5;197mREPEAT_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mSAMPLER_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrainingSampler[39m
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2000[39m
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mvoc_2007_test[39m
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mvoc_2007_trainval[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mvoc_2012_trainval[39m
[38;5;197mGLOBAL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mHACK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG_EXTRA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mAUG_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mstrong[39m
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCROP_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mrelative_range[39m
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBGR[39m
[38;5;15m  [39m[38;5;197mHFLIP_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mIS_ROTATE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mMASK_FORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mpolygon[39m
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1333[39m
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1333[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m480[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m544[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m576[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m608[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m640[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m672[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m704[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m736[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m768[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mchoice[39m
[38;5;15m  [39m[38;5;197mRANDOM_FLIP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mhorizontal[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mANCHOR_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANGLES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-90[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m90[39m
[38;5;15m    [39m[38;5;197mASPECT_RATIOS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDefaultAnchorGenerator[39m
[38;5;15m    [39m[38;5;197mOFFSET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mSIZES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANTI_ALIAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFREEZE_AT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mbuild_fcos_resnet_fpn_backbone[39m
[38;5;15m  [39m[38;5;197mBASIS_MODULE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANN_SET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mcoco[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;197mLOSS_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mProtoNet[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSyncBN[39m
[38;5;15m    [39m[38;5;197mNUM_BASES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m  [39m[38;5;197mBATEXT[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCANONICAL_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mCUSTOM_DICT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mEVAL_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;197mNUM_CHARS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m25[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mPOOLER_SCALES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.125[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.0625[39m
[38;5;15m    [39m[38;5;197mRECOGNITION_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mctc[39m
[38;5;15m    [39m[38;5;197mRECOGNIZER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mattn[39m
[38;5;15m    [39m[38;5;197mSAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mUSE_AET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_COORDCONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mVOC_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m  [39m[38;5;197mBLENDMASK[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mATTN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mBOTTOM_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m56[39m
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mPOOLER_SCALES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m    [39m[38;5;197mTOP_INTERP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mbilinear[39m
[38;5;15m    [39m[38;5;197mVISUALIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mBOXINST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOTTOM_PIXELS_REMOVED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mPAIRWISE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mCOLOR_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m      [39m[38;5;197mDILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m      [39m[38;5;197mSIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m      [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10000[39m
[38;5;15m  [39m[38;5;197mBOX_TEACHER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mAVG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mDYNAMIC_MASK_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFIX_REDUCTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mIOU_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_BINARY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mMASK_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.999[39m
[38;5;15m    [39m[38;5;197mRESIZE_IMAGES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mRETURN_FLOAT_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mSCORE_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mTEACHER_EVAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mTEACHER_MASK_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mTEACHER_WITH_NMS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_AUG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_TEACHER_INFERENCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10000[39m
[38;5;15m    [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mlinear[39m
[38;5;15m    [39m[38;5;197mWITH_AVG_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mWITH_WARMUP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mBiFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_REPEATS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m160[39m
[38;5;15m  [39m[38;5;197mCONDINST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOTTOM_PIXELS_REMOVED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mMASK_BRANCH[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mCHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m      [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBN[39m
[38;5;15m      [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m      [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m      [39m[38;5;197mSEMANTIC_LOSS_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mMASK_HEAD[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mCHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m      [39m[38;5;197mDISABLE_REL_COORDS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m      [39m[38;5;197mNUM_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m      [39m[38;5;197mUSE_FP16[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mMASK_OUT_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mMAX_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mTOPK_PROPOSALS_PER_IM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m  [39m[38;5;197mCOPYPASTE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mCOPYPASTE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141minstance[39m
[38;5;15m  [39m[38;5;197mDEVICE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mcuda[39m
[38;5;15m  [39m[38;5;197mDLA[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_BODY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDLA34[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m  [39m[38;5;197mFCOS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOX_QUALITY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mctrness[39m
[38;5;15m    [39m[38;5;197mCENTER_SAMPLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mFPN_STRIDES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mLOC_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mgiou[39m
[38;5;15m    [39m[38;5;197mLOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mLOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mLOSS_NORMALIZER_CLS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfg[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT_CLS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNMS_TH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_BOX_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CLS_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_SHARE_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOS_RADIUS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.5[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSIZES_OF_INTEREST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mTHRESH_WITH_CTR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mTOP_LEVELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mUSE_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_RELU[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mUSE_SCALE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mYIELD_BOX_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mYIELD_PROPOSAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mFCPOSE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mATTN_LEN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2737[39m
[38;5;15m    [39m[38;5;197mBASIS_MODULE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mBN_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSyncBN[39m
[38;5;15m      [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m      [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m      [39m[38;5;197mNUM_BASES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m      [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m17[39m
[38;5;15m    [39m[38;5;197mDISTANCE_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12.0[39m
[38;5;15m    [39m[38;5;197mDYNAMIC_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mGT_HEATMAP_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mHEAD_HEATMAP_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mHEATMAP_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.8[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT_DIRECTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m9.0[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT_KEYPOINT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.5[39m
[38;5;15m    [39m[38;5;197mMAX_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m70[39m
[38;5;15m    [39m[38;5;197mPROPOSALS_PER_INST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m70[39m
[38;5;15m    [39m[38;5;197mSIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m  [39m[38;5;197mFCPOSE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFUSE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msum[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m  [39m[38;5;197mKEYPOINT_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mLOAD_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mMEInst[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mAGNOSTIC[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mCENTER_SAMPLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mDIM_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m60[39m
[38;5;15m    [39m[38;5;197mFLAG_PARAMETERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFPN_STRIDES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mGCN_KERNEL_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m9[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mLAST_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mLOC_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mgiou[39m
[38;5;15m    [39m[38;5;197mLOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mLOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mLOSS_ON_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mMASK_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmse[39m
[38;5;15m    [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMASK_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m28[39m
[38;5;15m    [39m[38;5;197mNMS_TH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_BOX_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CLS_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_MASK_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_SHARE_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPATH_COMPONENTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mdatasets/coco/components/coco_2017_train_class_agnosticTrue_whitenTrue_sigmoidTrue_60.npz[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOS_RADIUS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.5[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSIGMOID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mSIZES_OF_INTEREST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mTHRESH_WITH_CTR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mTOP_LEVELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mTYPE_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDCNv1[39m
[38;5;15m    [39m[38;5;197mUSE_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_GCN_IN_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_RELU[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mUSE_SCALE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWHITEN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBoxSeg[39m
[38;5;15m  [39m[38;5;197mMOBILENET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mPANOPTIC_FPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMBINE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m      [39m[38;5;197mINSTANCES_CONFIDENCE_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;197mOVERLAP_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;197mSTUFF_AREA_LIMIT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4096[39m
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m103.53[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m116.28[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m123.675[39m
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mPROPOSAL_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMIN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFCOS[39m
[38;5;15m  [39m[38;5;197mPROTO_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEFORM_INTERVAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEFORM_NUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mRES2_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m  [39m[38;5;197mRETINANET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m&id002[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_LOSS_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mTOPK_CANDIDATES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;197mROI_BOX_CASCADE_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m&id001[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m20.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m20.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m15.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m15.0[39m
[38;5;15m    [39m[38;5;197mIOUS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m  [39m[38;5;197mROI_BOX_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id001[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_BBOX_REG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mFC_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1024[39m
[38;5;15m    [39m[38;5;197mFED_LOSS_FREQ_WEIGHT_POWER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mFED_LOSS_NUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNUM_FC[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mTRAIN_ON_PRED_BOXES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_FED_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_SIGMOID_CE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mRes5ROIHeads[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m20[39m
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mPROPOSAL_APPEND_GT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m  [39m[38;5;197mROI_KEYPOINT_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mMIN_KEYPOINTS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mKRCNNConvDeconvUpsampleHead[39m
[38;5;15m    [39m[38;5;197mNORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mNUM_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m17[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mMaskRCNNConvUpsampleHead[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m  [39m[38;5;197mRPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id002[39m
[38;5;15m    [39m[38;5;197mBOUNDARY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mHEAD_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mStandardRPNHead[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12000[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m255[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSemSegFPNHead[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m54[39m
[38;5;15m  [39m[38;5;197mSOLOV2[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFPN_INSTANCE_STRIDES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mFPN_SCALE_RANGES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m48[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m192[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m384[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m192[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m768[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m384[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m    [39m[38;5;197mINSTANCE_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mINSTANCE_IN_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mINSTANCE_IN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;197mLOSS[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mDICE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3.0[39m
[38;5;15m      [39m[38;5;197mFOCAL_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m      [39m[38;5;197mFOCAL_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m      [39m[38;5;197mFOCAL_USE_SIGMOID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m      [39m[38;5;197mFOCAL_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mMASK_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mMASK_IN_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mMASK_IN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;197mMASK_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMAX_PER_IMG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mNMS_KERNEL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mgaussian[39m
[38;5;15m    [39m[38;5;197mNMS_PRE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m500[39m
[38;5;15m    [39m[38;5;197mNMS_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mNMS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmatrix[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_GRIDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m40[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m36[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m24[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12[39m
[38;5;15m    [39m[38;5;197mNUM_INSTANCE_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_KERNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNUM_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSCORE_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mSIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m    [39m[38;5;197mTYPE_DCN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDCN[39m
[38;5;15m    [39m[38;5;197mUPDATE_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mUSE_COORD_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mUSE_DCN_IN_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mSWIN_TRANSFORMER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mAPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEPTHS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mDROP_PATH_RATE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m    [39m[38;5;197mEMBED_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m    [39m[38;5;197mMLP_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m24[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m    [39m[38;5;197mWINDOW_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m7[39m
[38;5;15m  [39m[38;5;197mTOP_MODULE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mconv[39m
[38;5;15m  [39m[38;5;197mUSE_VFL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mVOVNET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBACKBONE_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mCONV_BODY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mV-39-eSE[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_1x/model_final.pth[39m
[38;5;15m  [39m[38;5;197mWITH_PROTOTYPE_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_1x/test-dev[39m
[38;5;197mSEED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAMP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mBACKBONE_MULTIPLIER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m  [39m[38;5;197mBASE_LR_END[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5000[39m
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mvalue[39m
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mNORM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m  [39m[38;5;197mGAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mWarmupMultiStepLR[39m
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m18000[39m
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m  [39m[38;5;197mNESTEROV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mNUM_DECAYS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m  [39m[38;5;197mOPTIMIZER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSGD[39m
[38;5;15m  [39m[38;5;197mREFERENCE_WORLD_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m  [39m[38;5;197mRESCALE_INTERVAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12000[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16000[39m
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.001[39m
[38;5;15m  [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m  [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mlinear[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0001[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mnull[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFLIP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMAX_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4000[39m
[38;5;15m    [39m[38;5;197mMIN_SIZES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m400[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m500[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m600[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m700[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m900[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1100[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m  [39m[38;5;197mDETECTIONS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10000[39m
[38;5;15m  [39m[38;5;197mEXPECTED_RESULTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mKEYPOINT_OKS_SIGMAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mPRECISE_BN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mNUM_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m200[39m
[38;5;197mVERSION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;197mVIS_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m

[32m[06/24 21:17:32 detectron2]: [0mFull config saved to /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_1x/test-dev/config.yaml
[32m[06/24 21:17:32 d2.utils.env]: [0mUsing a generated random seed 32973899
[32m[06/24 21:17:37 d2.engine.defaults]: [0mModel:
BoxSeg(
  (teacher): CondInst(
    (backbone): FPN(
      (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (top_block): LastLevelP6P7(
        (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (bottom_up): ResNet(
        (stem): BasicStem(
          (conv1): Conv2d(
            3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
        )
        (res2): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv1): Conv2d(
              64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
        )
        (res3): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv1): Conv2d(
              256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
        )
        (res4): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
            (conv1): Conv2d(
              512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (4): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (5): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
        )
        (res5): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
            (conv1): Conv2d(
              1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
        )
      )
    )
    (proposal_generator): FCOS(
      (fcos_head): FCOSHead(
        (cls_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (bbox_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (share_tower): Sequential()
        (cls_logits): Conv2d(256, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (bbox_pred): Conv2d(256, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (ctrness): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (scales): ModuleList(
          (0): Scale()
          (1): Scale()
          (2): Scale()
          (3): Scale()
          (4): Scale()
        )
      )
      (fcos_outputs): FCOSOutputs(
        (loc_loss_func): IOULoss()
      )
    )
    (mask_head): DynamicMaskHead(
      (MSELoss): MSELoss()
    )
    (mask_branch): MaskBranch(
      (refine): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (tower): Sequential(
        (0): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (3): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (4): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (controller): Conv2d(256, 233, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (student): CondInst(
    (backbone): FPN(
      (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (top_block): LastLevelP6P7(
        (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (bottom_up): ResNet(
        (stem): BasicStem(
          (conv1): Conv2d(
            3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
        )
        (res2): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv1): Conv2d(
              64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
        )
        (res3): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv1): Conv2d(
              256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
        )
        (res4): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
            (conv1): Conv2d(
              512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (4): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (5): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
        )
        (res5): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
            (conv1): Conv2d(
              1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
        )
      )
    )
    (proposal_generator): FCOS(
      (fcos_head): FCOSHead(
        (cls_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (bbox_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (share_tower): Sequential()
        (cls_logits): Conv2d(256, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (bbox_pred): Conv2d(256, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (ctrness): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (scales): ModuleList(
          (0): Scale()
          (1): Scale()
          (2): Scale()
          (3): Scale()
          (4): Scale()
        )
      )
      (fcos_outputs): FCOSOutputs(
        (loc_loss_func): IOULoss()
      )
    )
    (mask_head): DynamicMaskHead(
      (MSELoss): MSELoss()
    )
    (mask_branch): MaskBranch(
      (refine): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (tower): Sequential(
        (0): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (3): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (4): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (controller): Conv2d(256, 233, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[32m[06/24 21:17:37 d2.checkpoint.detection_checkpoint]: [0m[DetectionCheckpointer] Loading from /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_1x/model_final.pth ...
[32m[06/24 21:17:37 fvcore.common.checkpoint]: [0m[Checkpointer] Loading from /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_1x/model_final.pth ...
[32m[06/24 21:17:39 d2.data.build]: [0mDistribution of instances among all 20 categories:
[36m|  category   | #instances   |  category   | #instances   |  category  | #instances   |
|:-----------:|:-------------|:-----------:|:-------------|:----------:|:-------------|
|  aeroplane  | 311          |   bicycle   | 389          |    bird    | 576          |
|    boat     | 393          |   bottle    | 657          |    bus     | 254          |
|     car     | 1541         |     cat     | 370          |   chair    | 1374         |
|     cow     | 329          | diningtable | 299          |    dog     | 530          |
|    horse    | 395          |  motorbike  | 369          |   person   | 5227         |
| pottedplant | 592          |    sheep    | 311          |    sofa    | 396          |
|    train    | 302          |  tvmonitor  | 361          |            |              |
|    total    | 14976        |             |              |            |              |[0m
[32m[06/24 21:17:39 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[06/24 21:17:39 d2.data.common]: [0mSerializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[32m[06/24 21:17:39 d2.data.common]: [0mSerializing 4952 elements to byte tensors and concatenating them all ...
[32m[06/24 21:17:39 d2.data.common]: [0mSerialized dataset takes 2.22 MiB
[32m[06/24 21:17:39 d2.evaluation.evaluator]: [0mStart inference on 4952 batches
[32m[06/24 21:17:40 d2.evaluation.evaluator]: [0mInference done 11/4952. Dataloading: 0.0010 s/iter. Inference: 0.0469 s/iter. Eval: 0.0058 s/iter. Total: 0.0537 s/iter. ETA=0:04:25
[32m[06/24 21:17:45 d2.evaluation.evaluator]: [0mInference done 106/4952. Dataloading: 0.0011 s/iter. Inference: 0.0462 s/iter. Eval: 0.0056 s/iter. Total: 0.0530 s/iter. ETA=0:04:16
[32m[06/24 21:17:50 d2.evaluation.evaluator]: [0mInference done 198/4952. Dataloading: 0.0012 s/iter. Inference: 0.0467 s/iter. Eval: 0.0057 s/iter. Total: 0.0537 s/iter. ETA=0:04:15
[32m[06/24 21:17:55 d2.evaluation.evaluator]: [0mInference done 294/4952. Dataloading: 0.0012 s/iter. Inference: 0.0464 s/iter. Eval: 0.0056 s/iter. Total: 0.0533 s/iter. ETA=0:04:08
[32m[06/24 21:18:00 d2.evaluation.evaluator]: [0mInference done 389/4952. Dataloading: 0.0012 s/iter. Inference: 0.0463 s/iter. Eval: 0.0056 s/iter. Total: 0.0532 s/iter. ETA=0:04:02
[32m[06/24 21:18:05 d2.evaluation.evaluator]: [0mInference done 482/4952. Dataloading: 0.0012 s/iter. Inference: 0.0465 s/iter. Eval: 0.0056 s/iter. Total: 0.0533 s/iter. ETA=0:03:58
[32m[06/24 21:18:10 d2.evaluation.evaluator]: [0mInference done 579/4952. Dataloading: 0.0012 s/iter. Inference: 0.0463 s/iter. Eval: 0.0055 s/iter. Total: 0.0531 s/iter. ETA=0:03:52
[32m[06/24 21:18:15 d2.evaluation.evaluator]: [0mInference done 672/4952. Dataloading: 0.0012 s/iter. Inference: 0.0463 s/iter. Eval: 0.0056 s/iter. Total: 0.0532 s/iter. ETA=0:03:47
[32m[06/24 21:18:20 d2.evaluation.evaluator]: [0mInference done 766/4952. Dataloading: 0.0012 s/iter. Inference: 0.0464 s/iter. Eval: 0.0056 s/iter. Total: 0.0533 s/iter. ETA=0:03:42
[32m[06/24 21:18:25 d2.evaluation.evaluator]: [0mInference done 863/4952. Dataloading: 0.0012 s/iter. Inference: 0.0463 s/iter. Eval: 0.0056 s/iter. Total: 0.0531 s/iter. ETA=0:03:37
[32m[06/24 21:18:30 d2.evaluation.evaluator]: [0mInference done 958/4952. Dataloading: 0.0012 s/iter. Inference: 0.0462 s/iter. Eval: 0.0057 s/iter. Total: 0.0531 s/iter. ETA=0:03:32
[32m[06/24 21:18:35 d2.evaluation.evaluator]: [0mInference done 1054/4952. Dataloading: 0.0012 s/iter. Inference: 0.0462 s/iter. Eval: 0.0056 s/iter. Total: 0.0531 s/iter. ETA=0:03:26
[32m[06/24 21:18:40 d2.evaluation.evaluator]: [0mInference done 1149/4952. Dataloading: 0.0012 s/iter. Inference: 0.0462 s/iter. Eval: 0.0056 s/iter. Total: 0.0531 s/iter. ETA=0:03:21
[32m[06/24 21:18:45 d2.evaluation.evaluator]: [0mInference done 1243/4952. Dataloading: 0.0012 s/iter. Inference: 0.0463 s/iter. Eval: 0.0056 s/iter. Total: 0.0531 s/iter. ETA=0:03:16
[32m[06/24 21:18:50 d2.evaluation.evaluator]: [0mInference done 1334/4952. Dataloading: 0.0012 s/iter. Inference: 0.0464 s/iter. Eval: 0.0057 s/iter. Total: 0.0533 s/iter. ETA=0:03:12
[32m[06/24 21:18:55 d2.evaluation.evaluator]: [0mInference done 1429/4952. Dataloading: 0.0012 s/iter. Inference: 0.0464 s/iter. Eval: 0.0057 s/iter. Total: 0.0533 s/iter. ETA=0:03:07
[32m[06/24 21:19:00 d2.evaluation.evaluator]: [0mInference done 1522/4952. Dataloading: 0.0012 s/iter. Inference: 0.0464 s/iter. Eval: 0.0057 s/iter. Total: 0.0533 s/iter. ETA=0:03:02
[32m[06/24 21:19:05 d2.evaluation.evaluator]: [0mInference done 1614/4952. Dataloading: 0.0012 s/iter. Inference: 0.0464 s/iter. Eval: 0.0057 s/iter. Total: 0.0534 s/iter. ETA=0:02:58
[32m[06/24 21:19:10 d2.evaluation.evaluator]: [0mInference done 1710/4952. Dataloading: 0.0012 s/iter. Inference: 0.0464 s/iter. Eval: 0.0057 s/iter. Total: 0.0533 s/iter. ETA=0:02:52
[32m[06/24 21:19:15 d2.evaluation.evaluator]: [0mInference done 1804/4952. Dataloading: 0.0012 s/iter. Inference: 0.0464 s/iter. Eval: 0.0057 s/iter. Total: 0.0534 s/iter. ETA=0:02:47
[32m[06/24 21:19:20 d2.evaluation.evaluator]: [0mInference done 1897/4952. Dataloading: 0.0012 s/iter. Inference: 0.0464 s/iter. Eval: 0.0057 s/iter. Total: 0.0534 s/iter. ETA=0:02:43
[32m[06/24 21:19:25 d2.evaluation.evaluator]: [0mInference done 1992/4952. Dataloading: 0.0012 s/iter. Inference: 0.0464 s/iter. Eval: 0.0057 s/iter. Total: 0.0534 s/iter. ETA=0:02:37
[32m[06/24 21:19:30 d2.evaluation.evaluator]: [0mInference done 2087/4952. Dataloading: 0.0012 s/iter. Inference: 0.0464 s/iter. Eval: 0.0057 s/iter. Total: 0.0533 s/iter. ETA=0:02:32
[32m[06/24 21:19:35 d2.evaluation.evaluator]: [0mInference done 2181/4952. Dataloading: 0.0012 s/iter. Inference: 0.0463 s/iter. Eval: 0.0057 s/iter. Total: 0.0533 s/iter. ETA=0:02:27
[32m[06/24 21:19:40 d2.evaluation.evaluator]: [0mInference done 2275/4952. Dataloading: 0.0012 s/iter. Inference: 0.0464 s/iter. Eval: 0.0057 s/iter. Total: 0.0533 s/iter. ETA=0:02:22
[32m[06/24 21:19:45 d2.evaluation.evaluator]: [0mInference done 2370/4952. Dataloading: 0.0012 s/iter. Inference: 0.0463 s/iter. Eval: 0.0057 s/iter. Total: 0.0533 s/iter. ETA=0:02:17
[32m[06/24 21:19:51 d2.evaluation.evaluator]: [0mInference done 2464/4952. Dataloading: 0.0012 s/iter. Inference: 0.0463 s/iter. Eval: 0.0057 s/iter. Total: 0.0533 s/iter. ETA=0:02:12
[32m[06/24 21:19:56 d2.evaluation.evaluator]: [0mInference done 2558/4952. Dataloading: 0.0012 s/iter. Inference: 0.0464 s/iter. Eval: 0.0057 s/iter. Total: 0.0533 s/iter. ETA=0:02:07
[32m[06/24 21:20:01 d2.evaluation.evaluator]: [0mInference done 2651/4952. Dataloading: 0.0012 s/iter. Inference: 0.0464 s/iter. Eval: 0.0057 s/iter. Total: 0.0534 s/iter. ETA=0:02:02
[32m[06/24 21:20:06 d2.evaluation.evaluator]: [0mInference done 2745/4952. Dataloading: 0.0012 s/iter. Inference: 0.0464 s/iter. Eval: 0.0057 s/iter. Total: 0.0534 s/iter. ETA=0:01:57
[32m[06/24 21:20:11 d2.evaluation.evaluator]: [0mInference done 2840/4952. Dataloading: 0.0012 s/iter. Inference: 0.0464 s/iter. Eval: 0.0057 s/iter. Total: 0.0534 s/iter. ETA=0:01:52
[32m[06/24 21:20:16 d2.evaluation.evaluator]: [0mInference done 2935/4952. Dataloading: 0.0012 s/iter. Inference: 0.0464 s/iter. Eval: 0.0057 s/iter. Total: 0.0533 s/iter. ETA=0:01:47
[32m[06/24 21:20:21 d2.evaluation.evaluator]: [0mInference done 3031/4952. Dataloading: 0.0012 s/iter. Inference: 0.0463 s/iter. Eval: 0.0057 s/iter. Total: 0.0533 s/iter. ETA=0:01:42
[32m[06/24 21:20:26 d2.evaluation.evaluator]: [0mInference done 3127/4952. Dataloading: 0.0012 s/iter. Inference: 0.0463 s/iter. Eval: 0.0057 s/iter. Total: 0.0533 s/iter. ETA=0:01:37
[32m[06/24 21:20:31 d2.evaluation.evaluator]: [0mInference done 3224/4952. Dataloading: 0.0012 s/iter. Inference: 0.0463 s/iter. Eval: 0.0057 s/iter. Total: 0.0532 s/iter. ETA=0:01:31
[32m[06/24 21:20:36 d2.evaluation.evaluator]: [0mInference done 3321/4952. Dataloading: 0.0012 s/iter. Inference: 0.0463 s/iter. Eval: 0.0057 s/iter. Total: 0.0532 s/iter. ETA=0:01:26
[32m[06/24 21:20:41 d2.evaluation.evaluator]: [0mInference done 3419/4952. Dataloading: 0.0012 s/iter. Inference: 0.0462 s/iter. Eval: 0.0057 s/iter. Total: 0.0531 s/iter. ETA=0:01:21
[32m[06/24 21:20:46 d2.evaluation.evaluator]: [0mInference done 3517/4952. Dataloading: 0.0012 s/iter. Inference: 0.0462 s/iter. Eval: 0.0057 s/iter. Total: 0.0531 s/iter. ETA=0:01:16
[32m[06/24 21:20:51 d2.evaluation.evaluator]: [0mInference done 3613/4952. Dataloading: 0.0012 s/iter. Inference: 0.0462 s/iter. Eval: 0.0057 s/iter. Total: 0.0531 s/iter. ETA=0:01:11
[32m[06/24 21:20:56 d2.evaluation.evaluator]: [0mInference done 3711/4952. Dataloading: 0.0012 s/iter. Inference: 0.0462 s/iter. Eval: 0.0056 s/iter. Total: 0.0530 s/iter. ETA=0:01:05
[32m[06/24 21:21:01 d2.evaluation.evaluator]: [0mInference done 3807/4952. Dataloading: 0.0012 s/iter. Inference: 0.0461 s/iter. Eval: 0.0057 s/iter. Total: 0.0530 s/iter. ETA=0:01:00
[32m[06/24 21:21:06 d2.evaluation.evaluator]: [0mInference done 3903/4952. Dataloading: 0.0012 s/iter. Inference: 0.0461 s/iter. Eval: 0.0057 s/iter. Total: 0.0530 s/iter. ETA=0:00:55
[32m[06/24 21:21:11 d2.evaluation.evaluator]: [0mInference done 4000/4952. Dataloading: 0.0011 s/iter. Inference: 0.0461 s/iter. Eval: 0.0056 s/iter. Total: 0.0530 s/iter. ETA=0:00:50
[32m[06/24 21:21:16 d2.evaluation.evaluator]: [0mInference done 4095/4952. Dataloading: 0.0011 s/iter. Inference: 0.0461 s/iter. Eval: 0.0057 s/iter. Total: 0.0530 s/iter. ETA=0:00:45
[32m[06/24 21:21:21 d2.evaluation.evaluator]: [0mInference done 4193/4952. Dataloading: 0.0011 s/iter. Inference: 0.0461 s/iter. Eval: 0.0057 s/iter. Total: 0.0529 s/iter. ETA=0:00:40
[32m[06/24 21:21:26 d2.evaluation.evaluator]: [0mInference done 4287/4952. Dataloading: 0.0011 s/iter. Inference: 0.0461 s/iter. Eval: 0.0057 s/iter. Total: 0.0529 s/iter. ETA=0:00:35
[32m[06/24 21:21:31 d2.evaluation.evaluator]: [0mInference done 4383/4952. Dataloading: 0.0011 s/iter. Inference: 0.0461 s/iter. Eval: 0.0057 s/iter. Total: 0.0529 s/iter. ETA=0:00:30
[32m[06/24 21:21:36 d2.evaluation.evaluator]: [0mInference done 4480/4952. Dataloading: 0.0011 s/iter. Inference: 0.0461 s/iter. Eval: 0.0057 s/iter. Total: 0.0529 s/iter. ETA=0:00:24
[32m[06/24 21:21:41 d2.evaluation.evaluator]: [0mInference done 4574/4952. Dataloading: 0.0011 s/iter. Inference: 0.0461 s/iter. Eval: 0.0057 s/iter. Total: 0.0529 s/iter. ETA=0:00:19
[32m[06/24 21:21:46 d2.evaluation.evaluator]: [0mInference done 4672/4952. Dataloading: 0.0011 s/iter. Inference: 0.0461 s/iter. Eval: 0.0057 s/iter. Total: 0.0529 s/iter. ETA=0:00:14
[32m[06/24 21:21:51 d2.evaluation.evaluator]: [0mInference done 4768/4952. Dataloading: 0.0011 s/iter. Inference: 0.0460 s/iter. Eval: 0.0057 s/iter. Total: 0.0529 s/iter. ETA=0:00:09
[32m[06/24 21:21:56 d2.evaluation.evaluator]: [0mInference done 4864/4952. Dataloading: 0.0011 s/iter. Inference: 0.0460 s/iter. Eval: 0.0057 s/iter. Total: 0.0529 s/iter. ETA=0:00:04
[32m[06/24 21:22:01 d2.evaluation.evaluator]: [0mTotal inference time: 0:04:21.523473 (0.052865 s / iter per device, on 1 devices)
[32m[06/24 21:22:01 d2.evaluation.evaluator]: [0mTotal inference pure compute time: 0:03:47 (0.046036 s / iter per device, on 1 devices)
[32m[06/24 21:22:01 d2.evaluation.pascal_voc_evaluation]: [0mEvaluating voc_2007_test using 2007 metric. Note that results do not use the official Matlab API.
[32m[06/24 21:23:17 d2.engine.defaults]: [0mEvaluation results for voc_2007_test in csv format:
[32m[06/24 21:23:17 d2.evaluation.testing]: [0mcopypaste: Task: bbox
[32m[06/24 21:23:17 d2.evaluation.testing]: [0mcopypaste: AP,AP50,AP75
[32m[06/24 21:23:17 d2.evaluation.testing]: [0mcopypaste: 57.4654,80.6029,63.3241
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
Command Line Args: Namespace(config_file='/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r50_3x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=4, num_machines=1, opts=['OUTPUT_DIR', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_3x/test-dev', 'MODEL.WEIGHTS', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_3x/model_final.pth'], resume=False)
aaaaa : 4
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67159 [0] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67159 [0] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67159 [0] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67159 [0] NCCL INFO Using network IB
NCCL version 2.10.3+cuda10.2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67162 [3] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67160 [1] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67161 [2] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67162 [3] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67161 [2] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67160 [1] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67162 [3] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67162 [3] NCCL INFO Using network IB
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67160 [1] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67160 [1] NCCL INFO Using network IB
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67161 [2] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67161 [2] NCCL INFO Using network IB
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 00/08 :    0   1   3   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO Trees [0] -1/-1/-1->3->1 [1] 1/-1/-1->3->-1 [2] -1/-1/-1->3->1 [3] 1/-1/-1->3->-1 [4] -1/-1/-1->3->1 [5] 1/-1/-1->3->-1 [6] -1/-1/-1->3->1 [7] 1/-1/-1->3->-1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Trees [0] 3/-1/-1->1->0 [1] 0/-1/-1->1->3 [2] 3/-1/-1->1->0 [3] 0/-1/-1->1->3 [4] 3/-1/-1->1->0 [5] 0/-1/-1->1->3 [6] 3/-1/-1->1->0 [7] 0/-1/-1->1->3
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO Trees [0] 0/-1/-1->2->-1 [1] -1/-1/-1->2->0 [2] 0/-1/-1->2->-1 [3] -1/-1/-1->2->0 [4] 0/-1/-1->2->-1 [5] -1/-1/-1->2->0 [6] 0/-1/-1->2->-1 [7] -1/-1/-1->2->0
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 01/08 :    0   2   3   1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO Setting affinity for GPU 3 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Setting affinity for GPU 1 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 02/08 :    0   2   1   3
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO Setting affinity for GPU 2 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 03/08 :    0   3   1   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 04/08 :    0   1   3   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 05/08 :    0   2   3   1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 06/08 :    0   2   1   3
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 07/08 :    0   3   1   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Trees [0] 1/-1/-1->0->2 [1] 2/-1/-1->0->1 [2] 1/-1/-1->0->2 [3] 2/-1/-1->0->1 [4] 1/-1/-1->0->2 [5] 2/-1/-1->0->1 [6] 1/-1/-1->0->2 [7] 2/-1/-1->0->1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Setting affinity for GPU 0 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Channel 03 : 1[89000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Channel 07 : 1[89000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 00 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO Channel 02 : 3[b2000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO Channel 01 : 2[b1000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 04 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO Channel 06 : 3[b2000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO Channel 05 : 2[b1000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 01 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Channel 00 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO Channel 01 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO Channel 00 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 02 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Channel 02 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO Channel 03 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO Channel 03 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 05 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Channel 04 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO Channel 05 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO Channel 04 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 06 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Channel 06 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO Channel 07 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO Channel 07 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Channel 01 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 03 : 0[88000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO Channel 00 : 3[b2000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO Channel 02 : 2[b1000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Channel 05 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 07 : 0[88000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO Channel 04 : 3[b2000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO Channel 06 : 2[b1000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 01 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 02 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 03 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 05 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 06 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO Channel 00 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO Channel 01 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 07 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO Channel 02 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO Channel 02 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO Channel 04 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO Channel 05 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO Channel 06 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO Channel 06 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Channel 01 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 00 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Channel 03 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 03 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Channel 05 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 04 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Channel 07 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Channel 07 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Channel 00 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Channel 02 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Channel 03 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Channel 04 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Channel 06 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Channel 07 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67160:67703 [1] NCCL INFO comm 0x7fd55c000fa0 rank 1 nranks 4 cudaDev 1 busId 89000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67161:67704 [2] NCCL INFO comm 0x7f37f8000fa0 rank 2 nranks 4 cudaDev 2 busId b1000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67162:67702 [3] NCCL INFO comm 0x7f7684000fa0 rank 3 nranks 4 cudaDev 3 busId b2000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67698 [0] NCCL INFO comm 0x7f9af0000fa0 rank 0 nranks 4 cudaDev 0 busId 88000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:67159:67159 [0] NCCL INFO Launch mode Parallel
Config '/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r50_3x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
Config '/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r50_3x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
Config '/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r50_3x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
Config '/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r50_3x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
[32m[06/24 21:23:27 detectron2]: [0mRank of current process: 0. World size: 4
[32m[06/24 21:23:29 detectron2]: [0mEnvironment info:
-------------------------------  -----------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.12 (default, Nov  1 2021, 17:15:04) [GCC 7.3.0]
numpy                            1.23.4
detectron2                       0.6 @/workspace/detectron2/detectron2
Compiler                         GCC 7.3
CUDA compiler                    CUDA 10.2
detectron2 arch flags            7.0
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          1.10.0+cu102 @/usr/local/python/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1,2,3                      Tesla V100-SXM2-32GB (arch=7.0)
Driver version                   470.182.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.11.0+cu102 @/usr/local/python/lib/python3.8/site-packages/torchvision
torchvision arch flags           3.5, 5.0, 6.0, 7.0, 7.5
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.7.0
-------------------------------  -----------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[32m[06/24 21:23:29 detectron2]: [0mCommand line arguments: Namespace(config_file='/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r50_3x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=4, num_machines=1, opts=['OUTPUT_DIR', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_3x/test-dev', 'MODEL.WEIGHTS', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_3x/model_final.pth'], resume=False)
[32m[06/24 21:23:29 detectron2]: [0mContents of args.config_file=/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r50_3x.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m../Voc-BoxSeg.yaml[39m[38;5;186m"[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m/path/workspace/pretrained_models/detectron2/R-50.pkl[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m

[38;5;15m  [39m[38;5;197mPROTO_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m  [39m[38;5;197mWITH_PROTOTYPE_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m  [39m[38;5;197mUSE_VFL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m

[38;5;15m  [39m[38;5;197mCOPYPASTE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m  [39m[38;5;197mCOPYPASTE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186minstance[39m[38;5;186m"[39m

[38;5;15m  [39m[38;5;197mBOX_TEACHER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_BINARY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m    [39m[38;5;197mTEACHER_WITH_NMS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mDYNAMIC_MASK_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m

[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;242m#  STEPS: (210000, 250000)[39m
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m(36000,[39m[38;5;141m [39m[38;5;141m48000)[39m
[38;5;242m#  MAX_ITER: 270000[39m
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m54000[39m[38;5;15m  [39m[38;5;242m# 17.4 epochs[39m
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/boxseg_r50_3x[39m[38;5;186m"[39m

[32m[06/24 21:23:29 detectron2]: [0mRunning with full config:
[38;5;197mCUDNN_BENCHMARK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mASPECT_RATIO_GROUPING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mFILTER_EMPTY_ANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m  [39m[38;5;197mREPEAT_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mSAMPLER_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrainingSampler[39m
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2000[39m
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mvoc_2007_test[39m
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mvoc_2007_trainval[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mvoc_2012_trainval[39m
[38;5;197mGLOBAL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mHACK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG_EXTRA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mAUG_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mstrong[39m
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCROP_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mrelative_range[39m
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBGR[39m
[38;5;15m  [39m[38;5;197mHFLIP_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mIS_ROTATE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mMASK_FORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mpolygon[39m
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1333[39m
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1333[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m480[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m544[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m576[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m608[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m640[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m672[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m704[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m736[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m768[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mchoice[39m
[38;5;15m  [39m[38;5;197mRANDOM_FLIP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mhorizontal[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mANCHOR_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANGLES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-90[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m90[39m
[38;5;15m    [39m[38;5;197mASPECT_RATIOS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDefaultAnchorGenerator[39m
[38;5;15m    [39m[38;5;197mOFFSET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mSIZES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANTI_ALIAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFREEZE_AT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mbuild_fcos_resnet_fpn_backbone[39m
[38;5;15m  [39m[38;5;197mBASIS_MODULE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANN_SET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mcoco[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;197mLOSS_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mProtoNet[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSyncBN[39m
[38;5;15m    [39m[38;5;197mNUM_BASES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m  [39m[38;5;197mBATEXT[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCANONICAL_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mCUSTOM_DICT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mEVAL_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;197mNUM_CHARS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m25[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mPOOLER_SCALES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.125[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.0625[39m
[38;5;15m    [39m[38;5;197mRECOGNITION_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mctc[39m
[38;5;15m    [39m[38;5;197mRECOGNIZER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mattn[39m
[38;5;15m    [39m[38;5;197mSAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mUSE_AET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_COORDCONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mVOC_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m  [39m[38;5;197mBLENDMASK[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mATTN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mBOTTOM_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m56[39m
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mPOOLER_SCALES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m    [39m[38;5;197mTOP_INTERP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mbilinear[39m
[38;5;15m    [39m[38;5;197mVISUALIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mBOXINST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOTTOM_PIXELS_REMOVED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mPAIRWISE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mCOLOR_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m      [39m[38;5;197mDILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m      [39m[38;5;197mSIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m      [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10000[39m
[38;5;15m  [39m[38;5;197mBOX_TEACHER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mAVG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mDYNAMIC_MASK_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFIX_REDUCTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mIOU_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_BINARY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mMASK_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.999[39m
[38;5;15m    [39m[38;5;197mRESIZE_IMAGES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mRETURN_FLOAT_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mSCORE_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mTEACHER_EVAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mTEACHER_MASK_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mTEACHER_WITH_NMS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_AUG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_TEACHER_INFERENCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10000[39m
[38;5;15m    [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mlinear[39m
[38;5;15m    [39m[38;5;197mWITH_AVG_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mWITH_WARMUP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mBiFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_REPEATS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m160[39m
[38;5;15m  [39m[38;5;197mCONDINST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOTTOM_PIXELS_REMOVED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mMASK_BRANCH[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mCHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m      [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBN[39m
[38;5;15m      [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m      [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m      [39m[38;5;197mSEMANTIC_LOSS_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mMASK_HEAD[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mCHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m      [39m[38;5;197mDISABLE_REL_COORDS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m      [39m[38;5;197mNUM_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m      [39m[38;5;197mUSE_FP16[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mMASK_OUT_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mMAX_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mTOPK_PROPOSALS_PER_IM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m  [39m[38;5;197mCOPYPASTE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mCOPYPASTE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141minstance[39m
[38;5;15m  [39m[38;5;197mDEVICE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mcuda[39m
[38;5;15m  [39m[38;5;197mDLA[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_BODY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDLA34[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m  [39m[38;5;197mFCOS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOX_QUALITY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mctrness[39m
[38;5;15m    [39m[38;5;197mCENTER_SAMPLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mFPN_STRIDES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mLOC_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mgiou[39m
[38;5;15m    [39m[38;5;197mLOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mLOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mLOSS_NORMALIZER_CLS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfg[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT_CLS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNMS_TH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_BOX_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CLS_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_SHARE_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOS_RADIUS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.5[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSIZES_OF_INTEREST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mTHRESH_WITH_CTR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mTOP_LEVELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mUSE_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_RELU[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mUSE_SCALE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mYIELD_BOX_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mYIELD_PROPOSAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mFCPOSE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mATTN_LEN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2737[39m
[38;5;15m    [39m[38;5;197mBASIS_MODULE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mBN_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSyncBN[39m
[38;5;15m      [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m      [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m      [39m[38;5;197mNUM_BASES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m      [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m17[39m
[38;5;15m    [39m[38;5;197mDISTANCE_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12.0[39m
[38;5;15m    [39m[38;5;197mDYNAMIC_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mGT_HEATMAP_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mHEAD_HEATMAP_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mHEATMAP_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.8[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT_DIRECTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m9.0[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT_KEYPOINT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.5[39m
[38;5;15m    [39m[38;5;197mMAX_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m70[39m
[38;5;15m    [39m[38;5;197mPROPOSALS_PER_INST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m70[39m
[38;5;15m    [39m[38;5;197mSIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m  [39m[38;5;197mFCPOSE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFUSE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msum[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m  [39m[38;5;197mKEYPOINT_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mLOAD_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mMEInst[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mAGNOSTIC[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mCENTER_SAMPLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mDIM_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m60[39m
[38;5;15m    [39m[38;5;197mFLAG_PARAMETERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFPN_STRIDES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mGCN_KERNEL_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m9[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mLAST_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mLOC_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mgiou[39m
[38;5;15m    [39m[38;5;197mLOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mLOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mLOSS_ON_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mMASK_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmse[39m
[38;5;15m    [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMASK_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m28[39m
[38;5;15m    [39m[38;5;197mNMS_TH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_BOX_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CLS_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_MASK_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_SHARE_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPATH_COMPONENTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mdatasets/coco/components/coco_2017_train_class_agnosticTrue_whitenTrue_sigmoidTrue_60.npz[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOS_RADIUS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.5[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSIGMOID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mSIZES_OF_INTEREST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mTHRESH_WITH_CTR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mTOP_LEVELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mTYPE_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDCNv1[39m
[38;5;15m    [39m[38;5;197mUSE_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_GCN_IN_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_RELU[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mUSE_SCALE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWHITEN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBoxSeg[39m
[38;5;15m  [39m[38;5;197mMOBILENET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mPANOPTIC_FPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMBINE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m      [39m[38;5;197mINSTANCES_CONFIDENCE_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;197mOVERLAP_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;197mSTUFF_AREA_LIMIT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4096[39m
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m103.53[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m116.28[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m123.675[39m
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mPROPOSAL_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMIN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFCOS[39m
[38;5;15m  [39m[38;5;197mPROTO_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEFORM_INTERVAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEFORM_NUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mRES2_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m  [39m[38;5;197mRETINANET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m&id002[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_LOSS_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mTOPK_CANDIDATES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;197mROI_BOX_CASCADE_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m&id001[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m20.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m20.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m15.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m15.0[39m
[38;5;15m    [39m[38;5;197mIOUS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m  [39m[38;5;197mROI_BOX_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id001[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_BBOX_REG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mFC_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1024[39m
[38;5;15m    [39m[38;5;197mFED_LOSS_FREQ_WEIGHT_POWER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mFED_LOSS_NUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNUM_FC[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mTRAIN_ON_PRED_BOXES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_FED_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_SIGMOID_CE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mRes5ROIHeads[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m20[39m
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mPROPOSAL_APPEND_GT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m  [39m[38;5;197mROI_KEYPOINT_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mMIN_KEYPOINTS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mKRCNNConvDeconvUpsampleHead[39m
[38;5;15m    [39m[38;5;197mNORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mNUM_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m17[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mMaskRCNNConvUpsampleHead[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m  [39m[38;5;197mRPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id002[39m
[38;5;15m    [39m[38;5;197mBOUNDARY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mHEAD_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mStandardRPNHead[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12000[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m255[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSemSegFPNHead[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m54[39m
[38;5;15m  [39m[38;5;197mSOLOV2[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFPN_INSTANCE_STRIDES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mFPN_SCALE_RANGES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m48[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m192[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m384[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m192[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m768[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m384[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m    [39m[38;5;197mINSTANCE_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mINSTANCE_IN_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mINSTANCE_IN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;197mLOSS[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mDICE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3.0[39m
[38;5;15m      [39m[38;5;197mFOCAL_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m      [39m[38;5;197mFOCAL_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m      [39m[38;5;197mFOCAL_USE_SIGMOID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m      [39m[38;5;197mFOCAL_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mMASK_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mMASK_IN_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mMASK_IN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;197mMASK_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMAX_PER_IMG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mNMS_KERNEL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mgaussian[39m
[38;5;15m    [39m[38;5;197mNMS_PRE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m500[39m
[38;5;15m    [39m[38;5;197mNMS_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mNMS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmatrix[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_GRIDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m40[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m36[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m24[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12[39m
[38;5;15m    [39m[38;5;197mNUM_INSTANCE_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_KERNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNUM_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSCORE_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mSIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m    [39m[38;5;197mTYPE_DCN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDCN[39m
[38;5;15m    [39m[38;5;197mUPDATE_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mUSE_COORD_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mUSE_DCN_IN_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mSWIN_TRANSFORMER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mAPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEPTHS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mDROP_PATH_RATE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m    [39m[38;5;197mEMBED_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m    [39m[38;5;197mMLP_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m24[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m    [39m[38;5;197mWINDOW_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m7[39m
[38;5;15m  [39m[38;5;197mTOP_MODULE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mconv[39m
[38;5;15m  [39m[38;5;197mUSE_VFL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mVOVNET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBACKBONE_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mCONV_BODY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mV-39-eSE[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_3x/model_final.pth[39m
[38;5;15m  [39m[38;5;197mWITH_PROTOTYPE_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_3x/test-dev[39m
[38;5;197mSEED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAMP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mBACKBONE_MULTIPLIER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m  [39m[38;5;197mBASE_LR_END[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5000[39m
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mvalue[39m
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mNORM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m  [39m[38;5;197mGAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mWarmupMultiStepLR[39m
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m54000[39m
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m  [39m[38;5;197mNESTEROV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mNUM_DECAYS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m  [39m[38;5;197mOPTIMIZER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSGD[39m
[38;5;15m  [39m[38;5;197mREFERENCE_WORLD_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m  [39m[38;5;197mRESCALE_INTERVAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m36000[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m48000[39m
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.001[39m
[38;5;15m  [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m  [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mlinear[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0001[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mnull[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFLIP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMAX_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4000[39m
[38;5;15m    [39m[38;5;197mMIN_SIZES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m400[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m500[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m600[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m700[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m900[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1100[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m  [39m[38;5;197mDETECTIONS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10000[39m
[38;5;15m  [39m[38;5;197mEXPECTED_RESULTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mKEYPOINT_OKS_SIGMAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mPRECISE_BN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mNUM_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m200[39m
[38;5;197mVERSION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;197mVIS_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m

[32m[06/24 21:23:29 detectron2]: [0mFull config saved to /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_3x/test-dev/config.yaml
[32m[06/24 21:23:29 d2.utils.env]: [0mUsing a generated random seed 29936129
[32m[06/24 21:23:30 d2.engine.defaults]: [0mModel:
BoxSeg(
  (teacher): CondInst(
    (backbone): FPN(
      (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (top_block): LastLevelP6P7(
        (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (bottom_up): ResNet(
        (stem): BasicStem(
          (conv1): Conv2d(
            3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
        )
        (res2): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv1): Conv2d(
              64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
        )
        (res3): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv1): Conv2d(
              256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
        )
        (res4): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
            (conv1): Conv2d(
              512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (4): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (5): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
        )
        (res5): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
            (conv1): Conv2d(
              1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
        )
      )
    )
    (proposal_generator): FCOS(
      (fcos_head): FCOSHead(
        (cls_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (bbox_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (share_tower): Sequential()
        (cls_logits): Conv2d(256, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (bbox_pred): Conv2d(256, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (ctrness): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (scales): ModuleList(
          (0): Scale()
          (1): Scale()
          (2): Scale()
          (3): Scale()
          (4): Scale()
        )
      )
      (fcos_outputs): FCOSOutputs(
        (loc_loss_func): IOULoss()
      )
    )
    (mask_head): DynamicMaskHead(
      (MSELoss): MSELoss()
    )
    (mask_branch): MaskBranch(
      (refine): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (tower): Sequential(
        (0): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (3): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (4): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (controller): Conv2d(256, 233, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (student): CondInst(
    (backbone): FPN(
      (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (top_block): LastLevelP6P7(
        (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (bottom_up): ResNet(
        (stem): BasicStem(
          (conv1): Conv2d(
            3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
        )
        (res2): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv1): Conv2d(
              64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
        )
        (res3): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv1): Conv2d(
              256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
        )
        (res4): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
            (conv1): Conv2d(
              512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (4): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (5): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
        )
        (res5): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
            (conv1): Conv2d(
              1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
        )
      )
    )
    (proposal_generator): FCOS(
      (fcos_head): FCOSHead(
        (cls_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (bbox_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (share_tower): Sequential()
        (cls_logits): Conv2d(256, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (bbox_pred): Conv2d(256, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (ctrness): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (scales): ModuleList(
          (0): Scale()
          (1): Scale()
          (2): Scale()
          (3): Scale()
          (4): Scale()
        )
      )
      (fcos_outputs): FCOSOutputs(
        (loc_loss_func): IOULoss()
      )
    )
    (mask_head): DynamicMaskHead(
      (MSELoss): MSELoss()
    )
    (mask_branch): MaskBranch(
      (refine): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (tower): Sequential(
        (0): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (3): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (4): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (controller): Conv2d(256, 233, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[32m[06/24 21:23:30 d2.checkpoint.detection_checkpoint]: [0m[DetectionCheckpointer] Loading from /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_3x/model_final.pth ...
[32m[06/24 21:23:30 fvcore.common.checkpoint]: [0m[Checkpointer] Loading from /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r50_3x/model_final.pth ...
[32m[06/24 21:23:32 d2.data.build]: [0mDistribution of instances among all 20 categories:
[36m|  category   | #instances   |  category   | #instances   |  category  | #instances   |
|:-----------:|:-------------|:-----------:|:-------------|:----------:|:-------------|
|  aeroplane  | 311          |   bicycle   | 389          |    bird    | 576          |
|    boat     | 393          |   bottle    | 657          |    bus     | 254          |
|     car     | 1541         |     cat     | 370          |   chair    | 1374         |
|     cow     | 329          | diningtable | 299          |    dog     | 530          |
|    horse    | 395          |  motorbike  | 369          |   person   | 5227         |
| pottedplant | 592          |    sheep    | 311          |    sofa    | 396          |
|    train    | 302          |  tvmonitor  | 361          |            |              |
|    total    | 14976        |             |              |            |              |[0m
[32m[06/24 21:23:32 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[06/24 21:23:32 d2.data.common]: [0mSerializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[32m[06/24 21:23:32 d2.data.common]: [0mSerializing 4952 elements to byte tensors and concatenating them all ...
[32m[06/24 21:23:32 d2.data.common]: [0mSerialized dataset takes 2.22 MiB
[32m[06/24 21:23:32 d2.evaluation.evaluator]: [0mStart inference on 1238 batches
[32m[06/24 21:23:36 d2.evaluation.evaluator]: [0mInference done 11/1238. Dataloading: 0.0007 s/iter. Inference: 0.0439 s/iter. Eval: 0.0024 s/iter. Total: 0.0470 s/iter. ETA=0:00:57
[32m[06/24 21:23:41 d2.evaluation.evaluator]: [0mInference done 113/1238. Dataloading: 0.0012 s/iter. Inference: 0.0449 s/iter. Eval: 0.0031 s/iter. Total: 0.0492 s/iter. ETA=0:00:55
[32m[06/24 21:23:46 d2.evaluation.evaluator]: [0mInference done 218/1238. Dataloading: 0.0012 s/iter. Inference: 0.0446 s/iter. Eval: 0.0028 s/iter. Total: 0.0485 s/iter. ETA=0:00:49
[32m[06/24 21:23:51 d2.evaluation.evaluator]: [0mInference done 321/1238. Dataloading: 0.0012 s/iter. Inference: 0.0446 s/iter. Eval: 0.0028 s/iter. Total: 0.0486 s/iter. ETA=0:00:44
[32m[06/24 21:23:56 d2.evaluation.evaluator]: [0mInference done 424/1238. Dataloading: 0.0012 s/iter. Inference: 0.0446 s/iter. Eval: 0.0027 s/iter. Total: 0.0486 s/iter. ETA=0:00:39
[32m[06/24 21:24:01 d2.evaluation.evaluator]: [0mInference done 528/1238. Dataloading: 0.0012 s/iter. Inference: 0.0446 s/iter. Eval: 0.0027 s/iter. Total: 0.0485 s/iter. ETA=0:00:34
[32m[06/24 21:24:06 d2.evaluation.evaluator]: [0mInference done 628/1238. Dataloading: 0.0012 s/iter. Inference: 0.0448 s/iter. Eval: 0.0027 s/iter. Total: 0.0488 s/iter. ETA=0:00:29
[32m[06/24 21:24:12 d2.evaluation.evaluator]: [0mInference done 732/1238. Dataloading: 0.0012 s/iter. Inference: 0.0448 s/iter. Eval: 0.0026 s/iter. Total: 0.0487 s/iter. ETA=0:00:24
[32m[06/24 21:24:17 d2.evaluation.evaluator]: [0mInference done 839/1238. Dataloading: 0.0012 s/iter. Inference: 0.0448 s/iter. Eval: 0.0025 s/iter. Total: 0.0485 s/iter. ETA=0:00:19
[32m[06/24 21:24:22 d2.evaluation.evaluator]: [0mInference done 945/1238. Dataloading: 0.0012 s/iter. Inference: 0.0447 s/iter. Eval: 0.0024 s/iter. Total: 0.0484 s/iter. ETA=0:00:14
[32m[06/24 21:24:27 d2.evaluation.evaluator]: [0mInference done 1050/1238. Dataloading: 0.0012 s/iter. Inference: 0.0447 s/iter. Eval: 0.0023 s/iter. Total: 0.0483 s/iter. ETA=0:00:09
[32m[06/24 21:24:32 d2.evaluation.evaluator]: [0mInference done 1156/1238. Dataloading: 0.0012 s/iter. Inference: 0.0447 s/iter. Eval: 0.0022 s/iter. Total: 0.0482 s/iter. ETA=0:00:03
[32m[06/24 21:24:36 d2.evaluation.evaluator]: [0mTotal inference time: 0:00:59.802748 (0.048502 s / iter per device, on 4 devices)
[32m[06/24 21:24:36 d2.evaluation.evaluator]: [0mTotal inference pure compute time: 0:00:55 (0.044723 s / iter per device, on 4 devices)
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[32m[06/24 21:24:36 d2.evaluation.pascal_voc_evaluation]: [0mEvaluating voc_2007_test using 2007 metric. Note that results do not use the official Matlab API.
[32m[06/24 21:25:14 d2.engine.defaults]: [0mEvaluation results for voc_2007_test in csv format:
[32m[06/24 21:25:14 d2.evaluation.testing]: [0mcopypaste: Task: bbox
[32m[06/24 21:25:14 d2.evaluation.testing]: [0mcopypaste: AP,AP50,AP75
[32m[06/24 21:25:14 d2.evaluation.testing]: [0mcopypaste: 59.7382,81.3630,65.7248
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
Command Line Args: Namespace(config_file='/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r101_3x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=4, num_machines=1, opts=['OUTPUT_DIR', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r101_3x/test-dev', 'MODEL.WEIGHTS', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r101_3x/model_final.pth'], resume=False)
aaaaa : 4
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:71866 [0] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:71866 [0] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:71866 [0] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:71866 [0] NCCL INFO Using network IB
NCCL version 2.10.3+cuda10.2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:71867 [1] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:71867 [1] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:71869 [3] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:71868 [2] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:71869 [3] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:71868 [2] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:71867 [1] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:71867 [1] NCCL INFO Using network IB
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:71868 [2] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:71869 [3] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:71868 [2] NCCL INFO Using network IB
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:71869 [3] NCCL INFO Using network IB
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO Trees [0] 0/-1/-1->2->-1 [1] -1/-1/-1->2->0 [2] 0/-1/-1->2->-1 [3] -1/-1/-1->2->0 [4] 0/-1/-1->2->-1 [5] -1/-1/-1->2->0 [6] 0/-1/-1->2->-1 [7] -1/-1/-1->2->0
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 00/08 :    0   1   3   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Trees [0] 3/-1/-1->1->0 [1] 0/-1/-1->1->3 [2] 3/-1/-1->1->0 [3] 0/-1/-1->1->3 [4] 3/-1/-1->1->0 [5] 0/-1/-1->1->3 [6] 3/-1/-1->1->0 [7] 0/-1/-1->1->3
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO Trees [0] -1/-1/-1->3->1 [1] 1/-1/-1->3->-1 [2] -1/-1/-1->3->1 [3] 1/-1/-1->3->-1 [4] -1/-1/-1->3->1 [5] 1/-1/-1->3->-1 [6] -1/-1/-1->3->1 [7] 1/-1/-1->3->-1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO Setting affinity for GPU 2 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 01/08 :    0   2   3   1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Setting affinity for GPU 1 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO Setting affinity for GPU 3 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 02/08 :    0   2   1   3
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 03/08 :    0   3   1   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 04/08 :    0   1   3   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 05/08 :    0   2   3   1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 06/08 :    0   2   1   3
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 07/08 :    0   3   1   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Trees [0] 1/-1/-1->0->2 [1] 2/-1/-1->0->1 [2] 1/-1/-1->0->2 [3] 2/-1/-1->0->1 [4] 1/-1/-1->0->2 [5] 2/-1/-1->0->1 [6] 1/-1/-1->0->2 [7] 2/-1/-1->0->1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Setting affinity for GPU 0 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO Channel 01 : 2[b1000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO Channel 05 : 2[b1000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Channel 03 : 1[89000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO Channel 02 : 3[b2000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 00 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Channel 07 : 1[89000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO Channel 06 : 3[b2000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 04 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO Channel 00 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO Channel 01 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Channel 00 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 01 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO Channel 03 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO Channel 03 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Channel 02 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 02 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO Channel 04 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO Channel 05 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Channel 04 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 05 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO Channel 07 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO Channel 07 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Channel 06 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 06 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO Channel 00 : 3[b2000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Channel 01 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO Channel 02 : 2[b1000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 03 : 0[88000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO Channel 04 : 3[b2000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Channel 05 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO Channel 06 : 2[b1000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 07 : 0[88000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 01 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 02 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 03 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 05 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO Channel 00 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO Channel 01 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 06 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO Channel 02 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO Channel 02 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 07 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO Channel 04 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO Channel 05 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO Channel 06 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO Channel 06 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Channel 01 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 00 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Channel 03 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 03 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Channel 05 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 04 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Channel 07 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Channel 07 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Channel 00 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Channel 02 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Channel 03 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Channel 04 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Channel 06 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Channel 07 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71867:72414 [1] NCCL INFO comm 0x7ff604000fa0 rank 1 nranks 4 cudaDev 1 busId 89000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:72410 [0] NCCL INFO comm 0x7ff184000fa0 rank 0 nranks 4 cudaDev 0 busId 88000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71868:72416 [2] NCCL INFO comm 0x7f0b08000fa0 rank 2 nranks 4 cudaDev 2 busId b1000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71869:72415 [3] NCCL INFO comm 0x7faa28000fa0 rank 3 nranks 4 cudaDev 3 busId b2000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:71866:71866 [0] NCCL INFO Launch mode Parallel
Config '/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r101_3x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
Config '/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r101_3x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
Config '/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r101_3x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
Config '/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r101_3x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
[32m[06/24 21:25:24 detectron2]: [0mRank of current process: 0. World size: 4
[32m[06/24 21:25:27 detectron2]: [0mEnvironment info:
-------------------------------  -----------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.12 (default, Nov  1 2021, 17:15:04) [GCC 7.3.0]
numpy                            1.23.4
detectron2                       0.6 @/workspace/detectron2/detectron2
Compiler                         GCC 7.3
CUDA compiler                    CUDA 10.2
detectron2 arch flags            7.0
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          1.10.0+cu102 @/usr/local/python/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1,2,3                      Tesla V100-SXM2-32GB (arch=7.0)
Driver version                   470.182.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.11.0+cu102 @/usr/local/python/lib/python3.8/site-packages/torchvision
torchvision arch flags           3.5, 5.0, 6.0, 7.0, 7.5
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.7.0
-------------------------------  -----------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[32m[06/24 21:25:27 detectron2]: [0mCommand line arguments: Namespace(config_file='/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r101_3x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=4, num_machines=1, opts=['OUTPUT_DIR', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r101_3x/test-dev', 'MODEL.WEIGHTS', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r101_3x/model_final.pth'], resume=False)
[32m[06/24 21:25:27 detectron2]: [0mContents of args.config_file=/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r101_3x.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m../Voc-BoxSeg.yaml[39m[38;5;186m"[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m/path/workspace/pretrained_models/detectron2/R-101.pkl[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m101[39m

[38;5;15m  [39m[38;5;197mPROTO_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m  [39m[38;5;197mWITH_PROTOTYPE_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m  [39m[38;5;197mUSE_VFL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m

[38;5;15m  [39m[38;5;197mCOPYPASTE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m  [39m[38;5;197mCOPYPASTE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186minstance[39m[38;5;186m"[39m

[38;5;15m  [39m[38;5;197mBOX_TEACHER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_BINARY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m    [39m[38;5;197mTEACHER_WITH_NMS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mDYNAMIC_MASK_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m

[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;242m#  STEPS: (210000, 250000)[39m
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m(36000,[39m[38;5;141m [39m[38;5;141m48000)[39m
[38;5;242m#  MAX_ITER: 270000[39m
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m54000[39m[38;5;15m  [39m[38;5;242m# 17.4 epochs[39m
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/boxseg_r101_3x[39m[38;5;186m"[39m

[32m[06/24 21:25:27 detectron2]: [0mRunning with full config:
[38;5;197mCUDNN_BENCHMARK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mASPECT_RATIO_GROUPING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mFILTER_EMPTY_ANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m  [39m[38;5;197mREPEAT_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mSAMPLER_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrainingSampler[39m
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2000[39m
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mvoc_2007_test[39m
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mvoc_2007_trainval[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mvoc_2012_trainval[39m
[38;5;197mGLOBAL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mHACK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG_EXTRA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mAUG_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mstrong[39m
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCROP_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mrelative_range[39m
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBGR[39m
[38;5;15m  [39m[38;5;197mHFLIP_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mIS_ROTATE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mMASK_FORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mpolygon[39m
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1333[39m
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1333[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m480[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m544[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m576[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m608[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m640[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m672[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m704[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m736[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m768[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mchoice[39m
[38;5;15m  [39m[38;5;197mRANDOM_FLIP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mhorizontal[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mANCHOR_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANGLES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-90[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m90[39m
[38;5;15m    [39m[38;5;197mASPECT_RATIOS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDefaultAnchorGenerator[39m
[38;5;15m    [39m[38;5;197mOFFSET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mSIZES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANTI_ALIAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFREEZE_AT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mbuild_fcos_resnet_fpn_backbone[39m
[38;5;15m  [39m[38;5;197mBASIS_MODULE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANN_SET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mcoco[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;197mLOSS_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mProtoNet[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSyncBN[39m
[38;5;15m    [39m[38;5;197mNUM_BASES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m  [39m[38;5;197mBATEXT[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCANONICAL_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mCUSTOM_DICT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mEVAL_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;197mNUM_CHARS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m25[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mPOOLER_SCALES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.125[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.0625[39m
[38;5;15m    [39m[38;5;197mRECOGNITION_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mctc[39m
[38;5;15m    [39m[38;5;197mRECOGNIZER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mattn[39m
[38;5;15m    [39m[38;5;197mSAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mUSE_AET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_COORDCONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mVOC_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m  [39m[38;5;197mBLENDMASK[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mATTN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mBOTTOM_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m56[39m
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mPOOLER_SCALES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m    [39m[38;5;197mTOP_INTERP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mbilinear[39m
[38;5;15m    [39m[38;5;197mVISUALIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mBOXINST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOTTOM_PIXELS_REMOVED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mPAIRWISE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mCOLOR_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m      [39m[38;5;197mDILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m      [39m[38;5;197mSIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m      [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10000[39m
[38;5;15m  [39m[38;5;197mBOX_TEACHER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mAVG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mDYNAMIC_MASK_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFIX_REDUCTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mIOU_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_BINARY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mMASK_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.999[39m
[38;5;15m    [39m[38;5;197mRESIZE_IMAGES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mRETURN_FLOAT_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mSCORE_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mTEACHER_EVAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mTEACHER_MASK_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mTEACHER_WITH_NMS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_AUG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_TEACHER_INFERENCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10000[39m
[38;5;15m    [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mlinear[39m
[38;5;15m    [39m[38;5;197mWITH_AVG_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mWITH_WARMUP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mBiFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_REPEATS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m160[39m
[38;5;15m  [39m[38;5;197mCONDINST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOTTOM_PIXELS_REMOVED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mMASK_BRANCH[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mCHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m      [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBN[39m
[38;5;15m      [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m      [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m      [39m[38;5;197mSEMANTIC_LOSS_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mMASK_HEAD[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mCHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m      [39m[38;5;197mDISABLE_REL_COORDS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m      [39m[38;5;197mNUM_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m      [39m[38;5;197mUSE_FP16[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mMASK_OUT_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mMAX_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mTOPK_PROPOSALS_PER_IM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m  [39m[38;5;197mCOPYPASTE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mCOPYPASTE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141minstance[39m
[38;5;15m  [39m[38;5;197mDEVICE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mcuda[39m
[38;5;15m  [39m[38;5;197mDLA[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_BODY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDLA34[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m  [39m[38;5;197mFCOS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOX_QUALITY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mctrness[39m
[38;5;15m    [39m[38;5;197mCENTER_SAMPLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mFPN_STRIDES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mLOC_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mgiou[39m
[38;5;15m    [39m[38;5;197mLOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mLOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mLOSS_NORMALIZER_CLS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfg[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT_CLS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNMS_TH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_BOX_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CLS_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_SHARE_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOS_RADIUS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.5[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSIZES_OF_INTEREST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mTHRESH_WITH_CTR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mTOP_LEVELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mUSE_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_RELU[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mUSE_SCALE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mYIELD_BOX_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mYIELD_PROPOSAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mFCPOSE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mATTN_LEN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2737[39m
[38;5;15m    [39m[38;5;197mBASIS_MODULE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mBN_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSyncBN[39m
[38;5;15m      [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m      [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m      [39m[38;5;197mNUM_BASES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m      [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m17[39m
[38;5;15m    [39m[38;5;197mDISTANCE_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12.0[39m
[38;5;15m    [39m[38;5;197mDYNAMIC_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mGT_HEATMAP_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mHEAD_HEATMAP_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mHEATMAP_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.8[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT_DIRECTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m9.0[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT_KEYPOINT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.5[39m
[38;5;15m    [39m[38;5;197mMAX_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m70[39m
[38;5;15m    [39m[38;5;197mPROPOSALS_PER_INST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m70[39m
[38;5;15m    [39m[38;5;197mSIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m  [39m[38;5;197mFCPOSE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFUSE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msum[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m  [39m[38;5;197mKEYPOINT_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mLOAD_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mMEInst[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mAGNOSTIC[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mCENTER_SAMPLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mDIM_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m60[39m
[38;5;15m    [39m[38;5;197mFLAG_PARAMETERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFPN_STRIDES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mGCN_KERNEL_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m9[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mLAST_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mLOC_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mgiou[39m
[38;5;15m    [39m[38;5;197mLOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mLOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mLOSS_ON_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mMASK_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmse[39m
[38;5;15m    [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMASK_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m28[39m
[38;5;15m    [39m[38;5;197mNMS_TH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_BOX_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CLS_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_MASK_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_SHARE_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPATH_COMPONENTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mdatasets/coco/components/coco_2017_train_class_agnosticTrue_whitenTrue_sigmoidTrue_60.npz[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOS_RADIUS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.5[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSIGMOID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mSIZES_OF_INTEREST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mTHRESH_WITH_CTR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mTOP_LEVELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mTYPE_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDCNv1[39m
[38;5;15m    [39m[38;5;197mUSE_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_GCN_IN_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_RELU[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mUSE_SCALE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWHITEN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBoxSeg[39m
[38;5;15m  [39m[38;5;197mMOBILENET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mPANOPTIC_FPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMBINE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m      [39m[38;5;197mINSTANCES_CONFIDENCE_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;197mOVERLAP_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;197mSTUFF_AREA_LIMIT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4096[39m
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m103.53[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m116.28[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m123.675[39m
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mPROPOSAL_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMIN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFCOS[39m
[38;5;15m  [39m[38;5;197mPROTO_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEFORM_INTERVAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEFORM_NUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m101[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mRES2_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m  [39m[38;5;197mRETINANET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m&id002[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_LOSS_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mTOPK_CANDIDATES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;197mROI_BOX_CASCADE_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m&id001[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m20.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m20.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m15.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m15.0[39m
[38;5;15m    [39m[38;5;197mIOUS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m  [39m[38;5;197mROI_BOX_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id001[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_BBOX_REG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mFC_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1024[39m
[38;5;15m    [39m[38;5;197mFED_LOSS_FREQ_WEIGHT_POWER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mFED_LOSS_NUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNUM_FC[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mTRAIN_ON_PRED_BOXES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_FED_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_SIGMOID_CE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mRes5ROIHeads[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m20[39m
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mPROPOSAL_APPEND_GT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m  [39m[38;5;197mROI_KEYPOINT_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mMIN_KEYPOINTS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mKRCNNConvDeconvUpsampleHead[39m
[38;5;15m    [39m[38;5;197mNORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mNUM_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m17[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mMaskRCNNConvUpsampleHead[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m  [39m[38;5;197mRPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id002[39m
[38;5;15m    [39m[38;5;197mBOUNDARY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mHEAD_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mStandardRPNHead[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12000[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m255[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSemSegFPNHead[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m54[39m
[38;5;15m  [39m[38;5;197mSOLOV2[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFPN_INSTANCE_STRIDES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mFPN_SCALE_RANGES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m48[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m192[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m384[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m192[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m768[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m384[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m    [39m[38;5;197mINSTANCE_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mINSTANCE_IN_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mINSTANCE_IN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;197mLOSS[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mDICE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3.0[39m
[38;5;15m      [39m[38;5;197mFOCAL_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m      [39m[38;5;197mFOCAL_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m      [39m[38;5;197mFOCAL_USE_SIGMOID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m      [39m[38;5;197mFOCAL_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mMASK_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mMASK_IN_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mMASK_IN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;197mMASK_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMAX_PER_IMG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mNMS_KERNEL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mgaussian[39m
[38;5;15m    [39m[38;5;197mNMS_PRE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m500[39m
[38;5;15m    [39m[38;5;197mNMS_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mNMS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmatrix[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_GRIDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m40[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m36[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m24[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12[39m
[38;5;15m    [39m[38;5;197mNUM_INSTANCE_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_KERNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNUM_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSCORE_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mSIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m    [39m[38;5;197mTYPE_DCN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDCN[39m
[38;5;15m    [39m[38;5;197mUPDATE_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mUSE_COORD_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mUSE_DCN_IN_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mSWIN_TRANSFORMER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mAPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEPTHS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mDROP_PATH_RATE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m    [39m[38;5;197mEMBED_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m    [39m[38;5;197mMLP_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m24[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m    [39m[38;5;197mWINDOW_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m7[39m
[38;5;15m  [39m[38;5;197mTOP_MODULE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mconv[39m
[38;5;15m  [39m[38;5;197mUSE_VFL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mVOVNET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBACKBONE_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mCONV_BODY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mV-39-eSE[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r101_3x/model_final.pth[39m
[38;5;15m  [39m[38;5;197mWITH_PROTOTYPE_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r101_3x/test-dev[39m
[38;5;197mSEED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAMP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mBACKBONE_MULTIPLIER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m  [39m[38;5;197mBASE_LR_END[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5000[39m
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mvalue[39m
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mNORM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m  [39m[38;5;197mGAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mWarmupMultiStepLR[39m
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m54000[39m
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m  [39m[38;5;197mNESTEROV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mNUM_DECAYS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m  [39m[38;5;197mOPTIMIZER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSGD[39m
[38;5;15m  [39m[38;5;197mREFERENCE_WORLD_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m  [39m[38;5;197mRESCALE_INTERVAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m36000[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m48000[39m
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.001[39m
[38;5;15m  [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m  [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mlinear[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0001[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mnull[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFLIP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMAX_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4000[39m
[38;5;15m    [39m[38;5;197mMIN_SIZES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m400[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m500[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m600[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m700[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m900[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1100[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m  [39m[38;5;197mDETECTIONS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10000[39m
[38;5;15m  [39m[38;5;197mEXPECTED_RESULTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mKEYPOINT_OKS_SIGMAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mPRECISE_BN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mNUM_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m200[39m
[38;5;197mVERSION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;197mVIS_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m

[32m[06/24 21:25:27 detectron2]: [0mFull config saved to /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r101_3x/test-dev/config.yaml
[32m[06/24 21:25:27 d2.utils.env]: [0mUsing a generated random seed 27532446
[32m[06/24 21:25:29 d2.engine.defaults]: [0mModel:
BoxSeg(
  (teacher): CondInst(
    (backbone): FPN(
      (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (top_block): LastLevelP6P7(
        (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (bottom_up): ResNet(
        (stem): BasicStem(
          (conv1): Conv2d(
            3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
        )
        (res2): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv1): Conv2d(
              64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
        )
        (res3): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv1): Conv2d(
              256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
        )
        (res4): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
            (conv1): Conv2d(
              512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (4): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (5): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (6): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (7): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (8): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (9): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (10): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (11): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (12): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (13): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (14): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (15): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (16): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (17): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (18): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (19): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (20): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (21): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (22): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
        )
        (res5): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
            (conv1): Conv2d(
              1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
        )
      )
    )
    (proposal_generator): FCOS(
      (fcos_head): FCOSHead(
        (cls_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (bbox_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (share_tower): Sequential()
        (cls_logits): Conv2d(256, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (bbox_pred): Conv2d(256, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (ctrness): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (scales): ModuleList(
          (0): Scale()
          (1): Scale()
          (2): Scale()
          (3): Scale()
          (4): Scale()
        )
      )
      (fcos_outputs): FCOSOutputs(
        (loc_loss_func): IOULoss()
      )
    )
    (mask_head): DynamicMaskHead(
      (MSELoss): MSELoss()
    )
    (mask_branch): MaskBranch(
      (refine): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (tower): Sequential(
        (0): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (3): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (4): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (controller): Conv2d(256, 233, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (student): CondInst(
    (backbone): FPN(
      (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (top_block): LastLevelP6P7(
        (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (bottom_up): ResNet(
        (stem): BasicStem(
          (conv1): Conv2d(
            3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
        )
        (res2): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv1): Conv2d(
              64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
        )
        (res3): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv1): Conv2d(
              256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2): Conv2d(
              128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
        )
        (res4): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
            (conv1): Conv2d(
              512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (3): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (4): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (5): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (6): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (7): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (8): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (9): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (10): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (11): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (12): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (13): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (14): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (15): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (16): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (17): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (18): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (19): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (20): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (21): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (22): BottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2): Conv2d(
              256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
        )
        (res5): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
            (conv1): Conv2d(
              1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2): Conv2d(
              512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
        )
      )
    )
    (proposal_generator): FCOS(
      (fcos_head): FCOSHead(
        (cls_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (bbox_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (share_tower): Sequential()
        (cls_logits): Conv2d(256, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (bbox_pred): Conv2d(256, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (ctrness): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (scales): ModuleList(
          (0): Scale()
          (1): Scale()
          (2): Scale()
          (3): Scale()
          (4): Scale()
        )
      )
      (fcos_outputs): FCOSOutputs(
        (loc_loss_func): IOULoss()
      )
    )
    (mask_head): DynamicMaskHead(
      (MSELoss): MSELoss()
    )
    (mask_branch): MaskBranch(
      (refine): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (tower): Sequential(
        (0): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (3): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (4): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (controller): Conv2d(256, 233, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[32m[06/24 21:25:29 d2.checkpoint.detection_checkpoint]: [0m[DetectionCheckpointer] Loading from /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r101_3x/model_final.pth ...
[32m[06/24 21:25:29 fvcore.common.checkpoint]: [0m[Checkpointer] Loading from /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r101_3x/model_final.pth ...
[32m[06/24 21:25:31 d2.data.build]: [0mDistribution of instances among all 20 categories:
[36m|  category   | #instances   |  category   | #instances   |  category  | #instances   |
|:-----------:|:-------------|:-----------:|:-------------|:----------:|:-------------|
|  aeroplane  | 311          |   bicycle   | 389          |    bird    | 576          |
|    boat     | 393          |   bottle    | 657          |    bus     | 254          |
|     car     | 1541         |     cat     | 370          |   chair    | 1374         |
|     cow     | 329          | diningtable | 299          |    dog     | 530          |
|    horse    | 395          |  motorbike  | 369          |   person   | 5227         |
| pottedplant | 592          |    sheep    | 311          |    sofa    | 396          |
|    train    | 302          |  tvmonitor  | 361          |            |              |
|    total    | 14976        |             |              |            |              |[0m
[32m[06/24 21:25:31 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[06/24 21:25:31 d2.data.common]: [0mSerializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[32m[06/24 21:25:31 d2.data.common]: [0mSerializing 4952 elements to byte tensors and concatenating them all ...
[32m[06/24 21:25:31 d2.data.common]: [0mSerialized dataset takes 2.22 MiB
[32m[06/24 21:25:31 d2.evaluation.evaluator]: [0mStart inference on 1238 batches
[32m[06/24 21:25:35 d2.evaluation.evaluator]: [0mInference done 11/1238. Dataloading: 0.0006 s/iter. Inference: 0.0593 s/iter. Eval: 0.0015 s/iter. Total: 0.0614 s/iter. ETA=0:01:15
[32m[06/24 21:25:40 d2.evaluation.evaluator]: [0mInference done 94/1238. Dataloading: 0.0012 s/iter. Inference: 0.0571 s/iter. Eval: 0.0022 s/iter. Total: 0.0606 s/iter. ETA=0:01:09
[32m[06/24 21:25:45 d2.evaluation.evaluator]: [0mInference done 178/1238. Dataloading: 0.0012 s/iter. Inference: 0.0570 s/iter. Eval: 0.0020 s/iter. Total: 0.0602 s/iter. ETA=0:01:03
[32m[06/24 21:25:50 d2.evaluation.evaluator]: [0mInference done 262/1238. Dataloading: 0.0012 s/iter. Inference: 0.0569 s/iter. Eval: 0.0019 s/iter. Total: 0.0601 s/iter. ETA=0:00:58
[32m[06/24 21:25:55 d2.evaluation.evaluator]: [0mInference done 347/1238. Dataloading: 0.0012 s/iter. Inference: 0.0568 s/iter. Eval: 0.0018 s/iter. Total: 0.0599 s/iter. ETA=0:00:53
[32m[06/24 21:26:00 d2.evaluation.evaluator]: [0mInference done 430/1238. Dataloading: 0.0012 s/iter. Inference: 0.0569 s/iter. Eval: 0.0019 s/iter. Total: 0.0600 s/iter. ETA=0:00:48
[32m[06/24 21:26:05 d2.evaluation.evaluator]: [0mInference done 514/1238. Dataloading: 0.0012 s/iter. Inference: 0.0569 s/iter. Eval: 0.0019 s/iter. Total: 0.0601 s/iter. ETA=0:00:43
[32m[06/24 21:26:10 d2.evaluation.evaluator]: [0mInference done 598/1238. Dataloading: 0.0012 s/iter. Inference: 0.0568 s/iter. Eval: 0.0020 s/iter. Total: 0.0601 s/iter. ETA=0:00:38
[32m[06/24 21:26:15 d2.evaluation.evaluator]: [0mInference done 681/1238. Dataloading: 0.0012 s/iter. Inference: 0.0568 s/iter. Eval: 0.0020 s/iter. Total: 0.0601 s/iter. ETA=0:00:33
[32m[06/24 21:26:20 d2.evaluation.evaluator]: [0mInference done 764/1238. Dataloading: 0.0012 s/iter. Inference: 0.0569 s/iter. Eval: 0.0021 s/iter. Total: 0.0602 s/iter. ETA=0:00:28
[32m[06/24 21:26:25 d2.evaluation.evaluator]: [0mInference done 848/1238. Dataloading: 0.0012 s/iter. Inference: 0.0568 s/iter. Eval: 0.0021 s/iter. Total: 0.0601 s/iter. ETA=0:00:23
[32m[06/24 21:26:31 d2.evaluation.evaluator]: [0mInference done 933/1238. Dataloading: 0.0012 s/iter. Inference: 0.0568 s/iter. Eval: 0.0021 s/iter. Total: 0.0601 s/iter. ETA=0:00:18
[32m[06/24 21:26:36 d2.evaluation.evaluator]: [0mInference done 1016/1238. Dataloading: 0.0012 s/iter. Inference: 0.0568 s/iter. Eval: 0.0021 s/iter. Total: 0.0601 s/iter. ETA=0:00:13
[32m[06/24 21:26:41 d2.evaluation.evaluator]: [0mInference done 1100/1238. Dataloading: 0.0012 s/iter. Inference: 0.0568 s/iter. Eval: 0.0020 s/iter. Total: 0.0601 s/iter. ETA=0:00:08
[32m[06/24 21:26:46 d2.evaluation.evaluator]: [0mInference done 1184/1238. Dataloading: 0.0012 s/iter. Inference: 0.0568 s/iter. Eval: 0.0021 s/iter. Total: 0.0601 s/iter. ETA=0:00:03
[32m[06/24 21:26:49 d2.evaluation.evaluator]: [0mTotal inference time: 0:01:14.472168 (0.060399 s / iter per device, on 4 devices)
[32m[06/24 21:26:49 d2.evaluation.evaluator]: [0mTotal inference pure compute time: 0:01:10 (0.056772 s / iter per device, on 4 devices)
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[32m[06/24 21:26:50 d2.evaluation.pascal_voc_evaluation]: [0mEvaluating voc_2007_test using 2007 metric. Note that results do not use the official Matlab API.
[32m[06/24 21:27:24 d2.engine.defaults]: [0mEvaluation results for voc_2007_test in csv format:
[32m[06/24 21:27:24 d2.evaluation.testing]: [0mcopypaste: Task: bbox
[32m[06/24 21:27:24 d2.evaluation.testing]: [0mcopypaste: AP,AP50,AP75
[32m[06/24 21:27:24 d2.evaluation.testing]: [0mcopypaste: 61.4591,82.3586,67.7438
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
Command Line Args: Namespace(config_file='/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r101_dcn_3x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=4, num_machines=1, opts=['OUTPUT_DIR', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r101_dcn_3x/test-dev', 'MODEL.WEIGHTS', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r101_dcn_3x/model_final.pth'], resume=False)
aaaaa : 4
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:76583 [0] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:76583 [0] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:76583 [0] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:76583 [0] NCCL INFO Using network IB
NCCL version 2.10.3+cuda10.2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:76586 [3] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:76584 [1] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:76586 [3] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:76584 [1] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:76586 [3] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:76584 [1] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:76586 [3] NCCL INFO Using network IB
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:76584 [1] NCCL INFO Using network IB
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:76585 [2] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:76585 [2] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:76585 [2] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:76585 [2] NCCL INFO Using network IB
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Trees [0] 3/-1/-1->1->0 [1] 0/-1/-1->1->3 [2] 3/-1/-1->1->0 [3] 0/-1/-1->1->3 [4] 3/-1/-1->1->0 [5] 0/-1/-1->1->3 [6] 3/-1/-1->1->0 [7] 0/-1/-1->1->3
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO Trees [0] 0/-1/-1->2->-1 [1] -1/-1/-1->2->0 [2] 0/-1/-1->2->-1 [3] -1/-1/-1->2->0 [4] 0/-1/-1->2->-1 [5] -1/-1/-1->2->0 [6] 0/-1/-1->2->-1 [7] -1/-1/-1->2->0
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 00/08 :    0   1   3   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Setting affinity for GPU 1 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO Trees [0] -1/-1/-1->3->1 [1] 1/-1/-1->3->-1 [2] -1/-1/-1->3->1 [3] 1/-1/-1->3->-1 [4] -1/-1/-1->3->1 [5] 1/-1/-1->3->-1 [6] -1/-1/-1->3->1 [7] 1/-1/-1->3->-1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO Setting affinity for GPU 2 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 01/08 :    0   2   3   1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 02/08 :    0   2   1   3
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO Setting affinity for GPU 3 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 03/08 :    0   3   1   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 04/08 :    0   1   3   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 05/08 :    0   2   3   1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 06/08 :    0   2   1   3
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 07/08 :    0   3   1   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Trees [0] 1/-1/-1->0->2 [1] 2/-1/-1->0->1 [2] 1/-1/-1->0->2 [3] 2/-1/-1->0->1 [4] 1/-1/-1->0->2 [5] 2/-1/-1->0->1 [6] 1/-1/-1->0->2 [7] 2/-1/-1->0->1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Setting affinity for GPU 0 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO Channel 01 : 2[b1000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO Channel 05 : 2[b1000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Channel 03 : 1[89000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 00 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Channel 07 : 1[89000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO Channel 02 : 3[b2000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 04 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO Channel 06 : 3[b2000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Channel 00 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO Channel 00 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 01 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO Channel 01 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Channel 02 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO Channel 03 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 02 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO Channel 03 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Channel 04 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO Channel 04 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 05 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO Channel 05 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Channel 06 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO Channel 07 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 06 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO Channel 07 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO Channel 02 : 2[b1000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 03 : 0[88000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Channel 01 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO Channel 00 : 3[b2000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO Channel 06 : 2[b1000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 07 : 0[88000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Channel 05 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO Channel 04 : 3[b2000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 01 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 02 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 03 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 05 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 06 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO Channel 01 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO Channel 00 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 07 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO Channel 02 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO Channel 02 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO Channel 05 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO Channel 04 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO Channel 06 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO Channel 06 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Channel 01 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 00 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Channel 03 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 03 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Channel 05 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 04 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Channel 07 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Channel 07 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Channel 00 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Channel 02 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Channel 03 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Channel 04 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Channel 06 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Channel 07 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76586:77135 [3] NCCL INFO comm 0x7efc08000fa0 rank 3 nranks 4 cudaDev 3 busId b2000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:77132 [0] NCCL INFO comm 0x7fd9ec000fa0 rank 0 nranks 4 cudaDev 0 busId 88000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76585:77138 [2] NCCL INFO comm 0x7f20c4000fa0 rank 2 nranks 4 cudaDev 2 busId b1000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76584:77136 [1] NCCL INFO comm 0x7ff178000fa0 rank 1 nranks 4 cudaDev 1 busId 89000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:76583:76583 [0] NCCL INFO Launch mode Parallel
Config '/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r101_dcn_3x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
Config '/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r101_dcn_3x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
Config '/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r101_dcn_3x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
Config '/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r101_dcn_3x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
[32m[06/24 21:27:33 detectron2]: [0mRank of current process: 0. World size: 4
[32m[06/24 21:27:35 detectron2]: [0mEnvironment info:
-------------------------------  -----------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.12 (default, Nov  1 2021, 17:15:04) [GCC 7.3.0]
numpy                            1.23.4
detectron2                       0.6 @/workspace/detectron2/detectron2
Compiler                         GCC 7.3
CUDA compiler                    CUDA 10.2
detectron2 arch flags            7.0
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          1.10.0+cu102 @/usr/local/python/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1,2,3                      Tesla V100-SXM2-32GB (arch=7.0)
Driver version                   470.182.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.11.0+cu102 @/usr/local/python/lib/python3.8/site-packages/torchvision
torchvision arch flags           3.5, 5.0, 6.0, 7.0, 7.5
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.7.0
-------------------------------  -----------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[32m[06/24 21:27:35 detectron2]: [0mCommand line arguments: Namespace(config_file='/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r101_dcn_3x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=4, num_machines=1, opts=['OUTPUT_DIR', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r101_dcn_3x/test-dev', 'MODEL.WEIGHTS', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r101_dcn_3x/model_final.pth'], resume=False)
[32m[06/24 21:27:35 detectron2]: [0mContents of args.config_file=/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_r101_dcn_3x.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m../Voc-BoxSeg.yaml[39m[38;5;186m"[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m/path/workspace/pretrained_models/detectron2/R-101.pkl[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m101[39m
[38;5;15m    [39m[38;5;197mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15mFalse[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mTrue[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mTrue[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15mTrue[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m

[38;5;15m  [39m[38;5;197mPROTO_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m  [39m[38;5;197mWITH_PROTOTYPE_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m  [39m[38;5;197mUSE_VFL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m

[38;5;15m  [39m[38;5;197mCOPYPASTE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m  [39m[38;5;197mCOPYPASTE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186minstance[39m[38;5;186m"[39m

[38;5;15m  [39m[38;5;197mBOX_TEACHER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_BINARY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m    [39m[38;5;197mTEACHER_WITH_NMS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mDYNAMIC_MASK_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m

[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;242m#  STEPS: (210000, 250000)[39m
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m(36000,[39m[38;5;141m [39m[38;5;141m48000)[39m
[38;5;242m#  MAX_ITER: 270000[39m
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m54000[39m[38;5;15m  [39m[38;5;242m# 17.4 epochs[39m
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/boxseg_r101_DCN_3x[39m[38;5;186m"[39m

[32m[06/24 21:27:35 detectron2]: [0mRunning with full config:
[38;5;197mCUDNN_BENCHMARK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mASPECT_RATIO_GROUPING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mFILTER_EMPTY_ANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m  [39m[38;5;197mREPEAT_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mSAMPLER_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrainingSampler[39m
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2000[39m
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mvoc_2007_test[39m
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mvoc_2007_trainval[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mvoc_2012_trainval[39m
[38;5;197mGLOBAL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mHACK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG_EXTRA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mAUG_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mstrong[39m
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCROP_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mrelative_range[39m
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBGR[39m
[38;5;15m  [39m[38;5;197mHFLIP_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mIS_ROTATE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mMASK_FORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mpolygon[39m
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1333[39m
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1333[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m480[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m544[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m576[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m608[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m640[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m672[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m704[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m736[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m768[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mchoice[39m
[38;5;15m  [39m[38;5;197mRANDOM_FLIP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mhorizontal[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mANCHOR_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANGLES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-90[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m90[39m
[38;5;15m    [39m[38;5;197mASPECT_RATIOS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDefaultAnchorGenerator[39m
[38;5;15m    [39m[38;5;197mOFFSET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mSIZES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANTI_ALIAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFREEZE_AT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mbuild_fcos_resnet_fpn_backbone[39m
[38;5;15m  [39m[38;5;197mBASIS_MODULE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANN_SET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mcoco[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;197mLOSS_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mProtoNet[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSyncBN[39m
[38;5;15m    [39m[38;5;197mNUM_BASES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m  [39m[38;5;197mBATEXT[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCANONICAL_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mCUSTOM_DICT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mEVAL_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;197mNUM_CHARS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m25[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mPOOLER_SCALES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.125[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.0625[39m
[38;5;15m    [39m[38;5;197mRECOGNITION_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mctc[39m
[38;5;15m    [39m[38;5;197mRECOGNIZER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mattn[39m
[38;5;15m    [39m[38;5;197mSAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mUSE_AET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_COORDCONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mVOC_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m  [39m[38;5;197mBLENDMASK[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mATTN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mBOTTOM_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m56[39m
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mPOOLER_SCALES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m    [39m[38;5;197mTOP_INTERP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mbilinear[39m
[38;5;15m    [39m[38;5;197mVISUALIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mBOXINST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOTTOM_PIXELS_REMOVED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mPAIRWISE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mCOLOR_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m      [39m[38;5;197mDILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m      [39m[38;5;197mSIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m      [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10000[39m
[38;5;15m  [39m[38;5;197mBOX_TEACHER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mAVG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mDYNAMIC_MASK_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFIX_REDUCTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mIOU_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_BINARY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mMASK_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.999[39m
[38;5;15m    [39m[38;5;197mRESIZE_IMAGES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mRETURN_FLOAT_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mSCORE_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mTEACHER_EVAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mTEACHER_MASK_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mTEACHER_WITH_NMS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_AUG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_TEACHER_INFERENCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10000[39m
[38;5;15m    [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mlinear[39m
[38;5;15m    [39m[38;5;197mWITH_AVG_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mWITH_WARMUP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mBiFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_REPEATS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m160[39m
[38;5;15m  [39m[38;5;197mCONDINST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOTTOM_PIXELS_REMOVED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mMASK_BRANCH[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mCHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m      [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBN[39m
[38;5;15m      [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m      [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m      [39m[38;5;197mSEMANTIC_LOSS_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mMASK_HEAD[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mCHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m      [39m[38;5;197mDISABLE_REL_COORDS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m      [39m[38;5;197mNUM_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m      [39m[38;5;197mUSE_FP16[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mMASK_OUT_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mMAX_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mTOPK_PROPOSALS_PER_IM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m  [39m[38;5;197mCOPYPASTE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mCOPYPASTE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141minstance[39m
[38;5;15m  [39m[38;5;197mDEVICE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mcuda[39m
[38;5;15m  [39m[38;5;197mDLA[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_BODY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDLA34[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m  [39m[38;5;197mFCOS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOX_QUALITY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mctrness[39m
[38;5;15m    [39m[38;5;197mCENTER_SAMPLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mFPN_STRIDES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mLOC_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mgiou[39m
[38;5;15m    [39m[38;5;197mLOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mLOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mLOSS_NORMALIZER_CLS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfg[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT_CLS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNMS_TH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_BOX_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CLS_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_SHARE_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOS_RADIUS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.5[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSIZES_OF_INTEREST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mTHRESH_WITH_CTR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mTOP_LEVELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mUSE_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_RELU[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mUSE_SCALE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mYIELD_BOX_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mYIELD_PROPOSAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mFCPOSE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mATTN_LEN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2737[39m
[38;5;15m    [39m[38;5;197mBASIS_MODULE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mBN_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSyncBN[39m
[38;5;15m      [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m      [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m      [39m[38;5;197mNUM_BASES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m      [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m17[39m
[38;5;15m    [39m[38;5;197mDISTANCE_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12.0[39m
[38;5;15m    [39m[38;5;197mDYNAMIC_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mGT_HEATMAP_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mHEAD_HEATMAP_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mHEATMAP_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.8[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT_DIRECTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m9.0[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT_KEYPOINT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.5[39m
[38;5;15m    [39m[38;5;197mMAX_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m70[39m
[38;5;15m    [39m[38;5;197mPROPOSALS_PER_INST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m70[39m
[38;5;15m    [39m[38;5;197mSIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m  [39m[38;5;197mFCPOSE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFUSE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msum[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m  [39m[38;5;197mKEYPOINT_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mLOAD_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mMEInst[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mAGNOSTIC[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mCENTER_SAMPLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mDIM_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m60[39m
[38;5;15m    [39m[38;5;197mFLAG_PARAMETERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFPN_STRIDES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mGCN_KERNEL_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m9[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mLAST_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mLOC_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mgiou[39m
[38;5;15m    [39m[38;5;197mLOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mLOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mLOSS_ON_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mMASK_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmse[39m
[38;5;15m    [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMASK_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m28[39m
[38;5;15m    [39m[38;5;197mNMS_TH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_BOX_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CLS_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_MASK_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_SHARE_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPATH_COMPONENTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mdatasets/coco/components/coco_2017_train_class_agnosticTrue_whitenTrue_sigmoidTrue_60.npz[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOS_RADIUS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.5[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSIGMOID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mSIZES_OF_INTEREST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mTHRESH_WITH_CTR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mTOP_LEVELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mTYPE_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDCNv1[39m
[38;5;15m    [39m[38;5;197mUSE_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_GCN_IN_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_RELU[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mUSE_SCALE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWHITEN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBoxSeg[39m
[38;5;15m  [39m[38;5;197mMOBILENET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mPANOPTIC_FPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMBINE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m      [39m[38;5;197mINSTANCES_CONFIDENCE_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;197mOVERLAP_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;197mSTUFF_AREA_LIMIT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4096[39m
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m103.53[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m116.28[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m123.675[39m
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mPROPOSAL_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMIN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFCOS[39m
[38;5;15m  [39m[38;5;197mPROTO_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEFORM_INTERVAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mDEFORM_NUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m101[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mRES2_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m  [39m[38;5;197mRETINANET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m&id002[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_LOSS_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mTOPK_CANDIDATES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;197mROI_BOX_CASCADE_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m&id001[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m20.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m20.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m15.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m15.0[39m
[38;5;15m    [39m[38;5;197mIOUS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m  [39m[38;5;197mROI_BOX_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id001[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_BBOX_REG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mFC_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1024[39m
[38;5;15m    [39m[38;5;197mFED_LOSS_FREQ_WEIGHT_POWER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mFED_LOSS_NUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNUM_FC[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mTRAIN_ON_PRED_BOXES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_FED_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_SIGMOID_CE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mRes5ROIHeads[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m20[39m
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mPROPOSAL_APPEND_GT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m  [39m[38;5;197mROI_KEYPOINT_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mMIN_KEYPOINTS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mKRCNNConvDeconvUpsampleHead[39m
[38;5;15m    [39m[38;5;197mNORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mNUM_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m17[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mMaskRCNNConvUpsampleHead[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m  [39m[38;5;197mRPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id002[39m
[38;5;15m    [39m[38;5;197mBOUNDARY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mHEAD_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mStandardRPNHead[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12000[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m255[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSemSegFPNHead[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m54[39m
[38;5;15m  [39m[38;5;197mSOLOV2[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFPN_INSTANCE_STRIDES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mFPN_SCALE_RANGES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m48[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m192[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m384[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m192[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m768[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m384[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m    [39m[38;5;197mINSTANCE_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mINSTANCE_IN_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mINSTANCE_IN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;197mLOSS[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mDICE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3.0[39m
[38;5;15m      [39m[38;5;197mFOCAL_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m      [39m[38;5;197mFOCAL_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m      [39m[38;5;197mFOCAL_USE_SIGMOID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m      [39m[38;5;197mFOCAL_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mMASK_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mMASK_IN_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mMASK_IN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;197mMASK_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMAX_PER_IMG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mNMS_KERNEL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mgaussian[39m
[38;5;15m    [39m[38;5;197mNMS_PRE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m500[39m
[38;5;15m    [39m[38;5;197mNMS_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mNMS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmatrix[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_GRIDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m40[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m36[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m24[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12[39m
[38;5;15m    [39m[38;5;197mNUM_INSTANCE_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_KERNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNUM_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSCORE_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mSIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m    [39m[38;5;197mTYPE_DCN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDCN[39m
[38;5;15m    [39m[38;5;197mUPDATE_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mUSE_COORD_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mUSE_DCN_IN_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mSWIN_TRANSFORMER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mAPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEPTHS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mDROP_PATH_RATE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m    [39m[38;5;197mEMBED_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m    [39m[38;5;197mMLP_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m24[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m    [39m[38;5;197mWINDOW_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m7[39m
[38;5;15m  [39m[38;5;197mTOP_MODULE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mconv[39m
[38;5;15m  [39m[38;5;197mUSE_VFL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mVOVNET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBACKBONE_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mCONV_BODY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mV-39-eSE[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r101_dcn_3x/model_final.pth[39m
[38;5;15m  [39m[38;5;197mWITH_PROTOTYPE_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r101_dcn_3x/test-dev[39m
[38;5;197mSEED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAMP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mBACKBONE_MULTIPLIER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m  [39m[38;5;197mBASE_LR_END[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5000[39m
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mvalue[39m
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mNORM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m  [39m[38;5;197mGAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mWarmupMultiStepLR[39m
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m54000[39m
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m  [39m[38;5;197mNESTEROV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mNUM_DECAYS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m  [39m[38;5;197mOPTIMIZER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSGD[39m
[38;5;15m  [39m[38;5;197mREFERENCE_WORLD_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m  [39m[38;5;197mRESCALE_INTERVAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m36000[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m48000[39m
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.001[39m
[38;5;15m  [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m  [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mlinear[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0001[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mnull[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFLIP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMAX_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4000[39m
[38;5;15m    [39m[38;5;197mMIN_SIZES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m400[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m500[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m600[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m700[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m900[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1100[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m  [39m[38;5;197mDETECTIONS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10000[39m
[38;5;15m  [39m[38;5;197mEXPECTED_RESULTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mKEYPOINT_OKS_SIGMAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mPRECISE_BN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mNUM_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m200[39m
[38;5;197mVERSION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;197mVIS_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m

[32m[06/24 21:27:36 detectron2]: [0mFull config saved to /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r101_dcn_3x/test-dev/config.yaml
[32m[06/24 21:27:36 d2.utils.env]: [0mUsing a generated random seed 36442535
[32m[06/24 21:27:38 d2.engine.defaults]: [0mModel:
BoxSeg(
  (teacher): CondInst(
    (backbone): FPN(
      (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (top_block): LastLevelP6P7(
        (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (bottom_up): ResNet(
        (stem): BasicStem(
          (conv1): Conv2d(
            3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
        )
        (res2): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv1): Conv2d(
              64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
        )
        (res3): Sequential(
          (0): DeformBottleneckBlock(
            (shortcut): Conv2d(
              256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv1): Conv2d(
              256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2_offset): Conv2d(128, 27, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=128, out_channels=128, kernel_size=(3, 3), stride=2, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (1): DeformBottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2_offset): Conv2d(128, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=128, out_channels=128, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (2): DeformBottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2_offset): Conv2d(128, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=128, out_channels=128, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (3): DeformBottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2_offset): Conv2d(128, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=128, out_channels=128, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
        )
        (res4): Sequential(
          (0): DeformBottleneckBlock(
            (shortcut): Conv2d(
              512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
            (conv1): Conv2d(
              512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=2, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (1): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (2): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (3): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (4): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (5): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (6): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (7): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (8): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (9): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (10): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (11): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (12): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (13): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (14): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (15): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (16): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (17): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (18): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (19): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (20): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (21): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (22): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
        )
        (res5): Sequential(
          (0): DeformBottleneckBlock(
            (shortcut): Conv2d(
              1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
            (conv1): Conv2d(
              1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=512, out_channels=512, kernel_size=(3, 3), stride=2, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (1): DeformBottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=512, out_channels=512, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (2): DeformBottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=512, out_channels=512, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
        )
      )
    )
    (proposal_generator): FCOS(
      (fcos_head): FCOSHead(
        (cls_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (bbox_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (share_tower): Sequential()
        (cls_logits): Conv2d(256, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (bbox_pred): Conv2d(256, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (ctrness): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (scales): ModuleList(
          (0): Scale()
          (1): Scale()
          (2): Scale()
          (3): Scale()
          (4): Scale()
        )
      )
      (fcos_outputs): FCOSOutputs(
        (loc_loss_func): IOULoss()
      )
    )
    (mask_head): DynamicMaskHead(
      (MSELoss): MSELoss()
    )
    (mask_branch): MaskBranch(
      (refine): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (tower): Sequential(
        (0): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (3): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (4): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (controller): Conv2d(256, 233, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (student): CondInst(
    (backbone): FPN(
      (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (top_block): LastLevelP6P7(
        (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (bottom_up): ResNet(
        (stem): BasicStem(
          (conv1): Conv2d(
            3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
        )
        (res2): Sequential(
          (0): BottleneckBlock(
            (shortcut): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv1): Conv2d(
              64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (1): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
          (2): BottleneckBlock(
            (conv1): Conv2d(
              256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv2): Conv2d(
              64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
            )
            (conv3): Conv2d(
              64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
          )
        )
        (res3): Sequential(
          (0): DeformBottleneckBlock(
            (shortcut): Conv2d(
              256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv1): Conv2d(
              256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2_offset): Conv2d(128, 27, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=128, out_channels=128, kernel_size=(3, 3), stride=2, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (1): DeformBottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2_offset): Conv2d(128, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=128, out_channels=128, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (2): DeformBottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2_offset): Conv2d(128, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=128, out_channels=128, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
          (3): DeformBottleneckBlock(
            (conv1): Conv2d(
              512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv2_offset): Conv2d(128, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=128, out_channels=128, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
            )
            (conv3): Conv2d(
              128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
          )
        )
        (res4): Sequential(
          (0): DeformBottleneckBlock(
            (shortcut): Conv2d(
              512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
            (conv1): Conv2d(
              512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=2, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (1): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (2): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (3): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (4): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (5): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (6): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (7): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (8): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (9): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (10): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (11): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (12): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (13): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (14): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (15): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (16): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (17): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (18): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (19): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (20): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (21): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
          (22): DeformBottleneckBlock(
            (conv1): Conv2d(
              1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv2_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=256, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
            )
            (conv3): Conv2d(
              256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
            )
          )
        )
        (res5): Sequential(
          (0): DeformBottleneckBlock(
            (shortcut): Conv2d(
              1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
            (conv1): Conv2d(
              1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=512, out_channels=512, kernel_size=(3, 3), stride=2, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (1): DeformBottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=512, out_channels=512, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
          (2): DeformBottleneckBlock(
            (conv1): Conv2d(
              2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv2_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): ModulatedDeformConv(
              in_channels=512, out_channels=512, kernel_size=(3, 3), stride=1, padding=1, dilation=1, groups=1, deformable_groups=1, bias=False
              (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
            )
            (conv3): Conv2d(
              512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
            )
          )
        )
      )
    )
    (proposal_generator): FCOS(
      (fcos_head): FCOSHead(
        (cls_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (bbox_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (share_tower): Sequential()
        (cls_logits): Conv2d(256, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (bbox_pred): Conv2d(256, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (ctrness): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (scales): ModuleList(
          (0): Scale()
          (1): Scale()
          (2): Scale()
          (3): Scale()
          (4): Scale()
        )
      )
      (fcos_outputs): FCOSOutputs(
        (loc_loss_func): IOULoss()
      )
    )
    (mask_head): DynamicMaskHead(
      (MSELoss): MSELoss()
    )
    (mask_branch): MaskBranch(
      (refine): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (tower): Sequential(
        (0): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (3): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (4): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (controller): Conv2d(256, 233, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[32m[06/24 21:27:38 d2.checkpoint.detection_checkpoint]: [0m[DetectionCheckpointer] Loading from /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r101_dcn_3x/model_final.pth ...
[32m[06/24 21:27:38 fvcore.common.checkpoint]: [0m[Checkpointer] Loading from /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_r101_dcn_3x/model_final.pth ...
[32m[06/24 21:27:40 d2.data.build]: [0mDistribution of instances among all 20 categories:
[36m|  category   | #instances   |  category   | #instances   |  category  | #instances   |
|:-----------:|:-------------|:-----------:|:-------------|:----------:|:-------------|
|  aeroplane  | 311          |   bicycle   | 389          |    bird    | 576          |
|    boat     | 393          |   bottle    | 657          |    bus     | 254          |
|     car     | 1541         |     cat     | 370          |   chair    | 1374         |
|     cow     | 329          | diningtable | 299          |    dog     | 530          |
|    horse    | 395          |  motorbike  | 369          |   person   | 5227         |
| pottedplant | 592          |    sheep    | 311          |    sofa    | 396          |
|    train    | 302          |  tvmonitor  | 361          |            |              |
|    total    | 14976        |             |              |            |              |[0m
[32m[06/24 21:27:40 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[06/24 21:27:40 d2.data.common]: [0mSerializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[32m[06/24 21:27:40 d2.data.common]: [0mSerializing 4952 elements to byte tensors and concatenating them all ...
[32m[06/24 21:27:40 d2.data.common]: [0mSerialized dataset takes 2.22 MiB
[32m[06/24 21:27:40 d2.evaluation.evaluator]: [0mStart inference on 1238 batches
[32m[06/24 21:27:45 d2.evaluation.evaluator]: [0mInference done 11/1238. Dataloading: 0.0009 s/iter. Inference: 0.0678 s/iter. Eval: 0.0014 s/iter. Total: 0.0701 s/iter. ETA=0:01:25
[32m[06/24 21:27:50 d2.evaluation.evaluator]: [0mInference done 80/1238. Dataloading: 0.0012 s/iter. Inference: 0.0690 s/iter. Eval: 0.0023 s/iter. Total: 0.0725 s/iter. ETA=0:01:23
[32m[06/24 21:27:55 d2.evaluation.evaluator]: [0mInference done 150/1238. Dataloading: 0.0012 s/iter. Inference: 0.0687 s/iter. Eval: 0.0022 s/iter. Total: 0.0721 s/iter. ETA=0:01:18
[32m[06/24 21:28:00 d2.evaluation.evaluator]: [0mInference done 221/1238. Dataloading: 0.0012 s/iter. Inference: 0.0684 s/iter. Eval: 0.0020 s/iter. Total: 0.0717 s/iter. ETA=0:01:12
[32m[06/24 21:28:05 d2.evaluation.evaluator]: [0mInference done 291/1238. Dataloading: 0.0012 s/iter. Inference: 0.0684 s/iter. Eval: 0.0020 s/iter. Total: 0.0716 s/iter. ETA=0:01:07
[32m[06/24 21:28:10 d2.evaluation.evaluator]: [0mInference done 361/1238. Dataloading: 0.0012 s/iter. Inference: 0.0685 s/iter. Eval: 0.0019 s/iter. Total: 0.0716 s/iter. ETA=0:01:02
[32m[06/24 21:28:15 d2.evaluation.evaluator]: [0mInference done 432/1238. Dataloading: 0.0012 s/iter. Inference: 0.0686 s/iter. Eval: 0.0018 s/iter. Total: 0.0716 s/iter. ETA=0:00:57
[32m[06/24 21:28:20 d2.evaluation.evaluator]: [0mInference done 502/1238. Dataloading: 0.0012 s/iter. Inference: 0.0686 s/iter. Eval: 0.0017 s/iter. Total: 0.0716 s/iter. ETA=0:00:52
[32m[06/24 21:28:25 d2.evaluation.evaluator]: [0mInference done 573/1238. Dataloading: 0.0012 s/iter. Inference: 0.0687 s/iter. Eval: 0.0016 s/iter. Total: 0.0716 s/iter. ETA=0:00:47
[32m[06/24 21:28:30 d2.evaluation.evaluator]: [0mInference done 643/1238. Dataloading: 0.0012 s/iter. Inference: 0.0687 s/iter. Eval: 0.0017 s/iter. Total: 0.0716 s/iter. ETA=0:00:42
[32m[06/24 21:28:35 d2.evaluation.evaluator]: [0mInference done 713/1238. Dataloading: 0.0012 s/iter. Inference: 0.0687 s/iter. Eval: 0.0017 s/iter. Total: 0.0717 s/iter. ETA=0:00:37
[32m[06/24 21:28:40 d2.evaluation.evaluator]: [0mInference done 784/1238. Dataloading: 0.0012 s/iter. Inference: 0.0686 s/iter. Eval: 0.0017 s/iter. Total: 0.0716 s/iter. ETA=0:00:32
[32m[06/24 21:28:45 d2.evaluation.evaluator]: [0mInference done 855/1238. Dataloading: 0.0012 s/iter. Inference: 0.0685 s/iter. Eval: 0.0017 s/iter. Total: 0.0715 s/iter. ETA=0:00:27
[32m[06/24 21:28:50 d2.evaluation.evaluator]: [0mInference done 926/1238. Dataloading: 0.0012 s/iter. Inference: 0.0685 s/iter. Eval: 0.0017 s/iter. Total: 0.0715 s/iter. ETA=0:00:22
[32m[06/24 21:28:55 d2.evaluation.evaluator]: [0mInference done 996/1238. Dataloading: 0.0012 s/iter. Inference: 0.0685 s/iter. Eval: 0.0017 s/iter. Total: 0.0715 s/iter. ETA=0:00:17
[32m[06/24 21:29:00 d2.evaluation.evaluator]: [0mInference done 1067/1238. Dataloading: 0.0012 s/iter. Inference: 0.0685 s/iter. Eval: 0.0017 s/iter. Total: 0.0714 s/iter. ETA=0:00:12
[32m[06/24 21:29:05 d2.evaluation.evaluator]: [0mInference done 1137/1238. Dataloading: 0.0012 s/iter. Inference: 0.0685 s/iter. Eval: 0.0017 s/iter. Total: 0.0715 s/iter. ETA=0:00:07
[32m[06/24 21:29:10 d2.evaluation.evaluator]: [0mInference done 1208/1238. Dataloading: 0.0012 s/iter. Inference: 0.0685 s/iter. Eval: 0.0017 s/iter. Total: 0.0714 s/iter. ETA=0:00:02
[32m[06/24 21:29:13 d2.evaluation.evaluator]: [0mTotal inference time: 0:01:28.428905 (0.071718 s / iter per device, on 4 devices)
[32m[06/24 21:29:13 d2.evaluation.evaluator]: [0mTotal inference pure compute time: 0:01:24 (0.068474 s / iter per device, on 4 devices)
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[32m[06/24 21:29:14 d2.evaluation.pascal_voc_evaluation]: [0mEvaluating voc_2007_test using 2007 metric. Note that results do not use the official Matlab API.
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
Traceback (most recent call last):
  File "/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/train_net.py", line 295, in <module>
    launch(
  File "/workspace/detectron2/detectron2/engine/launch.py", line 69, in launch
    mp.start_processes(
  File "/usr/local/python/lib/python3.8/site-packages/torch/multiprocessing/spawn.py", line 188, in start_processes
    while not context.join():
  File "/usr/local/python/lib/python3.8/site-packages/torch/multiprocessing/spawn.py", line 150, in join
    raise ProcessRaisedException(msg, error_index, failed_process.pid)
torch.multiprocessing.spawn.ProcessRaisedException: 

-- Process 0 terminated with the following error:
Traceback (most recent call last):
  File "/workspace/detectron2/detectron2/evaluation/pascal_voc_evaluation.py", line 135, in parse_rec
    tree = ET.parse(f)
  File "/usr/local/python/lib/python3.8/xml/etree/ElementTree.py", line 1202, in parse
    tree.parse(source, parser)
  File "/usr/local/python/lib/python3.8/xml/etree/ElementTree.py", line 595, in parse
    self._root = parser._parse_whole(source)
OSError: [Errno 9] Bad file descriptor

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/python/lib/python3.8/site-packages/torch/multiprocessing/spawn.py", line 59, in _wrap
    fn(i, *args)
  File "/workspace/detectron2/detectron2/engine/launch.py", line 123, in _distributed_worker
    main_func(*args)
  File "/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/train_net.py", line 271, in main
    res = Trainer.test(cfg, model)  # d2 defaults.py
  File "/workspace/detectron2/detectron2/engine/defaults.py", line 617, in test
    results_i = inference_on_dataset(model, data_loader, evaluator)
  File "/workspace/detectron2/detectron2/evaluation/evaluator.py", line 204, in inference_on_dataset
    results = evaluator.evaluate()
  File "/workspace/detectron2/detectron2/evaluation/pascal_voc_evaluation.py", line 102, in evaluate
    rec, prec, ap = voc_eval(
  File "/workspace/detectron2/detectron2/evaluation/pascal_voc_evaluation.py", line 220, in voc_eval
    recs[imagename] = parse_rec(annopath.format(imagename))
  File "/workspace/detectron2/detectron2/evaluation/pascal_voc_evaluation.py", line 135, in parse_rec
    tree = ET.parse(f)
OSError: [Errno 9] Bad file descriptor

Command Line Args: Namespace(config_file='/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_swin-base_3x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=4, num_machines=1, opts=['OUTPUT_DIR', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_swin-base_3x/test-dev', 'MODEL.WEIGHTS', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_swin-base_3x/model_final.pth'], resume=False)
aaaaa : 4
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81287 [0] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81287 [0] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81287 [0] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81287 [0] NCCL INFO Using network IB
NCCL version 2.10.3+cuda10.2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81288 [1] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81288 [1] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81288 [1] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81288 [1] NCCL INFO Using network IB
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81290 [3] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81290 [3] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81290 [3] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81290 [3] NCCL INFO Using network IB
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81289 [2] NCCL INFO Bootstrap : Using eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81289 [2] NCCL INFO NET/Plugin : No plugin found (libnccl-net.so), using internal implementation
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81289 [2] NCCL INFO NET/IB : Using [0]mlx5_4:1/RoCE ; OOB eth1:9.206.41.12<0>
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81289 [2] NCCL INFO Using network IB
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Trees [0] 3/-1/-1->1->0 [1] 0/-1/-1->1->3 [2] 3/-1/-1->1->0 [3] 0/-1/-1->1->3 [4] 3/-1/-1->1->0 [5] 0/-1/-1->1->3 [6] 3/-1/-1->1->0 [7] 0/-1/-1->1->3
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 00/08 :    0   1   3   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO Trees [0] 0/-1/-1->2->-1 [1] -1/-1/-1->2->0 [2] 0/-1/-1->2->-1 [3] -1/-1/-1->2->0 [4] 0/-1/-1->2->-1 [5] -1/-1/-1->2->0 [6] 0/-1/-1->2->-1 [7] -1/-1/-1->2->0
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO Trees [0] -1/-1/-1->3->1 [1] 1/-1/-1->3->-1 [2] -1/-1/-1->3->1 [3] 1/-1/-1->3->-1 [4] -1/-1/-1->3->1 [5] 1/-1/-1->3->-1 [6] -1/-1/-1->3->1 [7] 1/-1/-1->3->-1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO Setting affinity for GPU 2 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Setting affinity for GPU 1 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 01/08 :    0   2   3   1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO Setting affinity for GPU 3 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 02/08 :    0   2   1   3
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 03/08 :    0   3   1   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 04/08 :    0   1   3   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 05/08 :    0   2   3   1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 06/08 :    0   2   1   3
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 07/08 :    0   3   1   2
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Trees [0] 1/-1/-1->0->2 [1] 2/-1/-1->0->1 [2] 1/-1/-1->0->2 [3] 2/-1/-1->0->1 [4] 1/-1/-1->0->2 [5] 2/-1/-1->0->1 [6] 1/-1/-1->0->2 [7] 2/-1/-1->0->1
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Setting affinity for GPU 0 to ffffff00,0000ffff,ff000000
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO Channel 01 : 2[b1000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO Channel 05 : 2[b1000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 00 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Channel 03 : 1[89000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO Channel 02 : 3[b2000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 04 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Channel 07 : 1[89000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO Channel 06 : 3[b2000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Channel 00 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO Channel 00 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 01 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO Channel 01 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Channel 02 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 02 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO Channel 03 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO Channel 03 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Channel 04 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 05 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO Channel 04 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO Channel 05 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Channel 06 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 06 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO Channel 07 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO Channel 07 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 03 : 0[88000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO Channel 02 : 2[b1000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Channel 01 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO Channel 00 : 3[b2000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 07 : 0[88000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO Channel 06 : 2[b1000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Channel 05 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO Channel 04 : 3[b2000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO Connected all rings
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 01 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 02 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 03 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 05 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 06 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO Channel 00 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO Channel 01 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 07 : 0[88000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO Channel 02 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO Channel 02 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO Channel 04 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO Channel 05 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO Channel 06 : 3[b2000] -> 1[89000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO Channel 06 : 2[b1000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Channel 01 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 00 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Channel 03 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 03 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Channel 05 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 04 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Channel 07 : 1[89000] -> 3[b2000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Channel 07 : 0[88000] -> 2[b1000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Channel 00 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Channel 02 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Channel 03 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Channel 04 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Channel 06 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Channel 07 : 1[89000] -> 0[88000] via P2P/IPC
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO Connected all trees
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO threadThresholds 8/8/64 | 32/8/64 | 8/8/512
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO 8 coll channels, 8 p2p channels, 2 p2p channels per peer
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81288:81838 [1] NCCL INFO comm 0x7f1ea4000fa0 rank 1 nranks 4 cudaDev 1 busId 89000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81836 [0] NCCL INFO comm 0x7f17ac000fa0 rank 0 nranks 4 cudaDev 0 busId 88000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81289:81842 [2] NCCL INFO comm 0x7f71bc000fa0 rank 2 nranks 4 cudaDev 2 busId b1000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81290:81840 [3] NCCL INFO comm 0x7f9094000fa0 rank 3 nranks 4 cudaDev 3 busId b2000 - Init COMPLETE
ts-384beb8d8bb84bd9b9cb65e1719659be-launcher:81287:81287 [0] NCCL INFO Launch mode Parallel
Config '/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_swin-base_3x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
Config '/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_swin-base_3x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
Config '/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_swin-base_3x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
Config '/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_swin-base_3x.yaml' has no VERSION. Assuming it to be compatible with latest v2.
[32m[06/24 21:29:24 detectron2]: [0mRank of current process: 0. World size: 4
[32m[06/24 21:29:26 detectron2]: [0mEnvironment info:
-------------------------------  -----------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.12 (default, Nov  1 2021, 17:15:04) [GCC 7.3.0]
numpy                            1.23.4
detectron2                       0.6 @/workspace/detectron2/detectron2
Compiler                         GCC 7.3
CUDA compiler                    CUDA 10.2
detectron2 arch flags            7.0
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          1.10.0+cu102 @/usr/local/python/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1,2,3                      Tesla V100-SXM2-32GB (arch=7.0)
Driver version                   470.182.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.11.0+cu102 @/usr/local/python/lib/python3.8/site-packages/torchvision
torchvision arch flags           3.5, 5.0, 6.0, 7.0, 7.5
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.7.0
-------------------------------  -----------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[32m[06/24 21:29:26 detectron2]: [0mCommand line arguments: Namespace(config_file='/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_swin-base_3x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=4, num_machines=1, opts=['OUTPUT_DIR', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_swin-base_3x/test-dev', 'MODEL.WEIGHTS', '/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_swin-base_3x/model_final.pth'], resume=False)
[32m[06/24 21:29:26 detectron2]: [0mContents of args.config_file=/path/workspace/research/segmentation/BoxSeg/projects/BoxSeg/configs/voc/boxseg_swin-base_3x.yaml:
[38;5;197m_BASE_[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m../Voc-BoxSeg.yaml[39m[38;5;186m"[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186m/fuxi_team2/pretrained_models/swin_base_patch4_window7_224_22k.pth[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mbuild_retinanet_swin_transformer_fpn_backbone[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mSWIN_TRANSFORMER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mstage3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mstage4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mstage5[39m[38;5;186m"[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mEMBED_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mDEPTHS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m2[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m18[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m2[39m[38;5;15m][39m
[38;5;15m    [39m[38;5;197mNUM_HEADS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m4[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m8[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m16[39m[38;5;15m,[39m[38;5;15m [39m[38;5;15m32[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;186m"[39m[38;5;186mstage3[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mstage4[39m[38;5;186m"[39m[38;5;15m,[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mstage5[39m[38;5;186m"[39m[38;5;15m][39m

[38;5;15m  [39m[38;5;197mPROTO_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m  [39m[38;5;197mWITH_PROTOTYPE_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m  [39m[38;5;197mUSE_VFL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m

[38;5;15m  [39m[38;5;197mCOPYPASTE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m  [39m[38;5;197mCOPYPASTE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186minstance[39m[38;5;186m"[39m

[38;5;15m  [39m[38;5;197mBOX_TEACHER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_BINARY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrue[39m
[38;5;15m    [39m[38;5;197mTEACHER_WITH_NMS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m
[38;5;15m    [39m[38;5;197mDYNAMIC_MASK_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFalse[39m

[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;242m#  STEPS: (210000, 250000)[39m
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m(36000,[39m[38;5;141m [39m[38;5;141m48000)[39m
[38;5;242m#  MAX_ITER: 270000[39m
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m54000[39m[38;5;15m  [39m[38;5;242m# 17.4 epochs[39m
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m  [39m[38;5;197mOPTIMIZER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186mADAMW[39m[38;5;186m"[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0001[39m
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m"[39m[38;5;186moutput/boxseg_swin_base_3x[39m[38;5;186m"[39m

[32m[06/24 21:29:26 detectron2]: [0mRunning with full config:
[38;5;197mCUDNN_BENCHMARK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;197mDATALOADER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mASPECT_RATIO_GROUPING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mFILTER_EMPTY_ANNOTATIONS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mNUM_WORKERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m  [39m[38;5;197mREPEAT_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mSAMPLER_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mTrainingSampler[39m
[38;5;197mDATASETS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;197mPRECOMPUTED_PROPOSAL_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2000[39m
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mPROPOSAL_FILES_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mvoc_2007_test[39m
[38;5;15m  [39m[38;5;197mTRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mvoc_2007_trainval[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mvoc_2012_trainval[39m
[38;5;197mGLOBAL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mHACK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;197mINPUT[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG_EXTRA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mAUG_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mstrong[39m
[38;5;15m  [39m[38;5;197mCROP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCROP_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mSIZE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m    [39m[38;5;197mTYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mrelative_range[39m
[38;5;15m  [39m[38;5;197mFORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBGR[39m
[38;5;15m  [39m[38;5;197mHFLIP_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mIS_ROTATE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mMASK_FORMAT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mpolygon[39m
[38;5;15m  [39m[38;5;197mMAX_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1333[39m
[38;5;15m  [39m[38;5;197mMAX_SIZE_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1333[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m480[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m544[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m576[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m608[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m640[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m672[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m704[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m736[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m768[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m  [39m[38;5;197mMIN_SIZE_TRAIN_SAMPLING[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mchoice[39m
[38;5;15m  [39m[38;5;197mRANDOM_FLIP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mhorizontal[39m
[38;5;197mMODEL[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mANCHOR_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANGLES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-90[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m90[39m
[38;5;15m    [39m[38;5;197mASPECT_RATIOS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDefaultAnchorGenerator[39m
[38;5;15m    [39m[38;5;197mOFFSET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mSIZES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m  [39m[38;5;197mBACKBONE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANTI_ALIAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFREEZE_AT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mbuild_retinanet_swin_transformer_fpn_backbone[39m
[38;5;15m  [39m[38;5;197mBASIS_MODULE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mANN_SET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mcoco[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;197mLOSS_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mProtoNet[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSyncBN[39m
[38;5;15m    [39m[38;5;197mNUM_BASES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m  [39m[38;5;197mBATEXT[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCANONICAL_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mCUSTOM_DICT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mEVAL_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;197mNUM_CHARS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m25[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mPOOLER_SCALES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.125[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.0625[39m
[38;5;15m    [39m[38;5;197mRECOGNITION_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mctc[39m
[38;5;15m    [39m[38;5;197mRECOGNIZER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mattn[39m
[38;5;15m    [39m[38;5;197mSAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mUSE_AET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_COORDCONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mVOC_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m  [39m[38;5;197mBLENDMASK[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mATTN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mBOTTOM_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m56[39m
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mPOOLER_SCALES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m    [39m[38;5;197mTOP_INTERP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mbilinear[39m
[38;5;15m    [39m[38;5;197mVISUALIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mBOXINST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOTTOM_PIXELS_REMOVED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mPAIRWISE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mCOLOR_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m      [39m[38;5;197mDILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m      [39m[38;5;197mSIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m      [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10000[39m
[38;5;15m  [39m[38;5;197mBOX_TEACHER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mAVG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mDYNAMIC_MASK_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFIX_REDUCTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mIOU_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_BINARY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMASK_AFFINITY_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mMASK_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.999[39m
[38;5;15m    [39m[38;5;197mRESIZE_IMAGES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mRETURN_FLOAT_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mSCORE_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mTEACHER_EVAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mTEACHER_MASK_THRESHOLD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mTEACHER_WITH_NMS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_AUG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_TEACHER_INFERENCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10000[39m
[38;5;15m    [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mlinear[39m
[38;5;15m    [39m[38;5;197mWITH_AVG_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mWITH_WARMUP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mBiFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_REPEATS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m160[39m
[38;5;15m  [39m[38;5;197mCONDINST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOTTOM_PIXELS_REMOVED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mMASK_BRANCH[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mCHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m      [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBN[39m
[38;5;15m      [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m      [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m      [39m[38;5;197mSEMANTIC_LOSS_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mMASK_HEAD[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mCHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m      [39m[38;5;197mDISABLE_REL_COORDS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m      [39m[38;5;197mNUM_LAYERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m      [39m[38;5;197mUSE_FP16[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mMASK_OUT_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mMAX_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mTOPK_PROPOSALS_PER_IM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m  [39m[38;5;197mCOPYPASTE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mCOPYPASTE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141minstance[39m
[38;5;15m  [39m[38;5;197mDEVICE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mcuda[39m
[38;5;15m  [39m[38;5;197mDLA[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_BODY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDLA34[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m  [39m[38;5;197mFCOS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBOX_QUALITY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mctrness[39m
[38;5;15m    [39m[38;5;197mCENTER_SAMPLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mFPN_STRIDES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mLOC_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mgiou[39m
[38;5;15m    [39m[38;5;197mLOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mLOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mLOSS_NORMALIZER_CLS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfg[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT_CLS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNMS_TH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_BOX_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CLS_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_SHARE_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOS_RADIUS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.5[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSIZES_OF_INTEREST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mTHRESH_WITH_CTR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mTOP_LEVELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mUSE_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_RELU[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mUSE_SCALE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mYIELD_BOX_FEATURES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mYIELD_PROPOSAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mFCPOSE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mATTN_LEN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2737[39m
[38;5;15m    [39m[38;5;197mBASIS_MODULE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mBN_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSyncBN[39m
[38;5;15m      [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m      [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m      [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m      [39m[38;5;197mNUM_BASES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m      [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m17[39m
[38;5;15m    [39m[38;5;197mDISTANCE_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12.0[39m
[38;5;15m    [39m[38;5;197mDYNAMIC_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mGT_HEATMAP_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mHEAD_HEATMAP_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mHEATMAP_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.8[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT_DIRECTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m9.0[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT_KEYPOINT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.5[39m
[38;5;15m    [39m[38;5;197mMAX_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m70[39m
[38;5;15m    [39m[38;5;197mPROPOSALS_PER_INST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m70[39m
[38;5;15m    [39m[38;5;197mSIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m  [39m[38;5;197mFCPOSE_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mFPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFUSE_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msum[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m  [39m[38;5;197mKEYPOINT_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mLOAD_PROPOSALS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mMEInst[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mAGNOSTIC[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mCENTER_SAMPLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mDIM_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m60[39m
[38;5;15m    [39m[38;5;197mFLAG_PARAMETERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFPN_STRIDES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mGCN_KERNEL_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m9[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mINFERENCE_TH_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mLAST_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mLOC_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mgiou[39m
[38;5;15m    [39m[38;5;197mLOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mLOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mLOSS_ON_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mMASK_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmse[39m
[38;5;15m    [39m[38;5;197mMASK_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMASK_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m28[39m
[38;5;15m    [39m[38;5;197mNMS_TH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_BOX_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CLS_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_MASK_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_SHARE_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPATH_COMPONENTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mdatasets/coco/components/coco_2017_train_class_agnosticTrue_whitenTrue_sigmoidTrue_60.npz[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mPOS_RADIUS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.5[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSIGMOID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mSIZES_OF_INTEREST[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mTHRESH_WITH_CTR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mTOP_LEVELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mTYPE_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDCNv1[39m
[38;5;15m    [39m[38;5;197mUSE_DEFORMABLE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_GCN_IN_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_RELU[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mUSE_SCALE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWHITEN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mMETA_ARCHITECTURE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mBoxSeg[39m
[38;5;15m  [39m[38;5;197mMOBILENET[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mPANOPTIC_FPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMBINE[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m      [39m[38;5;197mINSTANCES_CONFIDENCE_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;197mOVERLAP_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m      [39m[38;5;197mSTUFF_AREA_LIMIT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4096[39m
[38;5;15m    [39m[38;5;197mINSTANCE_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mPIXEL_MEAN[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m103.53[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m116.28[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m123.675[39m
[38;5;15m  [39m[38;5;197mPIXEL_STD[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mPROPOSAL_GENERATOR[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mMIN_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFCOS[39m
[38;5;15m  [39m[38;5;197mPROTO_ON[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mRESNETS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDEFORM_INTERVAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mDEFORM_MODULATED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEFORM_NUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mDEFORM_ON_PER_STAGE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEPTH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;197mNUM_GROUPS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres5[39m
[38;5;15m    [39m[38;5;197mRES2_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mRES5_DILATION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mSTEM_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m    [39m[38;5;197mSTRIDE_IN_1X1[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mWIDTH_PER_GROUP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m64[39m
[38;5;15m  [39m[38;5;197mRETINANET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m&id002[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mFOCAL_LOSS_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp7[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_LOSS_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mTOPK_CANDIDATES_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m  [39m[38;5;197mROI_BOX_CASCADE_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m&id001[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m5.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m20.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m20.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m10.0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m30.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m15.0[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m15.0[39m
[38;5;15m    [39m[38;5;197mIOUS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.6[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m  [39m[38;5;197mROI_BOX_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id001[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_BBOX_REG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mFC_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1024[39m
[38;5;15m    [39m[38;5;197mFED_LOSS_FREQ_WEIGHT_POWER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mFED_LOSS_NUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m50[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mNUM_FC[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m    [39m[38;5;197mTRAIN_ON_PRED_BOXES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_FED_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mUSE_SIGMOID_CE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mROI_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mRes5ROIHeads[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m20[39m
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m    [39m[38;5;197mPROPOSAL_APPEND_GT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mSCORE_THRESH_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m  [39m[38;5;197mROI_KEYPOINT_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mMIN_KEYPOINTS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mKRCNNConvDeconvUpsampleHead[39m
[38;5;15m    [39m[38;5;197mNORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mNUM_KEYPOINTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m17[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m  [39m[38;5;197mROI_MASK_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLS_AGNOSTIC_MASK[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mCONV_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mMaskRCNNConvUpsampleHead[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;186m'[39m[38;5;186m'[39m
[38;5;15m    [39m[38;5;197mNUM_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_RESOLUTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m14[39m
[38;5;15m    [39m[38;5;197mPOOLER_SAMPLING_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;197mPOOLER_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mROIAlignV2[39m
[38;5;15m  [39m[38;5;197mRPN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBATCH_SIZE_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141msmooth_l1[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_LOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mBBOX_REG_WEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m*id002[39m
[38;5;15m    [39m[38;5;197mBOUNDARY_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mCONV_DIMS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;197mHEAD_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mStandardRPNHead[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mres4[39m
[38;5;15m    [39m[38;5;197mIOU_LABELS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m    [39m[38;5;197mIOU_THRESHOLDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNMS_THRESH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.7[39m
[38;5;15m    [39m[38;5;197mPOSITIVE_FRACTION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;197mPOST_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TEST[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m6000[39m
[38;5;15m    [39m[38;5;197mPRE_NMS_TOPK_TRAIN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m12000[39m
[38;5;15m    [39m[38;5;197mSMOOTH_L1_BETA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mSEM_SEG_HEAD[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCOMMON_STRIDE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mCONVS_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mIGNORE_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m255[39m
[38;5;15m    [39m[38;5;197mIN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;197mLOSS_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mSemSegFPNHead[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m54[39m
[38;5;15m  [39m[38;5;197mSOLOV2[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mFPN_INSTANCE_STRIDES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mFPN_SCALE_RANGES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m48[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m192[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m96[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m384[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m192[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m768[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m384[39m
[38;5;15m      [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2048[39m
[38;5;15m    [39m[38;5;197mINSTANCE_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m512[39m
[38;5;15m    [39m[38;5;197mINSTANCE_IN_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mINSTANCE_IN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp6[39m
[38;5;15m    [39m[38;5;197mLOSS[39m[38;5;15m:[39m
[38;5;15m      [39m[38;5;197mDICE_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3.0[39m
[38;5;15m      [39m[38;5;197mFOCAL_ALPHA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.25[39m
[38;5;15m      [39m[38;5;197mFOCAL_GAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m      [39m[38;5;197mFOCAL_USE_SIGMOID[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m      [39m[38;5;197mFOCAL_WEIGHT[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mMASK_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mMASK_IN_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mMASK_IN_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mp5[39m
[38;5;15m    [39m[38;5;197mMASK_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.5[39m
[38;5;15m    [39m[38;5;197mMAX_PER_IMG[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m    [39m[38;5;197mNMS_KERNEL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mgaussian[39m
[38;5;15m    [39m[38;5;197mNMS_PRE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m500[39m
[38;5;15m    [39m[38;5;197mNMS_SIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mNMS_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mmatrix[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mGN[39m
[38;5;15m    [39m[38;5;197mNUM_CLASSES[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m80[39m
[38;5;15m    [39m[38;5;197mNUM_GRIDS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m40[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m36[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m24[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m12[39m
[38;5;15m    [39m[38;5;197mNUM_INSTANCE_CONVS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_KERNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mNUM_MASKS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mPRIOR_PROB[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.01[39m
[38;5;15m    [39m[38;5;197mSCORE_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m    [39m[38;5;197mSIGMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m    [39m[38;5;197mTYPE_DCN[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mDCN[39m
[38;5;15m    [39m[38;5;197mUPDATE_THR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m    [39m[38;5;197mUSE_COORD_CONV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mUSE_DCN_IN_INSTANCE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mSWIN_TRANSFORMER[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mAPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mDEPTHS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m18[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;15m    [39m[38;5;197mDROP_PATH_RATE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.2[39m
[38;5;15m    [39m[38;5;197mEMBED_DIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m128[39m
[38;5;15m    [39m[38;5;197mMLP_RATIO[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;197mNUM_HEADS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m8[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m32[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m    [39m[38;5;197mWINDOW_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m7[39m
[38;5;15m  [39m[38;5;197mTOP_MODULE[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mDIM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m    [39m[38;5;197mNAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mconv[39m
[38;5;15m  [39m[38;5;197mUSE_VFL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m  [39m[38;5;197mVOVNET[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mBACKBONE_OUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mCONV_BODY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mV-39-eSE[39m
[38;5;15m    [39m[38;5;197mNORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mFrozenBN[39m
[38;5;15m    [39m[38;5;197mOUT_CHANNELS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m256[39m
[38;5;15m    [39m[38;5;197mOUT_FEATURES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage2[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage3[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage4[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141mstage5[39m
[38;5;15m  [39m[38;5;197mWEIGHTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_swin-base_3x/model_final.pth[39m
[38;5;15m  [39m[38;5;197mWITH_PROTOTYPE_LOSS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;197mOUTPUT_DIR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m/path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_swin-base_3x/test-dev[39m
[38;5;197mSEED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m-1[39m
[38;5;197mSOLVER[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAMP[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mBACKBONE_MULTIPLIER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mBASE_LR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0001[39m
[38;5;15m  [39m[38;5;197mBASE_LR_END[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;15m  [39m[38;5;197mBIAS_LR_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m  [39m[38;5;197mCHECKPOINT_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m5000[39m
[38;5;15m  [39m[38;5;197mCLIP_GRADIENTS[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mCLIP_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mvalue[39m
[38;5;15m    [39m[38;5;197mCLIP_VALUE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m1.0[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mNORM_TYPE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2.0[39m
[38;5;15m  [39m[38;5;197mGAMMA[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.1[39m
[38;5;15m  [39m[38;5;197mIMS_PER_BATCH[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m16[39m
[38;5;15m  [39m[38;5;197mLR_SCHEDULER_NAME[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mWarmupMultiStepLR[39m
[38;5;15m  [39m[38;5;197mMAX_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m54000[39m
[38;5;15m  [39m[38;5;197mMOMENTUM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.9[39m
[38;5;15m  [39m[38;5;197mNESTEROV[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mNUM_DECAYS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m3[39m
[38;5;15m  [39m[38;5;197mOPTIMIZER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mADAMW[39m
[38;5;15m  [39m[38;5;197mREFERENCE_WORLD_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m
[38;5;15m  [39m[38;5;197mRESCALE_INTERVAL[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m  [39m[38;5;197mSTEPS[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m36000[39m
[38;5;15m  [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m48000[39m
[38;5;15m  [39m[38;5;197mWARMUP_FACTOR[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.001[39m
[38;5;15m  [39m[38;5;197mWARMUP_ITERS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m  [39m[38;5;197mWARMUP_METHOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mlinear[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.05[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_BIAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mnull[39m
[38;5;15m  [39m[38;5;197mWEIGHT_DECAY_NORM[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0.0[39m
[38;5;197mTEST[39m[38;5;15m:[39m
[38;5;15m  [39m[38;5;197mAUG[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mFLIP[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mtrue[39m
[38;5;15m    [39m[38;5;197mMAX_SIZE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m4000[39m
[38;5;15m    [39m[38;5;197mMIN_SIZES[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m400[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m500[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m600[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m700[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m800[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m900[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1000[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1100[39m
[38;5;15m    [39m[38;5;15m-[39m[38;5;15m [39m[38;5;141m1200[39m
[38;5;15m  [39m[38;5;197mDETECTIONS_PER_IMAGE[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m100[39m
[38;5;15m  [39m[38;5;197mEVAL_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m10000[39m
[38;5;15m  [39m[38;5;197mEXPECTED_RESULTS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mKEYPOINT_OKS_SIGMAS[39m[38;5;15m:[39m[38;5;15m [39m[38;5;15m[[39m[38;5;15m][39m
[38;5;15m  [39m[38;5;197mPRECISE_BN[39m[38;5;15m:[39m
[38;5;15m    [39m[38;5;197mENABLED[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141mfalse[39m
[38;5;15m    [39m[38;5;197mNUM_ITER[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m200[39m
[38;5;197mVERSION[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m2[39m
[38;5;197mVIS_PERIOD[39m[38;5;15m:[39m[38;5;15m [39m[38;5;141m0[39m

[32m[06/24 21:29:27 detectron2]: [0mFull config saved to /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_swin-base_3x/test-dev/config.yaml
[32m[06/24 21:29:27 d2.utils.env]: [0mUsing a generated random seed 27470267
[32m[06/24 21:29:37 d2.engine.defaults]: [0mModel:
BoxSeg(
  (teacher): CondInst(
    (backbone): FPN(
      (fpn_lateral3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral4): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral5): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (top_block): LastLevelP6P7(
        (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (bottom_up): SwinTransformer(
        (patch_embed): PatchEmbed(
          (proj): Conv2d(3, 128, kernel_size=(4, 4), stride=(4, 4))
          (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        )
        (pos_drop): Dropout(p=0.0, inplace=False)
        (layers): ModuleList(
          (0): BasicLayer(
            (blocks): ModuleList(
              (0): SwinTransformerBlock(
                (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=128, out_features=384, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=128, out_features=128, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): Identity()
                (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=128, out_features=512, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=512, out_features=128, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (1): SwinTransformerBlock(
                (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=128, out_features=384, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=128, out_features=128, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.009)
                (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=128, out_features=512, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=512, out_features=128, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
            )
            (downsample): PatchMerging(
              (reduction): Linear(in_features=512, out_features=256, bias=False)
              (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): BasicLayer(
            (blocks): ModuleList(
              (0): SwinTransformerBlock(
                (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=256, out_features=768, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=256, out_features=256, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.017)
                (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=256, out_features=1024, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=1024, out_features=256, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (1): SwinTransformerBlock(
                (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=256, out_features=768, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=256, out_features=256, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.026)
                (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=256, out_features=1024, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=1024, out_features=256, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
            )
            (downsample): PatchMerging(
              (reduction): Linear(in_features=1024, out_features=512, bias=False)
              (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): BasicLayer(
            (blocks): ModuleList(
              (0): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.035)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (1): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.043)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (2): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.052)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (3): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.061)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (4): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.070)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (5): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.078)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (6): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.087)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (7): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.096)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (8): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.104)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (9): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.113)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (10): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.122)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (11): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.130)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (12): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.139)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (13): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.148)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (14): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.157)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (15): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.165)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (16): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.174)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (17): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.183)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
            )
            (downsample): PatchMerging(
              (reduction): Linear(in_features=2048, out_features=1024, bias=False)
              (norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): BasicLayer(
            (blocks): ModuleList(
              (0): SwinTransformerBlock(
                (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=1024, out_features=3072, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=1024, out_features=1024, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.191)
                (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=1024, out_features=4096, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=4096, out_features=1024, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (1): SwinTransformerBlock(
                (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=1024, out_features=3072, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=1024, out_features=1024, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.200)
                (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=1024, out_features=4096, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=4096, out_features=1024, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
            )
          )
        )
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
    )
    (proposal_generator): FCOS(
      (fcos_head): FCOSHead(
        (cls_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (bbox_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (share_tower): Sequential()
        (cls_logits): Conv2d(256, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (bbox_pred): Conv2d(256, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (ctrness): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (scales): ModuleList(
          (0): Scale()
          (1): Scale()
          (2): Scale()
          (3): Scale()
          (4): Scale()
        )
      )
      (fcos_outputs): FCOSOutputs(
        (loc_loss_func): IOULoss()
      )
    )
    (mask_head): DynamicMaskHead(
      (MSELoss): MSELoss()
    )
    (mask_branch): MaskBranch(
      (refine): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (tower): Sequential(
        (0): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (3): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (4): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (controller): Conv2d(256, 233, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (student): CondInst(
    (backbone): FPN(
      (fpn_lateral3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral4): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (fpn_lateral5): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (top_block): LastLevelP6P7(
        (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (bottom_up): SwinTransformer(
        (patch_embed): PatchEmbed(
          (proj): Conv2d(3, 128, kernel_size=(4, 4), stride=(4, 4))
          (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        )
        (pos_drop): Dropout(p=0.0, inplace=False)
        (layers): ModuleList(
          (0): BasicLayer(
            (blocks): ModuleList(
              (0): SwinTransformerBlock(
                (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=128, out_features=384, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=128, out_features=128, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): Identity()
                (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=128, out_features=512, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=512, out_features=128, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (1): SwinTransformerBlock(
                (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=128, out_features=384, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=128, out_features=128, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.009)
                (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=128, out_features=512, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=512, out_features=128, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
            )
            (downsample): PatchMerging(
              (reduction): Linear(in_features=512, out_features=256, bias=False)
              (norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): BasicLayer(
            (blocks): ModuleList(
              (0): SwinTransformerBlock(
                (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=256, out_features=768, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=256, out_features=256, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.017)
                (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=256, out_features=1024, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=1024, out_features=256, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (1): SwinTransformerBlock(
                (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=256, out_features=768, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=256, out_features=256, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.026)
                (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=256, out_features=1024, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=1024, out_features=256, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
            )
            (downsample): PatchMerging(
              (reduction): Linear(in_features=1024, out_features=512, bias=False)
              (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): BasicLayer(
            (blocks): ModuleList(
              (0): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.035)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (1): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.043)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (2): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.052)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (3): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.061)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (4): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.070)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (5): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.078)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (6): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.087)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (7): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.096)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (8): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.104)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (9): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.113)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (10): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.122)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (11): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.130)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (12): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.139)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (13): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.148)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (14): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.157)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (15): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.165)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (16): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.174)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (17): SwinTransformerBlock(
                (norm1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=512, out_features=1536, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=512, out_features=512, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.183)
                (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=512, out_features=2048, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=2048, out_features=512, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
            )
            (downsample): PatchMerging(
              (reduction): Linear(in_features=2048, out_features=1024, bias=False)
              (norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): BasicLayer(
            (blocks): ModuleList(
              (0): SwinTransformerBlock(
                (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=1024, out_features=3072, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=1024, out_features=1024, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.191)
                (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=1024, out_features=4096, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=4096, out_features=1024, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
              (1): SwinTransformerBlock(
                (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                (attn): WindowAttention(
                  (qkv): Linear(in_features=1024, out_features=3072, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=False)
                  (proj): Linear(in_features=1024, out_features=1024, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (softmax): Softmax(dim=-1)
                )
                (drop_path): DropPath(drop_prob=0.200)
                (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=1024, out_features=4096, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=4096, out_features=1024, bias=True)
                  (drop): Dropout(p=0.0, inplace=False)
                )
              )
            )
          )
        )
        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
    )
    (proposal_generator): FCOS(
      (fcos_head): FCOSHead(
        (cls_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (bbox_tower): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(32, 256, eps=1e-05, affine=True)
          (5): ReLU()
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (7): GroupNorm(32, 256, eps=1e-05, affine=True)
          (8): ReLU()
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (10): GroupNorm(32, 256, eps=1e-05, affine=True)
          (11): ReLU()
        )
        (share_tower): Sequential()
        (cls_logits): Conv2d(256, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (bbox_pred): Conv2d(256, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (ctrness): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (scales): ModuleList(
          (0): Scale()
          (1): Scale()
          (2): Scale()
          (3): Scale()
          (4): Scale()
        )
      )
      (fcos_outputs): FCOSOutputs(
        (loc_loss_func): IOULoss()
      )
    )
    (mask_head): DynamicMaskHead(
      (MSELoss): MSELoss()
    )
    (mask_branch): MaskBranch(
      (refine): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (tower): Sequential(
        (0): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (3): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (4): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (controller): Conv2d(256, 233, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[32m[06/24 21:29:37 d2.checkpoint.detection_checkpoint]: [0m[DetectionCheckpointer] Loading from /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_swin-base_3x/model_final.pth ...
[32m[06/24 21:29:37 fvcore.common.checkpoint]: [0m[Checkpointer] Loading from /path/workspace/research/segmentation/BoxSeg/../BoxSeg_checkpoints/gavyn.voc.boxseg_swin-base_3x/model_final.pth ...
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[32m[06/24 21:29:41 d2.data.build]: [0mDistribution of instances among all 20 categories:
[36m|  category   | #instances   |  category   | #instances   |  category  | #instances   |
|:-----------:|:-------------|:-----------:|:-------------|:----------:|:-------------|
|  aeroplane  | 311          |   bicycle   | 389          |    bird    | 576          |
|    boat     | 393          |   bottle    | 657          |    bus     | 254          |
|     car     | 1541         |     cat     | 370          |   chair    | 1374         |
|     cow     | 329          | diningtable | 299          |    dog     | 530          |
|    horse    | 395          |  motorbike  | 369          |   person   | 5227         |
| pottedplant | 592          |    sheep    | 311          |    sofa    | 396          |
|    train    | 302          |  tvmonitor  | 361          |            |              |
|    total    | 14976        |             |              |            |              |[0m
[32m[06/24 21:29:41 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[32m[06/24 21:29:41 d2.data.common]: [0mSerializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[32m[06/24 21:29:41 d2.data.common]: [0mSerializing 4952 elements to byte tensors and concatenating them all ...
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[32m[06/24 21:29:41 d2.data.common]: [0mSerialized dataset takes 2.22 MiB
[32m[06/24 21:29:41 d2.evaluation.evaluator]: [0mStart inference on 1238 batches
/usr/local/python/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[32m[06/24 21:29:46 d2.evaluation.evaluator]: [0mInference done 11/1238. Dataloading: 0.0008 s/iter. Inference: 0.1130 s/iter. Eval: 0.0079 s/iter. Total: 0.1217 s/iter. ETA=0:02:29
[32m[06/24 21:29:51 d2.evaluation.evaluator]: [0mInference done 53/1238. Dataloading: 0.0012 s/iter. Inference: 0.1119 s/iter. Eval: 0.0075 s/iter. Total: 0.1206 s/iter. ETA=0:02:22
[32m[06/24 21:29:56 d2.evaluation.evaluator]: [0mInference done 95/1238. Dataloading: 0.0012 s/iter. Inference: 0.1118 s/iter. Eval: 0.0076 s/iter. Total: 0.1206 s/iter. ETA=0:02:17
[32m[06/24 21:30:01 d2.evaluation.evaluator]: [0mInference done 136/1238. Dataloading: 0.0012 s/iter. Inference: 0.1124 s/iter. Eval: 0.0078 s/iter. Total: 0.1215 s/iter. ETA=0:02:13
[32m[06/24 21:30:06 d2.evaluation.evaluator]: [0mInference done 177/1238. Dataloading: 0.0012 s/iter. Inference: 0.1125 s/iter. Eval: 0.0079 s/iter. Total: 0.1216 s/iter. ETA=0:02:09
[32m[06/24 21:30:11 d2.evaluation.evaluator]: [0mInference done 218/1238. Dataloading: 0.0012 s/iter. Inference: 0.1126 s/iter. Eval: 0.0081 s/iter. Total: 0.1219 s/iter. ETA=0:02:04
[32m[06/24 21:30:16 d2.evaluation.evaluator]: [0mInference done 260/1238. Dataloading: 0.0012 s/iter. Inference: 0.1125 s/iter. Eval: 0.0081 s/iter. Total: 0.1218 s/iter. ETA=0:01:59
[32m[06/24 21:30:21 d2.evaluation.evaluator]: [0mInference done 302/1238. Dataloading: 0.0012 s/iter. Inference: 0.1124 s/iter. Eval: 0.0081 s/iter. Total: 0.1217 s/iter. ETA=0:01:53
[32m[06/24 21:30:26 d2.evaluation.evaluator]: [0mInference done 343/1238. Dataloading: 0.0012 s/iter. Inference: 0.1125 s/iter. Eval: 0.0082 s/iter. Total: 0.1219 s/iter. ETA=0:01:49
[32m[06/24 21:30:31 d2.evaluation.evaluator]: [0mInference done 384/1238. Dataloading: 0.0012 s/iter. Inference: 0.1127 s/iter. Eval: 0.0082 s/iter. Total: 0.1221 s/iter. ETA=0:01:44
[32m[06/24 21:30:36 d2.evaluation.evaluator]: [0mInference done 426/1238. Dataloading: 0.0012 s/iter. Inference: 0.1126 s/iter. Eval: 0.0082 s/iter. Total: 0.1220 s/iter. ETA=0:01:39
[32m[06/24 21:30:41 d2.evaluation.evaluator]: [0mInference done 467/1238. Dataloading: 0.0012 s/iter. Inference: 0.1127 s/iter. Eval: 0.0081 s/iter. Total: 0.1220 s/iter. ETA=0:01:34
[32m[06/24 21:30:46 d2.evaluation.evaluator]: [0mInference done 509/1238. Dataloading: 0.0012 s/iter. Inference: 0.1127 s/iter. Eval: 0.0081 s/iter. Total: 0.1220 s/iter. ETA=0:01:28
[32m[06/24 21:30:51 d2.evaluation.evaluator]: [0mInference done 551/1238. Dataloading: 0.0012 s/iter. Inference: 0.1126 s/iter. Eval: 0.0081 s/iter. Total: 0.1219 s/iter. ETA=0:01:23
[32m[06/24 21:30:56 d2.evaluation.evaluator]: [0mInference done 592/1238. Dataloading: 0.0012 s/iter. Inference: 0.1126 s/iter. Eval: 0.0081 s/iter. Total: 0.1219 s/iter. ETA=0:01:18
[32m[06/24 21:31:01 d2.evaluation.evaluator]: [0mInference done 633/1238. Dataloading: 0.0012 s/iter. Inference: 0.1126 s/iter. Eval: 0.0081 s/iter. Total: 0.1220 s/iter. ETA=0:01:13
[32m[06/24 21:31:06 d2.evaluation.evaluator]: [0mInference done 675/1238. Dataloading: 0.0012 s/iter. Inference: 0.1126 s/iter. Eval: 0.0081 s/iter. Total: 0.1220 s/iter. ETA=0:01:08
[32m[06/24 21:31:12 d2.evaluation.evaluator]: [0mInference done 716/1238. Dataloading: 0.0012 s/iter. Inference: 0.1127 s/iter. Eval: 0.0081 s/iter. Total: 0.1221 s/iter. ETA=0:01:03
[32m[06/24 21:31:17 d2.evaluation.evaluator]: [0mInference done 757/1238. Dataloading: 0.0012 s/iter. Inference: 0.1127 s/iter. Eval: 0.0081 s/iter. Total: 0.1221 s/iter. ETA=0:00:58
[32m[06/24 21:31:22 d2.evaluation.evaluator]: [0mInference done 799/1238. Dataloading: 0.0012 s/iter. Inference: 0.1127 s/iter. Eval: 0.0081 s/iter. Total: 0.1220 s/iter. ETA=0:00:53
[32m[06/24 21:31:27 d2.evaluation.evaluator]: [0mInference done 841/1238. Dataloading: 0.0012 s/iter. Inference: 0.1127 s/iter. Eval: 0.0081 s/iter. Total: 0.1220 s/iter. ETA=0:00:48
[32m[06/24 21:31:32 d2.evaluation.evaluator]: [0mInference done 883/1238. Dataloading: 0.0012 s/iter. Inference: 0.1127 s/iter. Eval: 0.0081 s/iter. Total: 0.1220 s/iter. ETA=0:00:43
[32m[06/24 21:31:37 d2.evaluation.evaluator]: [0mInference done 924/1238. Dataloading: 0.0012 s/iter. Inference: 0.1127 s/iter. Eval: 0.0081 s/iter. Total: 0.1220 s/iter. ETA=0:00:38
[32m[06/24 21:31:42 d2.evaluation.evaluator]: [0mInference done 966/1238. Dataloading: 0.0012 s/iter. Inference: 0.1127 s/iter. Eval: 0.0081 s/iter. Total: 0.1220 s/iter. ETA=0:00:33
[32m[06/24 21:31:47 d2.evaluation.evaluator]: [0mInference done 1007/1238. Dataloading: 0.0012 s/iter. Inference: 0.1127 s/iter. Eval: 0.0081 s/iter. Total: 0.1221 s/iter. ETA=0:00:28
[32m[06/24 21:31:52 d2.evaluation.evaluator]: [0mInference done 1049/1238. Dataloading: 0.0012 s/iter. Inference: 0.1127 s/iter. Eval: 0.0081 s/iter. Total: 0.1220 s/iter. ETA=0:00:23
[32m[06/24 21:31:57 d2.evaluation.evaluator]: [0mInference done 1090/1238. Dataloading: 0.0012 s/iter. Inference: 0.1127 s/iter. Eval: 0.0081 s/iter. Total: 0.1220 s/iter. ETA=0:00:18
[32m[06/24 21:32:02 d2.evaluation.evaluator]: [0mInference done 1131/1238. Dataloading: 0.0012 s/iter. Inference: 0.1128 s/iter. Eval: 0.0081 s/iter. Total: 0.1221 s/iter. ETA=0:00:13
[32m[06/24 21:32:07 d2.evaluation.evaluator]: [0mInference done 1172/1238. Dataloading: 0.0012 s/iter. Inference: 0.1128 s/iter. Eval: 0.0081 s/iter. Total: 0.1221 s/iter. ETA=0:00:08
[32m[06/24 21:32:12 d2.evaluation.evaluator]: [0mInference done 1213/1238. Dataloading: 0.0012 s/iter. Inference: 0.1129 s/iter. Eval: 0.0081 s/iter. Total: 0.1222 s/iter. ETA=0:00:03
[32m[06/24 21:32:16 d2.evaluation.evaluator]: [0mTotal inference time: 0:02:30.943725 (0.122420 s / iter per device, on 4 devices)
[32m[06/24 21:32:16 d2.evaluation.evaluator]: [0mTotal inference pure compute time: 0:02:19 (0.112800 s / iter per device, on 4 devices)
[32m[06/24 21:32:18 d2.evaluation.pascal_voc_evaluation]: [0mEvaluating voc_2007_test using 2007 metric. Note that results do not use the official Matlab API.
[32m[06/24 21:34:02 d2.engine.defaults]: [0mEvaluation results for voc_2007_test in csv format:
[32m[06/24 21:34:02 d2.evaluation.testing]: [0mcopypaste: Task: bbox
[32m[06/24 21:34:02 d2.evaluation.testing]: [0mcopypaste: AP,AP50,AP75
[32m[06/24 21:34:02 d2.evaluation.testing]: [0mcopypaste: 43.5996,65.6389,46.9254
